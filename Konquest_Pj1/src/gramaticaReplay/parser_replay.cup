package gramaticaReplay;
import java_cup.runtime.Symbol;


parser code {:
/*
import classes.Ataque;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.naves_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
*/
    public static ArrayList<Turno> turnos_;
    public static ArrayList<Ataque> ataques;
    public static String jugador_,origen_,destino_;
    public static int turno_,naves_,numeroTurno;
    public static boolean complete_;
   public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }
:}

terminal turno,abreCor,cierraCor,abreLlaves,cierraLlaves,coma,dosPuntos,naves,datos,
nombre,comilla,abreComilla,cierraComilla,num,id,ERROR,espacio,origen,destino,complete,bool,numeroTurno, ataque;

non-terminal TURNO, COMILLAS1, COMILLAS2, TURNOS,TURNO1,NAME,NAME1,NUM,NUM1,ATAQUE,ATAQUE1,
ATAQ,ATAQ1,ATAQ2,ATAQ3,ATAQ4,GALAXY,GALAXY1,O,O1,D,D1,T,T1,DATOS,DATA,ATAQ22,PRODUC1,
PRODUC2,PRODUC3,PRODUC4,PRODUC5,PRODUC6;

start with TURNO;
//para mapas
TURNO::= abreLlaves:e turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves
| error abreLlaves:e turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de iniciar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
| error  turno:e dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de la palabra reservada turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
| error  dosPuntos:e abreCor TURNOS ATAQ4 cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de iniciar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
| error  abreCor:e TURNOS ATAQ4 cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de abrir corchete para un turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
| error  TURNOS:e ATAQ4 cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de declarar un turno";
listaErrores.add(new ErrorSintatico("antes de la estructura de turno",eleft,eright,msj,true));
:}
| error  ATAQ4:e cierraCor cierraLlaves
{:
String msj="Error de sintaxis antes de iniciar la estructura de ataque";
listaErrores.add(new ErrorSintatico("antes de estructura de ataque",eleft,eright,msj,true));
:}
| error  cierraLlaves:e
{:
String msj="Error de sintaxis antes de cerrar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
;



TURNOS::= abreLlaves TURNO1 cierraLlaves 
{:
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
:}
| error abreLlaves:e TURNO1 cierraLlaves 
{: 
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
String msj="Error de sintaxis antes de la declaracion de un turno turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
 :}
| error  TURNO1:e cierraLlaves 
{: 
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
String msj="Error de sintaxis antes en la declaracion de un turno";
listaErrores.add(new ErrorSintatico("en la declaracion de un turno",eleft,eright,msj,true));
 
:}
 ;


TURNO1::= NAME | ATAQUE | NUM  

;


NAME::= nombre dosPuntos COMILLAS1 id:e1 COMILLAS2 coma NAME1 {:jugador_=(String)e1;:}
| error  nombre:e1 dosPuntos COMILLAS1 id:e COMILLAS2 coma NAME1 
{:
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

:}
| error  dosPuntos:e1 COMILLAS1 id:e COMILLAS2 coma NAME1 
{:
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

:}
| error   COMILLAS1:e1 id:e COMILLAS2 coma NAME1 
{:
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

:}
| error   id:e COMILLAS2 coma NAME1 
{:
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error COMILLAS2:e1 coma NAME1 
{:
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno, antes de cerrar comilla del id";
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
:}
| error   coma NAME1 
;


NAME1::= PRODUC1 coma ATAQ 
| ATAQ coma PRODUC1 
;


PRODUC1::=  numeroTurno dosPuntos num:e {:numeroTurno=Integer.parseInt((String)e);:}
| error numeroTurno:e1 dosPuntos num:e 
{:
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
numeroTurno=Integer.parseInt((String)e);:}

| error  dosPuntos:e1 num:e {:
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
numeroTurno=Integer.parseInt((String)e);:}

| error  num:e {:
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
numeroTurno=Integer.parseInt((String)e);:}
 ;

PRODUC2::= nombre dosPuntos COMILLAS1 id:e1 COMILLAS2  {:jugador_=(String)e1;:}
|error nombre:e dosPuntos COMILLAS1 id:e1 COMILLAS2  {:
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

jugador_=(String)e1;:}


|error  dosPuntos:e COMILLAS1 id:e1 COMILLAS2  {:
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
jugador_=(String)e1;:}


|error  COMILLAS1:e id:e1 COMILLAS2  {:
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
jugador_=(String)e1;:}


|error  id:e1 COMILLAS2  {:
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e1;
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
jugador_=(String)e1;:}

;

ATAQUE::= ATAQ  coma ATAQUE1;
ATAQUE1::= PRODUC1 coma PRODUC2
| PRODUC2 coma PRODUC1
;

NUM::= PRODUC1  coma NUM1
;
NUM1::= ATAQ coma PRODUC2 
| PRODUC2 coma ATAQ 
;


ATAQ::= ataque dosPuntos abreLlaves ATAQ22 cierraLlaves  
|error  ataque:e1 dosPuntos abreLlaves ATAQ22 cierraLlaves 
{:
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
:}
|error  dosPuntos:e1 abreLlaves ATAQ22 cierraLlaves 
{:
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
:}
|error  ATAQ22:e cierraLlaves 
{:
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico("",e1left,e1right,msj,true));
:}
;

ATAQ22::= ATAQ1 | ;
ATAQ1::= abreLlaves ATAQ2  cierraLlaves  ATAQ3 
| error abreLlaves ATAQ2  cierraLlaves  ATAQ3 
| error  ATAQ2  cierraLlaves  ATAQ3 
| error cierraLlaves ATAQ3 
;

ATAQ2::= GALAXY coma DATOS 
{: 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);
:}
 | DATOS coma GALAXY 
{: 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);
:}

| error   GALAXY coma DATOS
| error   DATOS coma GALAXY

;
ATAQ3::= coma ATAQ1 |  | error coma ATAQ1;
ATAQ4::= coma TURNOS ATAQ4 |  
| error coma TURNOS 

;



GALAXY::= espacio dosPuntos abreLlaves GALAXY1 cierraLlaves 
| error  dosPuntos:e1 abreLlaves GALAXY1 cierraLlaves 
{:
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
:}
| error   abreLlaves:e1 GALAXY1 cierraLlaves 
{:
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
:}
| error   GALAXY1:e1 cierraLlaves 
{:
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico("",e1left,e1right,msj,true));
:}
| error    cierraLlaves 

;

GALAXY1::= O | D | T;

O::= PRODUC3 coma O1
;


PRODUC3::= origen dosPuntos COMILLAS1 id:e COMILLAS2 {:origen_=(String)e;:}

| error  id:e COMILLAS2 
{:origen_=(String)e;
String msj="Error en declaracion de planeta atacante (origen)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error   COMILLAS2 
;

PRODUC4::= destino dosPuntos COMILLAS1 id:e COMILLAS2 {: destino_=(String)e;:}
|error  dosPuntos:e1 COMILLAS1 id:e COMILLAS2 {:
String msj="Error en declaracion de planeta oponente (destino)";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
destino_=(String)e;:}


|error   COMILLAS1:e1 id:e COMILLAS2 {: destino_=(String)e;
String msj="Error en declaracion de planeta atacante antes de las comillas";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

:}
; 

PRODUC5::=  turno dosPuntos  num:e1 {:turno_=Integer.parseInt((String)e1);:}
|error dosPuntos:e  num:e1 {:
String msj="Error en declaracion de numero de turno de llegada";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

turno_=Integer.parseInt((String)e1);:}
|error   num:e1 {:turno_=Integer.parseInt((String)e1);:} ;


O1::= PRODUC4 coma PRODUC5
| PRODUC5 coma PRODUC4;


D::= PRODUC4 coma D1 
;
D1::= PRODUC3 coma PRODUC5 | PRODUC5 coma PRODUC3
;

T::= PRODUC5 coma T1 ;
T1::= PRODUC3 coma PRODUC4
| PRODUC4 coma PRODUC3
;



DATOS::= datos dosPuntos abreLlaves DATA cierraLlaves 
| error  dosPuntos:e abreLlaves DATA cierraLlaves
{:
String msj="Error en declaracion de datos del ataque (naves,si esta completa)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error abreLlaves:e DATA cierraLlaves
{:
String msj="Error en declaracion de datos del ataque (naves,si esta completa)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
 ;


DATA::= naves dosPuntos num:e coma complete dosPuntos bool:e1 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);
:}
| complete dosPuntos bool:e1 coma naves dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);
:}
| error naves:e2 dosPuntos num:e coma complete dosPuntos bool:e1 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de naves";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


:}
| error  coma:e complete dosPuntos bool:e1 
{:
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error  complete:e dosPuntos bool:e1 
{:
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error   dosPuntos:e bool:e1 
{:
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
| error   bool:e 
{:
complete_= Boolean.parseBoolean((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de "+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
|error complete:e2 dosPuntos bool:e1 coma naves dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));

:}
|error  dosPuntos:e2 bool:e1 coma naves dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));

:}
|error  bool:e1 coma naves dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

:}
|error coma:e2 naves dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de ,naves:"+e;
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));

:}
|error naves:2 dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de naves:"+e;
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));

:}
|error  dosPuntos num:e 
{:
naves_=Integer.parseInt((String)e);
:}


;






//abre comillas
COMILLAS1::= comilla | abreComilla | error id:e {:System.out.println("entra"+e); jugador_=(String)e;:};
COMILLAS2::= comilla | cierraComilla | error id:e {:System.out.println("entra"+e); jugador_=(String)e;:};


