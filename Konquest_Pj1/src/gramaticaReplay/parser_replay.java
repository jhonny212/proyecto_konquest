
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 17:16:05 CST 2020
//----------------------------------------------------

package gramaticaReplay;


import classes.Ataque;
import classes.ErrorSintatico;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.listaErrores;
import static gramaticaReplay.parser_replay.naves_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 17:16:05 CST 2020
  */
public class parser_replay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser_replay() {super();}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\012\000\002\002" +
    "\013\000\002\002\012\000\002\002\011\000\002\002\010" +
    "\000\002\002\007\000\002\002\006\000\002\002\004\000" +
    "\002\005\005\000\002\005\006\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\011\000\002\007\012\000\002\007\011\000\002\007\010" +
    "\000\002\007\007\000\002\007\006\000\002\007\005\000" +
    "\002\010\005\000\002\010\005\000\002\035\005\000\002" +
    "\035\006\000\002\035\005\000\002\035\004\000\002\036" +
    "\007\000\002\036\010\000\002\036\007\000\002\036\006" +
    "\000\002\036\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\011\005\000\002\012\005\000\002" +
    "\012\005\000\002\015\007\000\002\015\010\000\002\015" +
    "\007\000\002\015\005\000\002\034\003\000\002\034\002" +
    "\000\002\016\006\000\002\016\007\000\002\016\006\000" +
    "\002\016\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\020\004\000\002\020" +
    "\002\000\002\020\005\000\002\021\005\000\002\021\002" +
    "\000\002\021\005\000\002\022\007\000\002\022\007\000" +
    "\002\022\006\000\002\022\005\000\002\022\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\005\000\002\037\007\000\002\037\005\000\002\037\004" +
    "\000\002\040\007\000\002\040\007\000\002\040\006\000" +
    "\002\041\005\000\002\041\005\000\002\041\004\000\002" +
    "\025\005\000\002\025\005\000\002\026\005\000\002\027" +
    "\005\000\002\027\005\000\002\030\005\000\002\031\005" +
    "\000\002\031\005\000\002\032\007\000\002\032\007\000" +
    "\002\032\006\000\002\033\011\000\002\033\011\000\002" +
    "\033\012\000\002\033\007\000\002\033\006\000\002\033" +
    "\005\000\002\033\004\000\002\033\012\000\002\033\011" +
    "\000\002\033\010\000\002\033\007\000\002\033\005\000" +
    "\002\033\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\006\003\004\007\005\001\002\000\022\003" +
    "\u015c\004\u0157\005\u015a\006\uffc8\007\u015b\010\u0159\011\017" +
    "\012\u015e\001\002\000\004\004\010\001\002\000\004\002" +
    "\007\001\002\000\004\002\001\001\002\000\004\012\011" +
    "\001\002\000\004\005\012\001\002\000\006\003\013\007" +
    "\014\001\002\000\014\003\035\007\u0153\015\037\031\031" +
    "\032\036\001\002\000\012\003\035\015\037\031\031\032" +
    "\036\001\002\000\010\003\016\006\uffc8\011\017\001\002" +
    "\000\004\011\025\001\002\000\006\003\013\007\014\001" +
    "\002\000\004\006\021\001\002\000\004\010\022\001\002" +
    "\000\004\002\000\001\002\000\010\003\016\006\uffc8\011" +
    "\017\001\002\000\004\006\uffc9\001\002\000\006\003\013" +
    "\007\014\001\002\000\004\006\uffc7\001\002\000\004\011" +
    "\u0147\001\002\000\004\010\ufff3\001\002\000\004\012\u0145" +
    "\001\002\000\004\011\u0127\001\002\000\004\010\u0126\001" +
    "\002\000\004\010\ufff4\001\002\000\034\003\u010e\007\071" +
    "\010\uffd5\011\u010b\012\u0110\015\u010f\016\265\017\044\020" +
    "\050\021\373\022\u010a\031\374\032\065\001\002\000\004" +
    "\012\u0106\001\002\000\004\012\041\001\002\000\004\010" +
    "\ufff5\001\002\000\010\003\043\016\045\017\044\001\002" +
    "\000\004\022\047\001\002\000\004\022\046\001\002\000" +
    "\004\022\uff9b\001\002\000\004\022\uff9c\001\002\000\004" +
    "\022\uff9a\001\002\000\010\003\051\016\052\020\050\001" +
    "\002\000\006\010\uff98\011\uff98\001\002\000\004\022\u0105" +
    "\001\002\000\006\010\uff99\011\uff99\001\002\000\004\011" +
    "\054\001\002\000\010\003\056\031\031\032\036\001\002" +
    "\000\004\011\u0101\001\002\000\020\003\067\007\071\010" +
    "\uffd5\012\375\021\373\031\374\032\065\001\002\000\004" +
    "\011\061\001\002\000\004\010\ufff2\001\002\000\006\003" +
    "\063\032\036\001\002\000\004\010\uffeb\001\002\000\014" +
    "\003\067\007\071\010\uffd5\012\070\032\065\001\002\000" +
    "\004\010\uffd6\001\002\000\004\012\367\001\002\000\004" +
    "\010\366\001\002\000\014\003\074\007\356\010\357\014" +
    "\077\024\073\001\002\000\004\007\352\001\002\000\010" +
    "\003\074\014\077\024\073\001\002\000\004\010\343\001" +
    "\002\000\004\012\337\001\002\000\024\003\321\004\171" +
    "\007\322\010\172\012\323\014\077\024\073\025\173\026" +
    "\177\001\002\000\004\011\305\001\002\000\004\011\165" +
    "\001\002\000\004\012\100\001\002\000\004\007\101\001" +
    "\002\000\010\003\104\013\105\027\103\001\002\000\004" +
    "\010\164\001\002\000\004\012\156\001\002\000\014\011" +
    "\117\012\120\013\116\027\114\030\115\001\002\000\004" +
    "\012\106\001\002\000\004\021\107\001\002\000\004\011" +
    "\110\001\002\000\004\027\111\001\002\000\004\012\112" +
    "\001\002\000\004\030\113\001\002\000\004\010\uffa9\001" +
    "\002\000\004\012\150\001\002\000\006\010\uffa3\011\144" +
    "\001\002\000\006\012\136\021\135\001\002\000\006\013" +
    "\130\027\127\001\002\000\006\021\122\030\121\001\002" +
    "\000\006\010\uffa4\011\123\001\002\000\004\010\uff9d\001" +
    "\002\000\004\013\124\001\002\000\004\012\125\001\002" +
    "\000\004\021\126\001\002\000\004\010\uffa1\001\002\000" +
    "\004\012\133\001\002\000\004\012\131\001\002\000\004" +
    "\021\132\001\002\000\004\010\uff9f\001\002\000\004\030" +
    "\134\001\002\000\004\010\uffa6\001\002\000\004\010\uff9e" +
    "\001\002\000\004\021\137\001\002\000\004\011\140\001" +
    "\002\000\004\027\141\001\002\000\004\012\142\001\002" +
    "\000\004\030\143\001\002\000\004\010\uffa7\001\002\000" +
    "\004\013\145\001\002\000\004\012\146\001\002\000\004" +
    "\021\147\001\002\000\004\010\uffa0\001\002\000\004\030" +
    "\151\001\002\000\006\010\uffa5\011\152\001\002\000\004" +
    "\013\153\001\002\000\004\012\154\001\002\000\004\021" +
    "\155\001\002\000\004\010\uffa2\001\002\000\004\030\157" +
    "\001\002\000\004\011\160\001\002\000\004\013\161\001" +
    "\002\000\004\012\162\001\002\000\004\021\163\001\002" +
    "\000\004\010\uffa8\001\002\000\006\010\uffac\011\uffac\001" +
    "\002\000\006\003\166\024\073\001\002\000\020\003\200" +
    "\004\171\007\176\010\172\012\204\025\173\026\177\001" +
    "\002\000\004\010\uffcf\001\002\000\004\010\uffc0\001\002" +
    "\000\004\012\303\001\002\000\006\010\uffc2\011\uffc2\001" +
    "\002\000\004\012\277\001\002\000\004\010\uffbf\001\002" +
    "\000\004\010\uffc1\001\002\000\012\003\200\004\171\025" +
    "\173\026\177\001\002\000\004\012\271\001\002\000\020" +
    "\003\264\012\222\016\265\017\044\020\050\021\216\022" +
    "\247\001\002\000\004\011\255\001\002\000\004\011\240" +
    "\001\002\000\004\010\237\001\002\000\004\007\234\001" +
    "\002\000\004\011\206\001\002\000\010\003\210\004\171" +
    "\026\177\001\002\000\004\011\230\001\002\000\014\003" +
    "\043\012\222\016\045\017\044\021\216\001\002\000\004" +
    "\011\213\001\002\000\004\010\uffbe\001\002\000\006\003" +
    "\215\004\171\001\002\000\004\010\uffb4\001\002\000\006" +
    "\012\217\021\216\001\002\000\006\010\uffb5\011\uffb5\001" +
    "\002\000\004\021\220\001\002\000\006\010\uffb6\011\uffb6" +
    "\001\002\000\004\022\226\001\002\000\012\003\043\016" +
    "\045\017\044\021\220\001\002\000\004\022\224\001\002" +
    "\000\010\003\051\016\052\020\050\001\002\000\006\010" +
    "\uffb9\011\uffb9\001\002\000\010\003\051\016\052\020\050" +
    "\001\002\000\006\010\uffb8\011\uffb8\001\002\000\006\003" +
    "\232\026\177\001\002\000\004\010\uffb3\001\002\000\012" +
    "\003\043\012\233\016\045\017\044\001\002\000\010\003" +
    "\043\016\045\017\044\001\002\000\012\003\200\004\171" +
    "\025\173\026\177\001\002\000\004\010\236\001\002\000" +
    "\006\010\uffc5\011\uffc5\001\002\000\006\010\uffc3\011\uffc3" +
    "\001\002\000\010\003\242\004\171\025\173\001\002\000" +
    "\004\011\252\001\002\000\016\003\051\012\217\016\052" +
    "\020\050\021\216\022\247\001\002\000\004\011\245\001" +
    "\002\000\004\010\uffb2\001\002\000\006\003\215\004\171" +
    "\001\002\000\004\010\uffb1\001\002\000\010\003\051\016" +
    "\052\020\050\001\002\000\006\010\uffbb\011\uffbb\001\002" +
    "\000\006\010\uffbc\011\uffbc\001\002\000\006\003\253\025" +
    "\173\001\002\000\012\003\051\016\052\020\050\022\247" +
    "\001\002\000\004\010\uffb0\001\002\000\010\003\257\025" +
    "\173\026\177\001\002\000\004\011\267\001\002\000\016" +
    "\003\264\012\233\016\265\017\044\020\050\022\247\001" +
    "\002\000\004\011\262\001\002\000\004\010\uffaf\001\002" +
    "\000\006\003\232\026\177\001\002\000\004\010\uffae\001" +
    "\002\000\004\022\266\001\002\000\006\011\uff99\022\uff9c" +
    "\001\002\000\006\011\uff97\022\uff9a\001\002\000\006\003" +
    "\253\025\173\001\002\000\004\010\uffad\001\002\000\010" +
    "\003\043\016\045\017\044\001\002\000\004\022\273\001" +
    "\002\000\010\003\051\016\052\020\050\001\002\000\006" +
    "\010\uffba\011\uffba\001\002\000\004\010\276\001\002\000" +
    "\006\010\uffc4\011\uffc4\001\002\000\010\003\043\016\045" +
    "\017\044\001\002\000\004\022\301\001\002\000\010\003" +
    "\051\016\052\020\050\001\002\000\006\010\uffbd\011\uffbd" +
    "\001\002\000\004\021\304\001\002\000\006\010\uffb7\011" +
    "\uffb7\001\002\000\006\003\306\014\077\001\002\000\006" +
    "\007\311\012\310\001\002\000\004\010\uffd0\001\002\000" +
    "\004\007\314\001\002\000\010\003\104\013\105\027\103" +
    "\001\002\000\004\010\313\001\002\000\006\010\uffaa\011" +
    "\uffaa\001\002\000\010\003\104\013\105\027\103\001\002" +
    "\000\004\010\316\001\002\000\006\010\uffab\011\uffab\001" +
    "\002\000\004\011\335\001\002\000\004\011\333\001\002" +
    "\000\032\003\330\004\171\007\322\010\172\012\331\016" +
    "\265\017\044\020\050\021\216\022\247\025\173\026\177" +
    "\001\002\000\016\003\325\004\171\013\105\025\173\026" +
    "\177\027\103\001\002\000\004\007\324\001\002\000\016" +
    "\003\325\004\171\013\105\025\173\026\177\027\103\001" +
    "\002\000\030\003\264\011\117\012\326\013\116\016\265" +
    "\017\044\020\050\021\216\022\247\027\114\030\115\001" +
    "\002\000\014\003\043\016\045\017\044\021\327\030\121" +
    "\001\002\000\006\010\uff9d\011\uffb6\001\002\000\020\003" +
    "\264\012\222\016\265\017\044\020\050\021\216\022\332" +
    "\001\002\000\014\003\043\007\324\016\045\017\044\021" +
    "\220\001\002\000\014\003\051\011\uff97\016\052\020\050" +
    "\022\uff9a\001\002\000\006\003\306\014\077\001\002\000" +
    "\004\010\uffce\001\002\000\006\003\166\024\073\001\002" +
    "\000\004\010\uffcd\001\002\000\004\007\340\001\002\000" +
    "\012\003\200\004\171\025\173\026\177\001\002\000\004" +
    "\010\342\001\002\000\006\010\uffc6\011\uffc6\001\002\000" +
    "\010\003\344\010\uffcb\011\345\001\002\000\004\011\350" +
    "\001\002\000\006\003\067\007\071\001\002\000\004\010" +
    "\uffd4\001\002\000\004\010\uffcc\001\002\000\006\003\067" +
    "\007\071\001\002\000\004\010\uffca\001\002\000\010\003" +
    "\067\007\071\010\uffd5\001\002\000\004\010\354\001\002" +
    "\000\006\010\uffd8\011\uffd8\001\002\000\004\010\364\001" +
    "\002\000\010\003\074\014\077\024\073\001\002\000\010" +
    "\003\344\010\uffcb\011\345\001\002\000\004\010\uffd1\001" +
    "\002\000\004\010\362\001\002\000\010\003\344\010\uffcb" +
    "\011\345\001\002\000\004\010\uffd3\001\002\000\010\003" +
    "\344\010\uffcb\011\345\001\002\000\004\010\uffd2\001\002" +
    "\000\006\010\uffd7\011\uffd7\001\002\000\004\007\370\001" +
    "\002\000\010\003\067\007\071\010\uffd5\001\002\000\004" +
    "\010\372\001\002\000\006\010\uffd9\011\uffd9\001\002\000" +
    "\006\010\uffe6\011\uffe6\001\002\000\004\012\377\001\002" +
    "\000\006\007\352\021\376\001\002\000\006\010\uffe7\011" +
    "\uffe7\001\002\000\004\021\u0100\001\002\000\006\010\uffe8" +
    "\011\uffe8\001\002\000\006\003\u0102\031\031\001\002\000" +
    "\010\012\u0104\021\373\031\374\001\002\000\004\010\uffea" +
    "\001\002\000\004\021\376\001\002\000\006\010\uff97\011" +
    "\uff97\001\002\000\004\007\u0107\001\002\000\010\003\067" +
    "\007\071\010\uffd5\001\002\000\004\010\u0109\001\002\000" +
    "\006\010\uffda\011\uffda\001\002\000\010\003\051\016\052" +
    "\020\050\001\002\000\010\003\056\031\031\032\036\001" +
    "\002\000\004\011\u0120\001\002\000\004\022\u011c\001\002" +
    "\000\016\003\074\007\356\010\357\014\077\022\266\024" +
    "\073\001\002\000\004\012\u0116\001\002\000\014\003\043" +
    "\007\352\016\045\017\044\021\376\001\002\000\004\022" +
    "\u0112\001\002\000\010\003\051\016\052\020\050\001\002" +
    "\000\004\011\u0114\001\002\000\010\003\056\031\031\032" +
    "\036\001\002\000\004\010\ufff0\001\002\000\010\003\043" +
    "\016\045\017\044\001\002\000\004\022\u0118\001\002\000" +
    "\010\003\051\016\052\020\050\001\002\000\004\011\u011a" +
    "\001\002\000\010\003\056\031\031\032\036\001\002\000" +
    "\004\010\ufff1\001\002\000\010\003\051\016\052\020\050" +
    "\001\002\000\004\011\u011e\001\002\000\010\003\056\031" +
    "\031\032\036\001\002\000\004\010\uffef\001\002\000\010" +
    "\003\056\031\031\032\036\001\002\000\004\010\uffed\001" +
    "\002\000\004\010\uffec\001\002\000\004\011\u0124\001\002" +
    "\000\010\003\056\031\031\032\036\001\002\000\004\010" +
    "\uffee\001\002\000\010\003\ufff8\006\ufff8\011\ufff8\001\002" +
    "\000\010\003\u0128\015\u012c\031\031\001\002\000\022\003" +
    "\043\012\u0144\015\u0136\016\045\017\044\021\373\022\u0137" +
    "\031\374\001\002\000\004\011\u0142\001\002\000\004\011" +
    "\u0131\001\002\000\004\010\uffe0\001\002\000\004\012\u012d" +
    "\001\002\000\010\003\043\016\045\017\044\001\002\000" +
    "\004\022\u012f\001\002\000\010\003\051\016\052\020\050" +
    "\001\002\000\006\010\uffe5\011\uffe5\001\002\000\006\003" +
    "\u0132\015\u012c\001\002\000\016\003\043\012\u0135\015\u0136" +
    "\016\045\017\044\022\u0137\001\002\000\004\010\uffdf\001" +
    "\002\000\004\022\u0140\001\002\000\010\003\043\016\045" +
    "\017\044\001\002\000\004\012\u0139\001\002\000\010\003" +
    "\051\016\052\020\050\001\002\000\006\010\uffe1\011\uffe1" +
    "\001\002\000\010\003\043\016\045\017\044\001\002\000" +
    "\004\022\u013b\001\002\000\010\003\051\016\052\020\050" +
    "\001\002\000\006\010\uffe4\011\uffe4\001\002\000\004\022" +
    "\u013e\001\002\000\010\003\051\016\052\020\050\001\002" +
    "\000\006\010\uffe3\011\uffe3\001\002\000\010\003\051\016" +
    "\052\020\050\001\002\000\006\010\uffe2\011\uffe2\001\002" +
    "\000\006\003\u0102\031\031\001\002\000\004\010\uffde\001" +
    "\002\000\012\003\043\016\045\017\044\021\376\001\002" +
    "\000\004\021\u0146\001\002\000\006\010\uffe9\011\uffe9\001" +
    "\002\000\010\003\u014a\015\u012c\032\036\001\002\000\004" +
    "\011\u0150\001\002\000\004\010\uffdd\001\002\000\024\003" +
    "\u014e\007\071\010\uffd5\012\u014f\015\u0136\016\045\017\044" +
    "\022\u0137\032\065\001\002\000\004\011\u014c\001\002\000" +
    "\006\003\063\032\036\001\002\000\004\010\uffdb\001\002" +
    "\000\016\003\074\007\356\010\357\014\077\022\046\024" +
    "\073\001\002\000\012\003\043\007\352\016\045\017\044" +
    "\001\002\000\006\003\u0132\015\u012c\001\002\000\004\010" +
    "\uffdc\001\002\000\004\010\u0156\001\002\000\012\003\035" +
    "\015\037\031\031\032\036\001\002\000\004\010\u0155\001" +
    "\002\000\010\003\ufff7\006\ufff7\011\ufff7\001\002\000\010" +
    "\003\ufff6\006\ufff6\011\ufff6\001\002\000\004\012\u0174\001" +
    "\002\000\004\006\u0172\001\002\000\004\002\ufff9\001\002" +
    "\000\006\003\013\007\014\001\002\000\014\003\035\004" +
    "\u0167\015\037\031\031\032\036\001\002\000\016\003\035" +
    "\007\u0153\011\025\015\037\031\031\032\036\001\002\000" +
    "\010\003\016\006\uffc8\011\017\001\002\000\004\005\u015f" +
    "\001\002\000\006\003\013\007\014\001\002\000\010\003" +
    "\016\006\uffc8\011\017\001\002\000\004\006\u0162\001\002" +
    "\000\004\010\u0163\001\002\000\004\002\ufffd\001\002\000" +
    "\004\006\u0165\001\002\000\004\010\u0166\001\002\000\004" +
    "\002\ufffb\001\002\000\004\012\u0168\001\002\000\004\005" +
    "\u0169\001\002\000\006\003\013\007\014\001\002\000\010" +
    "\003\016\006\uffc8\011\017\001\002\000\004\006\u016c\001" +
    "\002\000\004\010\u016d\001\002\000\004\002\uffff\001\002" +
    "\000\010\003\016\006\uffc8\011\017\001\002\000\004\006" +
    "\u0170\001\002\000\004\010\u0171\001\002\000\004\002\ufffc" +
    "\001\002\000\004\010\u0173\001\002\000\004\002\ufffa\001" +
    "\002\000\004\005\u0175\001\002\000\006\003\013\007\014" +
    "\001\002\000\010\003\016\006\uffc8\011\017\001\002\000" +
    "\004\006\u0178\001\002\000\004\010\u0179\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\004\002\005\001\001\000\006\005\u015c\021" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\014\001\001\000\016\006\u0151\007\037\011\027\013\033" +
    "\015\031\035\026\001\001\000\016\006\032\007\037\011" +
    "\027\013\033\015\031\035\026\001\001\000\004\021\017" +
    "\001\001\000\002\001\001\000\004\005\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\023\001\001\000\002\001\001\000\004\005\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u010c\004\u010b\016\063\034\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\057\015\054\035\056\001\001\000\002\001\001\000\006" +
    "\016\063\034\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\061\001\001\000\002\001\001\000\006" +
    "\016\063\034\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\354\022\074\032\075" +
    "\001\001\000\002\001\001\000\010\017\071\022\074\032" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\022\317\023\202\024\174\026\167\030\173\032\316\037" +
    "\204\040\201\041\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\166\001\001\000\020\023\202\024\174\026\167" +
    "\030\173\037\204\040\201\041\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\274\024\174\026\167\030\173\037\204\040\201" +
    "\041\200\001\001\000\002\001\001\000\006\003\220\004" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\211\040\210\041\206\001\001\000\002\001\001\000\004" +
    "\003\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\222\001\001\000\002\001\001" +
    "\000\004\004\224\001\001\000\002\001\001\000\004\004" +
    "\226\001\001\000\002\001\001\000\004\040\230\001\001" +
    "\000\002\001\001\000\004\003\220\001\001\000\004\003" +
    "\222\001\001\000\020\023\234\024\174\026\167\030\173" +
    "\037\204\040\201\041\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\243\037\242" +
    "\041\240\001\001\000\002\001\001\000\004\004\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\245" +
    "\001\001\000\002\001\001\000\004\004\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\253\001\001" +
    "\000\004\004\247\001\001\000\002\001\001\000\010\031" +
    "\260\037\257\040\255\001\001\000\002\001\001\000\006" +
    "\003\220\004\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\267\001\001\000\002\001\001\000\004\003\271\001\001" +
    "\000\002\001\001\000\004\004\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\277" +
    "\001\001\000\002\001\001\000\004\004\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\220\004\247\023\202\024\174\026\167\030" +
    "\173\037\204\040\201\041\200\001\001\000\022\023\274" +
    "\024\174\026\167\030\173\033\311\037\204\040\201\041" +
    "\200\001\001\000\002\001\001\000\022\023\234\024\174" +
    "\026\167\030\173\033\314\037\204\040\201\041\200\001" +
    "\001\000\006\003\220\004\247\001\001\000\004\003\222" +
    "\001\001\000\002\001\001\000\006\003\220\004\247\001" +
    "\001\000\004\003\222\001\001\000\004\004\250\001\001" +
    "\000\004\032\333\001\001\000\002\001\001\000\004\022" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\340\024\174\026\167\030\173\037\204\040\201\041" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\345\001\001\000\002\001\001\000\004\016\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\350" +
    "\001\001\000\002\001\001\000\006\016\063\034\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\360\022\074\032\075\001\001\000\004\020" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\362\001\001\000\002\001\001\000\004\020\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\063\034\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\063\034\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u0122\001\001\000\010\010" +
    "\u0121\015\054\035\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\354\022\074\032\075\001\001\000" +
    "\002\001\001\000\004\003\u0110\001\001\000\002\001\001" +
    "\000\004\004\u0112\001\001\000\002\001\001\000\010\010" +
    "\u0114\015\054\035\056\001\001\000\002\001\001\000\004" +
    "\003\u0116\001\001\000\002\001\001\000\004\004\u0118\001" +
    "\001\000\002\001\001\000\010\010\u011a\015\054\035\056" +
    "\001\001\000\002\001\001\000\004\004\u011c\001\001\000" +
    "\002\001\001\000\010\010\u011e\015\054\035\056\001\001" +
    "\000\002\001\001\000\010\010\u0120\015\054\035\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u0124\015\054\035\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u012a\035\u0129\036\u0128" +
    "\001\001\000\004\003\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u012d\001\001\000\002\001\001\000\004\004\u012f\001" +
    "\001\000\002\001\001\000\004\036\u0132\001\001\000\004" +
    "\003\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u013c\001\001\000\002\001\001\000\004\004\u0137" +
    "\001\001\000\002\001\001\000\004\003\u0139\001\001\000" +
    "\002\001\001\000\004\004\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u013e\001\001\000\002\001" +
    "\001\000\004\004\u0140\001\001\000\002\001\001\000\004" +
    "\035\u0142\001\001\000\002\001\001\000\004\003\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u0148" +
    "\015\u0147\036\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\u0133\016\063\034\065\001\001\000\002" +
    "\001\001\000\004\015\u014c\001\001\000\002\001\001\000" +
    "\010\017\354\022\074\032\075\001\001\000\004\003\u013c" +
    "\001\001\000\004\036\u0150\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\u0153\007\037\011\027\013\033" +
    "\015\031\035\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u016d\001\001\000\016\006" +
    "\032\007\037\011\027\013\033\015\031\035\026\001\001" +
    "\000\016\006\u0151\007\037\011\027\013\033\015\031\035" +
    "\026\001\001\000\004\021\u0163\001\001\000\002\001\001" +
    "\000\004\005\u015f\001\001\000\004\021\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0169\001\001\000\004" +
    "\021\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u016e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0175\001\001" +
    "\000\004\021\u0176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_replay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_replay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_replay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}
 public static ArrayList<ErrorSintatico> listaErrores;


/*
import classes.Ataque;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.naves_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
*/
    public static ArrayList<Turno> turnos_;
    public static ArrayList<Ataque> ataques;
    public static String jugador_,origen_,destino_;
    public static int turno_,naves_,numeroTurno;
    public static boolean complete_;
   public void syntax_error(Symbol s){
       listaErrores.add(new ErrorSintatico(s,"",false));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser_replay$actions {
  private final parser_replay parser;

  /** Constructor */
  CUP$parser_replay$actions(parser_replay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser_replay$do_action(
    int                        CUP$parser_replay$act_num,
    java_cup.runtime.lr_parser CUP$parser_replay$parser,
    java.util.Stack            CUP$parser_replay$stack,
    int                        CUP$parser_replay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_replay$result;

      /* select the action based on the action number */
      switch (CUP$parser_replay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMILLAS2 ::= error id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("entra"+e); jugador_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COMILLAS2 ::= cierraComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMILLAS2 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMILLAS1 ::= error id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("entra"+e); jugador_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMILLAS1 ::= abreComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMILLAS1 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DATA ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DATA ::= error naves num 
            {
              Object RESULT =null;
		int dosPuntosleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int dosPuntosright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object dosPuntos = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de naves:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DATA ::= error coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de ,naves:"+e;
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DATA ::= error bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DATA ::= error dosPuntos bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DATA ::= error complete dosPuntos bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DATA ::= error bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
complete_= Boolean.parseBoolean((String)e);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de "+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DATA ::= error dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de :"+e1;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DATA ::= error complete dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
complete_= Boolean.parseBoolean((String)e1);
String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DATA ::= error coma complete dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de complete";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DATA ::= error naves dosPuntos num coma complete dosPuntos bool 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

String msj="Error en declaracion de datos del ataque (naves,si esta completa) antes de naves";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));



              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DATA ::= complete dosPuntos bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DATA ::= naves dosPuntos num coma complete dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DATOS ::= error abreLlaves DATA cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		
String msj="Error en declaracion de datos del ataque (naves,si esta completa)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DATOS ::= error dosPuntos abreLlaves DATA cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
String msj="Error en declaracion de datos del ataque (naves,si esta completa)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DATOS ::= datos dosPuntos abreLlaves DATA cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T1 ::= PRODUC4 coma PRODUC3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T1 ::= PRODUC3 coma PRODUC4 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T ::= PRODUC5 coma T1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // D1 ::= PRODUC5 coma PRODUC3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // D1 ::= PRODUC3 coma PRODUC5 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // D ::= PRODUC4 coma D1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // O1 ::= PRODUC5 coma PRODUC4 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // O1 ::= PRODUC4 coma PRODUC5 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRODUC5 ::= error num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		turno_=Integer.parseInt((String)e1);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC5",31, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRODUC5 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
String msj="Error en declaracion de numero de turno de llegada";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

turno_=Integer.parseInt((String)e1);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC5",31, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRODUC5 ::= turno dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		turno_=Integer.parseInt((String)e1);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC5",31, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRODUC4 ::= error COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		 destino_=(String)e;
String msj="Error en declaracion de planeta atacante antes de las comillas";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC4",30, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRODUC4 ::= error dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error en declaracion de planeta oponente (destino)";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
destino_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC4",30, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRODUC4 ::= destino dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		 destino_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC4",30, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRODUC3 ::= error COMILLAS2 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC3",29, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRODUC3 ::= error id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		origen_=(String)e;
String msj="Error en declaracion de planeta atacante (origen)";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC3",29, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRODUC3 ::= origen dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		origen_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC3",29, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // O ::= PRODUC3 coma O1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GALAXY1 ::= T 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GALAXY1 ::= D 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GALAXY1 ::= O 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GALAXY ::= error cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GALAXY ::= error GALAXY1 cierraLlaves 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico("",e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GALAXY ::= error abreLlaves GALAXY1 cierraLlaves 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GALAXY ::= error dosPuntos abreLlaves GALAXY1 cierraLlaves 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
String msj="error en declaracion de atributos de planeta atacante, oponente y turno de llegada";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GALAXY ::= espacio dosPuntos abreLlaves GALAXY1 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATAQ4 ::= error coma TURNOS 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATAQ4 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATAQ4 ::= coma TURNOS ATAQ4 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATAQ3 ::= error coma ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATAQ3 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATAQ3 ::= coma ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATAQ2 ::= error DATOS coma GALAXY 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATAQ2 ::= error GALAXY coma DATOS 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATAQ2 ::= DATOS coma GALAXY 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATAQ2 ::= GALAXY coma DATOS 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATAQ1 ::= error cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATAQ1 ::= error ATAQ2 cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ATAQ1 ::= error abreLlaves ATAQ2 cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATAQ1 ::= abreLlaves ATAQ2 cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ATAQ22 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATAQ22 ::= ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATAQ ::= error ATAQ22 cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico("",eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATAQ ::= error dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATAQ ::= error ataque dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		
String msj="Error en la declaracion de un ataque";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATAQ ::= ataque dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NUM1 ::= PRODUC2 coma ATAQ 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NUM1 ::= ATAQ coma PRODUC2 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NUM ::= PRODUC1 coma NUM1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM",7, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATAQUE1 ::= PRODUC2 coma PRODUC1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATAQUE1 ::= PRODUC1 coma PRODUC2 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATAQUE ::= ATAQ coma ATAQUE1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE",9, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRODUC2 ::= error id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e1;
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC2",28, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRODUC2 ::= error COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC2",28, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRODUC2 ::= error dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC2",28, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRODUC2 ::= error nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC2",28, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRODUC2 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC2",28, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PRODUC1 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC1",27, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PRODUC1 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC1",27, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PRODUC1 ::= error numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
String msj="Error de sintaxis antes la declaracion del numero de turno de un jugador \n";
msj+="Sintaxis: turno: NUMERO";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC1",27, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRODUC1 ::= numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("PRODUC1",27, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NAME1 ::= ATAQ coma PRODUC1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NAME1 ::= PRODUC1 coma ATAQ 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NAME ::= error coma NAME1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NAME ::= error COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno, antes de cerrar comilla del id";
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NAME ::= error id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NAME ::= error COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NAME ::= error dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
msj+="La sintaxis debe ser nombre: \"id\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NAME ::= error nombre dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
 jugador_=(String)e;
String msj="Error de sintaxis antes la declaracion la accion del \n jugador de n turno jugador:"+e;
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NAME ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TURNO1 ::= NUM 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TURNO1 ::= ATAQUE 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TURNO1 ::= NAME 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TURNOS ::= error TURNO1 cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		 
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
String msj="Error de sintaxis antes en la declaracion de un turno";
listaErrores.add(new ErrorSintatico("en la declaracion de un turno",eleft,eright,msj,true));
 

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TURNOS ::= error abreLlaves TURNO1 cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		 
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
String msj="Error de sintaxis antes de la declaracion de un turno turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
 
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TURNOS ::= abreLlaves TURNO1 cierraLlaves 
            {
              Object RESULT =null;
		
turnos_.add(new Turno(ataques,jugador_,numeroTurno));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TURNO ::= error cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
String msj="Error de sintaxis antes de cerrar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TURNO ::= error ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		
String msj="Error de sintaxis antes de iniciar la estructura de ataque";
listaErrores.add(new ErrorSintatico("antes de estructura de ataque",eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TURNO ::= error TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
String msj="Error de sintaxis antes de declarar un turno";
listaErrores.add(new ErrorSintatico("antes de la estructura de turno",eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TURNO ::= error abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		
String msj="Error de sintaxis antes de abrir corchete para un turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TURNO ::= error dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		
String msj="Error de sintaxis antes de iniciar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TURNO ::= error turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		
String msj="Error de sintaxis antes de la palabra reservada turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TURNO ::= error abreLlaves turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;
		
String msj="Error de sintaxis antes de iniciar la estructura del turno";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TURNO ::= abreLlaves turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TURNO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		RESULT = start_val;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_replay$parser.done_parsing();
          return CUP$parser_replay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

