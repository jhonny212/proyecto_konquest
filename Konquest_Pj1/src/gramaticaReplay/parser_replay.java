
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 24 22:16:14 CST 2020
//----------------------------------------------------

package gramaticaReplay;

import classes.Ataque;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.naves_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 24 22:16:14 CST 2020
  */
public class parser_replay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser_replay() {super();}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\012\000\002\002" +
    "\005\000\002\002\004\000\002\005\005\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\007\011\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\007\000\002\010\007\000\002\010\006" +
    "\000\002\010\005\000\002\013\005\000\002\014\013\000" +
    "\002\014\013\000\002\011\007\000\002\012\011\000\002" +
    "\012\011\000\002\015\007\000\002\034\003\000\002\034" +
    "\002\000\002\016\006\000\002\016\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\004\000" +
    "\002\020\002\000\002\020\003\000\002\021\005\000\002" +
    "\021\002\000\002\021\005\000\002\022\007\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004\000\002\024\011\000\002\024\005\000" +
    "\002\024\005\000\002\025\013\000\002\025\013\000\002" +
    "\025\005\000\002\026\011\000\002\026\005\000\002\026" +
    "\005\000\002\027\013\000\002\027\013\000\002\027\003" +
    "\000\002\027\005\000\002\030\007\000\002\031\015\000" +
    "\002\031\015\000\002\032\007\000\002\032\005\000\002" +
    "\033\011\000\002\033\011\000\002\033\003\000\002\033" +
    "\005\000\002\033\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\003\004\007\005\001\002\000\012\002" +
    "\uffdb\003\016\005\u010f\011\017\001\002\000\004\004\010" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\012\011\001\002\000\004\005\012\001\002" +
    "\000\006\003\013\007\014\001\002\000\004\007\u010d\001" +
    "\002\000\012\003\034\015\036\031\030\032\035\001\002" +
    "\000\010\003\016\006\uffdb\011\017\001\002\000\004\011" +
    "\025\001\002\000\006\003\013\007\014\001\002\000\004" +
    "\006\021\001\002\000\004\010\022\001\002\000\004\002" +
    "\000\001\002\000\012\002\uffdb\003\016\006\uffdb\011\017" +
    "\001\002\000\006\002\uffdc\006\uffdc\001\002\000\006\003" +
    "\013\007\014\001\002\000\006\002\uffda\006\uffda\001\002" +
    "\000\014\002\ufff9\003\ufff9\006\ufff9\010\ufff9\011\ufff9\001" +
    "\002\000\004\012\373\001\002\000\004\011\347\001\002" +
    "\000\004\010\346\001\002\000\014\002\ufffa\003\ufffa\006" +
    "\ufffa\010\ufffa\011\ufffa\001\002\000\016\003\337\011\335" +
    "\012\340\015\036\022\334\032\035\001\002\000\004\012" +
    "\076\001\002\000\004\012\040\001\002\000\014\002\ufffb" +
    "\003\ufffb\006\ufffb\010\ufffb\011\ufffb\001\002\000\010\003" +
    "\042\016\044\017\043\001\002\000\004\022\046\001\002" +
    "\000\004\022\045\001\002\000\016\002\uffbb\003\uffbb\006" +
    "\uffbb\010\uffbb\011\uffbb\022\uffbb\001\002\000\016\002\uffbc" +
    "\003\uffbc\006\uffbc\010\uffbc\011\uffbc\022\uffbc\001\002\000" +
    "\016\002\uffba\003\uffba\006\uffba\010\uffba\011\uffba\022\uffba" +
    "\001\002\000\010\003\050\016\051\020\047\001\002\000" +
    "\014\002\uffb8\003\uffb8\006\uffb8\010\uffb8\011\uffb8\001\002" +
    "\000\004\022\075\001\002\000\014\002\uffb9\003\uffb9\006" +
    "\uffb9\010\uffb9\011\uffb9\001\002\000\004\011\053\001\002" +
    "\000\010\003\055\031\056\032\035\001\002\000\004\011" +
    "\071\001\002\000\006\011\065\021\064\001\002\000\004" +
    "\012\060\001\002\000\014\002\ufff5\003\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\001\002\000\004\021\061\001\002\000\004" +
    "\011\062\001\002\000\004\032\035\001\002\000\014\002" +
    "\ufff1\003\ufff1\006\ufff1\010\ufff1\011\ufff1\001\002\000\004" +
    "\011\067\001\002\000\004\032\035\001\002\000\014\002" +
    "\uffee\003\uffee\006\uffee\010\uffee\011\uffee\001\002\000\004" +
    "\032\035\001\002\000\014\002\uffef\003\uffef\006\uffef\010" +
    "\uffef\011\uffef\001\002\000\004\031\072\001\002\000\004" +
    "\012\073\001\002\000\004\021\074\001\002\000\014\002" +
    "\ufff0\003\ufff0\006\ufff0\010\ufff0\011\ufff0\001\002\000\014" +
    "\002\uffb7\003\uffb7\006\uffb7\010\uffb7\011\uffb7\001\002\000" +
    "\004\007\077\001\002\000\010\003\102\007\103\010\uffe5" +
    "\001\002\000\004\010\uffe6\001\002\000\004\010\333\001" +
    "\002\000\004\010\331\001\002\000\010\003\106\014\110" +
    "\024\105\001\002\000\004\010\324\001\002\000\004\012" +
    "\153\001\002\000\006\007\152\010\uffe0\001\002\000\004" +
    "\011\145\001\002\000\004\012\117\001\002\000\004\011" +
    "\112\001\002\000\006\003\113\024\105\001\002\000\004" +
    "\007\115\001\002\000\004\010\uffe1\001\002\000\004\025" +
    "\116\001\002\000\006\010\uffd8\011\uffd8\001\002\000\004" +
    "\007\120\001\002\000\010\003\123\013\124\027\121\001" +
    "\002\000\004\012\137\001\002\000\004\010\136\001\002" +
    "\000\006\010\uffbf\012\133\001\002\000\004\012\125\001" +
    "\002\000\004\021\126\001\002\000\004\011\127\001\002" +
    "\000\004\027\130\001\002\000\004\012\131\001\002\000" +
    "\004\030\132\001\002\000\004\010\uffc1\001\002\000\006" +
    "\021\135\030\134\001\002\000\004\010\uffbd\001\002\000" +
    "\004\010\uffbe\001\002\000\006\010\uffc3\011\uffc3\001\002" +
    "\000\004\030\140\001\002\000\004\011\141\001\002\000" +
    "\004\013\142\001\002\000\004\012\143\001\002\000\004" +
    "\021\144\001\002\000\004\010\uffc0\001\002\000\006\003" +
    "\146\014\110\001\002\000\004\007\150\001\002\000\004" +
    "\010\uffe2\001\002\000\004\010\151\001\002\000\006\010" +
    "\uffc2\011\uffc2\001\002\000\006\010\151\025\116\001\002" +
    "\000\004\007\154\001\002\000\012\003\156\004\161\025" +
    "\160\026\157\001\002\000\004\010\uffd5\001\002\000\016" +
    "\003\042\011\310\012\311\016\044\017\043\025\307\001" +
    "\002\000\004\012\253\001\002\000\004\012\220\001\002" +
    "\000\004\012\166\001\002\000\004\010\uffd7\001\002\000" +
    "\004\010\uffd6\001\002\000\004\010\165\001\002\000\006" +
    "\010\uffd9\011\uffd9\001\002\000\004\021\167\001\002\000" +
    "\004\011\170\001\002\000\006\025\172\026\171\001\002" +
    "\000\004\012\206\001\002\000\004\012\174\001\002\000" +
    "\004\010\uffc6\001\002\000\010\003\042\016\044\017\043" +
    "\001\002\000\004\022\176\001\002\000\010\003\050\016" +
    "\051\020\047\001\002\000\004\011\200\001\002\000\004" +
    "\026\201\001\002\000\004\012\202\001\002\000\010\003" +
    "\042\016\044\017\043\001\002\000\004\022\204\001\002" +
    "\000\010\003\050\016\051\020\047\001\002\000\004\010" +
    "\uffc5\001\002\000\010\003\042\016\044\017\043\001\002" +
    "\000\004\022\210\001\002\000\010\003\050\016\051\020" +
    "\047\001\002\000\004\011\212\001\002\000\004\025\213" +
    "\001\002\000\004\012\214\001\002\000\010\003\042\016" +
    "\044\017\043\001\002\000\004\022\216\001\002\000\010" +
    "\003\050\016\051\020\047\001\002\000\004\010\uffc4\001" +
    "\002\000\010\003\042\016\044\017\043\001\002\000\004" +
    "\022\222\001\002\000\010\003\050\016\051\020\047\001" +
    "\002\000\004\011\224\001\002\000\010\003\225\004\227" +
    "\026\226\001\002\000\004\012\251\001\002\000\004\012" +
    "\241\001\002\000\004\012\231\001\002\000\004\010\uffd3" +
    "\001\002\000\004\021\232\001\002\000\004\011\233\001" +
    "\002\000\004\026\234\001\002\000\004\012\235\001\002" +
    "\000\010\003\042\016\044\017\043\001\002\000\004\022" +
    "\237\001\002\000\010\003\050\016\051\020\047\001\002" +
    "\000\004\010\uffcf\001\002\000\010\003\042\016\044\017" +
    "\043\001\002\000\004\022\243\001\002\000\010\003\050" +
    "\016\051\020\047\001\002\000\004\011\245\001\002\000" +
    "\004\004\246\001\002\000\004\012\247\001\002\000\004" +
    "\021\250\001\002\000\004\010\uffd0\001\002\000\004\021" +
    "\252\001\002\000\004\010\uffce\001\002\000\010\003\042" +
    "\016\044\017\043\001\002\000\004\022\255\001\002\000" +
    "\010\003\050\016\051\020\047\001\002\000\004\011\257" +
    "\001\002\000\010\003\260\004\262\025\261\001\002\000" +
    "\006\010\uffc8\012\304\001\002\000\004\012\274\001\002" +
    "\000\004\012\264\001\002\000\004\010\uffcd\001\002\000" +
    "\004\021\265\001\002\000\004\011\266\001\002\000\004" +
    "\025\267\001\002\000\004\012\270\001\002\000\010\003" +
    "\042\016\044\017\043\001\002\000\004\022\272\001\002" +
    "\000\010\003\050\016\051\020\047\001\002\000\004\010" +
    "\uffc9\001\002\000\010\003\042\016\044\017\043\001\002" +
    "\000\004\022\276\001\002\000\010\003\050\016\051\020" +
    "\047\001\002\000\004\011\300\001\002\000\004\004\301" +
    "\001\002\000\004\012\302\001\002\000\004\021\303\001" +
    "\002\000\004\010\uffca\001\002\000\004\022\305\001\002" +
    "\000\004\010\uffc7\001\002\000\004\022\323\001\002\000" +
    "\004\010\uffd4\001\002\000\012\003\313\004\314\025\261" +
    "\026\226\001\002\000\010\003\042\016\044\017\043\001" +
    "\002\000\004\010\uffd2\001\002\000\006\010\uffc8\012\322" +
    "\001\002\000\004\012\317\001\002\000\004\010\uffd1\001" +
    "\002\000\004\010\uffcb\001\002\000\004\021\320\001\002" +
    "\000\004\011\321\001\002\000\006\025\267\026\234\001" +
    "\002\000\006\021\252\022\305\001\002\000\004\010\uffcc" +
    "\001\002\000\010\003\325\010\uffde\011\326\001\002\000" +
    "\004\010\uffdd\001\002\000\006\003\102\007\103\001\002" +
    "\000\004\010\uffe4\001\002\000\004\010\uffdf\001\002\000" +
    "\010\003\325\010\uffde\011\326\001\002\000\004\010\uffe3" +
    "\001\002\000\014\002\uffe7\003\uffe7\006\uffe7\010\uffe7\011" +
    "\uffe7\001\002\000\010\003\050\016\051\020\047\001\002" +
    "\000\010\003\055\031\056\032\035\001\002\000\014\002" +
    "\ufff7\003\ufff7\006\ufff7\010\ufff7\011\ufff7\001\002\000\012" +
    "\011\335\012\340\022\334\031\030\001\002\000\010\003" +
    "\042\016\044\017\043\001\002\000\014\002\ufff8\003\ufff8" +
    "\006\ufff8\010\ufff8\011\ufff8\001\002\000\014\002\ufff4\003" +
    "\ufff4\006\ufff4\010\ufff4\011\ufff4\001\002\000\014\002\ufff6" +
    "\003\ufff6\006\ufff6\010\ufff6\011\ufff6\001\002\000\014\002" +
    "\ufff2\003\ufff2\006\ufff2\010\ufff2\011\ufff2\001\002\000\014" +
    "\002\ufff3\003\ufff3\006\ufff3\010\ufff3\011\ufff3\001\002\000" +
    "\012\002\ufffd\003\ufffd\006\ufffd\011\ufffd\001\002\000\006" +
    "\015\352\031\350\001\002\000\004\012\363\001\002\000" +
    "\014\002\uffed\003\uffed\006\uffed\010\uffed\011\uffed\001\002" +
    "\000\004\012\353\001\002\000\010\003\042\016\044\017" +
    "\043\001\002\000\004\022\355\001\002\000\010\003\050" +
    "\016\051\020\047\001\002\000\004\011\357\001\002\000" +
    "\004\031\360\001\002\000\004\012\361\001\002\000\004" +
    "\021\362\001\002\000\014\002\uffeb\003\uffeb\006\uffeb\010" +
    "\uffeb\011\uffeb\001\002\000\004\021\364\001\002\000\004" +
    "\011\365\001\002\000\004\015\366\001\002\000\004\012" +
    "\367\001\002\000\010\003\042\016\044\017\043\001\002" +
    "\000\004\022\371\001\002\000\010\003\050\016\051\020" +
    "\047\001\002\000\014\002\uffec\003\uffec\006\uffec\010\uffec" +
    "\011\uffec\001\002\000\004\021\374\001\002\000\004\011" +
    "\375\001\002\000\006\015\u0100\032\035\001\002\000\004" +
    "\011\u0107\001\002\000\014\002\uffea\003\uffea\006\uffea\010" +
    "\uffea\011\uffea\001\002\000\004\012\u0101\001\002\000\010" +
    "\003\042\016\044\017\043\001\002\000\004\022\u0103\001" +
    "\002\000\010\003\050\016\051\020\047\001\002\000\004" +
    "\011\u0105\001\002\000\004\032\035\001\002\000\014\002" +
    "\uffe8\003\uffe8\006\uffe8\010\uffe8\011\uffe8\001\002\000\004" +
    "\015\u0108\001\002\000\004\012\u0109\001\002\000\010\003" +
    "\042\016\044\017\043\001\002\000\004\022\u010b\001\002" +
    "\000\010\003\050\016\051\020\047\001\002\000\014\002" +
    "\uffe9\003\uffe9\006\uffe9\010\uffe9\011\uffe9\001\002\000\012" +
    "\003\034\015\036\031\030\032\035\001\002\000\012\002" +
    "\ufffc\003\ufffc\006\ufffc\011\ufffc\001\002\000\006\003\013" +
    "\007\014\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\002\005\001\001\000\004\021\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\014\001" +
    "\001\000\002\001\001\000\014\006\031\007\036\011\026" +
    "\013\032\015\030\001\001\000\004\021\017\001\001\000" +
    "\002\001\001\000\004\005\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\023\001" +
    "\001\000\002\001\001\000\004\005\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\340" +
    "\013\335\015\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\056\015\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\065\001" +
    "\001\000\002\001\001\000\004\015\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\077\034\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\103\022\106" +
    "\032\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\163\024\161\026\162\030\154\001\001" +
    "\000\002\001\001\000\004\003\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\174\001\001\000\002\001\001\000\004\004\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\202\001\001\000\002\001\001\000\004" +
    "\004\204\001\001\000\002\001\001\000\004\003\206\001" +
    "\001\000\002\001\001\000\004\004\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\214\001\001\000\002\001\001\000\004\004\216\001\001" +
    "\000\002\001\001\000\004\003\220\001\001\000\002\001" +
    "\001\000\004\004\222\001\001\000\002\001\001\000\004" +
    "\025\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\235\001\001\000\002\001\001\000\004\004\237\001\001" +
    "\000\002\001\001\000\004\003\241\001\001\000\002\001" +
    "\001\000\004\004\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\253" +
    "\001\001\000\002\001\001\000\004\004\255\001\001\000" +
    "\002\001\001\000\004\027\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\270\001\001\000\002\001\001\000" +
    "\004\004\272\001\001\000\002\001\001\000\004\003\274" +
    "\001\001\000\002\001\001\000\004\004\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\314" +
    "\027\315\001\001\000\004\003\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\326\001\001\000\002\001\001\000\004\016\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\344\001\001\000\006\010\343\015\053\001\001\000\002" +
    "\001\001\000\004\011\342\001\001\000\004\003\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\353\001\001\000\002\001" +
    "\001\000\004\004\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\367\001\001\000\002\001" +
    "\001\000\004\004\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\376\015\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0101\001\001\000\002\001\001\000\004\004" +
    "\u0103\001\001\000\002\001\001\000\004\015\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0109\001\001\000\002\001\001\000\004\004\u010b" +
    "\001\001\000\002\001\001\000\014\006\u010d\007\036\011" +
    "\026\013\032\015\030\001\001\000\002\001\001\000\004" +
    "\005\u0110\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_replay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_replay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_replay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*
import classes.Ataque;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.naves_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
*/
    public static ArrayList<Turno> turnos_;
    public static ArrayList<Ataque> ataques;
    public static String jugador_,origen_,destino_;
    public static int turno_,naves_,numeroTurno;
    public static boolean complete_;
   public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser_replay$actions {
  private final parser_replay parser;

  /** Constructor */
  CUP$parser_replay$actions(parser_replay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser_replay$do_action(
    int                        CUP$parser_replay$act_num,
    java_cup.runtime.lr_parser CUP$parser_replay$parser,
    java.util.Stack            CUP$parser_replay$stack,
    int                        CUP$parser_replay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_replay$result;

      /* select the action based on the action number */
      switch (CUP$parser_replay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COMILLAS2 ::= error id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("entra"+e); jugador_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COMILLAS2 ::= cierraComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COMILLAS2 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COMILLAS1 ::= error id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("entra"+e); jugador_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COMILLAS1 ::= abreComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMILLAS1 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DATA ::= error dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		 complete_= Boolean.parseBoolean((String)e); System.out.println("f jesje"+e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DATA ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		 naves_=Integer.parseInt((String)e); System.out.println("f jeje"+e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DATA ::= error 
            {
              Object RESULT =null;
		System.out.println("entre");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DATA ::= complete dosPuntos bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DATA ::= naves dosPuntos num coma complete dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DATOS ::= error abreLlaves cierraLlaves 
            {
              Object RESULT =null;
		System.out.println("lst");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DATOS ::= datos dosPuntos abreLlaves DATA cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T1 ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma origen dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
origen_=(String)e;
destino_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-10)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T1 ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma destino dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
origen_=(String)e;
destino_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-10)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // T ::= turno dosPuntos num coma T1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		turno_=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // D1 ::= error dosPuntos id 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("<----------->"+d);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // D1 ::= error 
            {
              Object RESULT =null;
		System.out.println("doble f");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // D1 ::= turno dosPuntos num coma origen dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		origen_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // D1 ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma turno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		origen_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // D ::= error coma D1 
            {
              Object RESULT =null;
		System.out.println("Destino2");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // D ::= error COMILLAS1 id 
            {
              Object RESULT =null;
		System.out.println("Destino");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // D ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma D1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		destino_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // O1 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		System.out.println("f en el CHAAT"+e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // O1 ::= turno dosPuntos num coma destino dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		destino_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // O1 ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma turno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		destino_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // O ::= error coma O1 
            {
              Object RESULT =null;
		System.out.println("-DDFF");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // O ::= error dosPuntos COMILLAS1 
            {
              Object RESULT =null;
		System.out.println("por aca------XD>");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // O ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma O1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		origen_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // GALAXY1 ::= error origen 
            {
              Object RESULT =null;
		System.out.println("por aca------->");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GALAXY1 ::= T 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // GALAXY1 ::= D 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GALAXY1 ::= O 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GALAXY ::= error abreLlaves origen 
            {
              Object RESULT =null;
		System.out.println("entro aca en galaxia");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GALAXY ::= espacio dosPuntos abreLlaves GALAXY1 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATAQ4 ::= error coma TURNOS 
            {
              Object RESULT =null;
		System.out.println("errores...>");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATAQ4 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATAQ4 ::= coma TURNOS ATAQ4 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATAQ3 ::= error 
            {
              Object RESULT =null;
		System.out.println("aun sigue");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATAQ3 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATAQ3 ::= coma ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATAQ2 ::= error 
            {
              Object RESULT =null;
		System.out.println("hola aca me recupero");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATAQ2 ::= DATOS coma GALAXY 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATAQ2 ::= GALAXY coma DATOS 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATAQ1 ::= error cierraLlaves ATAQ3 
            {
              Object RESULT =null;
		System.out.println("hola me recupero aca");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATAQ1 ::= abreLlaves ATAQ2 cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATAQ22 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATAQ22 ::= ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATAQ ::= ataque dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NUM1 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma ATAQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
jugador_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUM1 ::= ATAQ coma nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
jugador_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NUM ::= numeroTurno dosPuntos num coma NUM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM",7, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATAQUE1 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		numeroTurno=Integer.parseInt((String)e);
jugador_=(String)e1;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATAQUE1 ::= numeroTurno dosPuntos num coma nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		numeroTurno=Integer.parseInt((String)e);
jugador_=(String)e1;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATAQUE ::= ATAQ coma ATAQUE1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE",9, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NAME1 ::= error coma ATAQ 
            {
              Object RESULT =null;
		System.out.println("triple f");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NAME1 ::= error num coma ATAQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		System.out.println("se recupero numero de turno"+e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NAME1 ::= ATAQ coma numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NAME1 ::= numeroTurno dosPuntos num coma ATAQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NAME ::= error coma NAME1 
            {
              Object RESULT =null;
		System.out.println("se recupera en name1");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NAME ::= error id COMILLAS2 
            {
              Object RESULT =null;
		System.out.println("se recupera en comillas");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NAME ::= error dosPuntos COMILLAS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		System.out.println("se recupera en id"+e);
 jugador_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NAME ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TURNO1 ::= error error NUM 
            {
              Object RESULT =null;
		System.out.println("se recupera en name3");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TURNO1 ::= error ATAQUE 
            {
              Object RESULT =null;
		System.out.println("se recupera en name2");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TURNO1 ::= error NAME 
            {
              Object RESULT =null;
		System.out.println("se recupera en name1");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TURNO1 ::= NUM 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TURNO1 ::= ATAQUE 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TURNO1 ::= NAME 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TURNOS ::= error abreLlaves TURNO1 
            {
              Object RESULT =null;
		System.out.println("-DFF");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TURNOS ::= abreLlaves TURNO1 cierraLlaves 
            {
              Object RESULT =null;
		
turnos_.add(new Turno(ataques,jugador_,numeroTurno));

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TURNO ::= error ATAQ4 
            {
              Object RESULT =null;
		System.out.println("-FF");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TURNO ::= error abreCor TURNOS 
            {
              Object RESULT =null;
		System.out.println("-F");
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TURNO ::= abreLlaves turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TURNO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		RESULT = start_val;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_replay$parser.done_parsing();
          return CUP$parser_replay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

