
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 21 16:09:37 CST 2020
//----------------------------------------------------

package gramaticaReplay;
   import classes.Ataque;
import classes.Turno;
import static gramaticaReplay.parser_replay.ataques;
import static gramaticaReplay.parser_replay.complete_;
import static gramaticaReplay.parser_replay.destino_;
import static gramaticaReplay.parser_replay.jugador_;
import static gramaticaReplay.parser_replay.numeroTurno;
import static gramaticaReplay.parser_replay.origen_;
import static gramaticaReplay.parser_replay.turno_;
import static gramaticaReplay.parser_replay.turnos_;
import static gramatica_guardar.parser_save.naves_;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 21 16:09:37 CST 2020
  */
public class parser_replay extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser_replay() {super();}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_replay(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\012\000\002\005" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\011\000\002\010\007\000\002\010\007\000" +
    "\002\013\005\000\002\014\013\000\002\014\013\000\002" +
    "\011\007\000\002\012\011\000\002\012\011\000\002\015" +
    "\007\000\002\034\003\000\002\034\002\000\002\016\006" +
    "\000\002\017\005\000\002\017\005\000\002\020\004\000" +
    "\002\020\002\000\002\021\005\000\002\021\002\000\002" +
    "\022\007\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\011\000\002\025\013\000\002\025\013" +
    "\000\002\026\011\000\002\027\013\000\002\027\013\000" +
    "\002\030\007\000\002\031\015\000\002\031\015\000\002" +
    "\032\007\000\002\033\011\000\002\033\011\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\007\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\012\010\001\002\000\004\005\011\001\002\000" +
    "\004\007\012\001\002\000\010\015\030\031\026\032\025" +
    "\001\002\000\006\006\uffe9\011\014\001\002\000\004\007" +
    "\012\001\002\000\004\006\016\001\002\000\004\010\017" +
    "\001\002\000\004\002\000\001\002\000\006\006\uffe9\011" +
    "\014\001\002\000\004\006\uffea\001\002\000\004\010\315" +
    "\001\002\000\004\010\ufffc\001\002\000\004\011\271\001" +
    "\002\000\004\012\100\001\002\000\004\012\056\001\002" +
    "\000\004\010\ufffe\001\002\000\004\012\032\001\002\000" +
    "\004\010\ufffd\001\002\000\006\016\035\017\034\001\002" +
    "\000\004\022\036\001\002\000\004\022\uffd7\001\002\000" +
    "\004\022\uffd8\001\002\000\006\016\040\020\037\001\002" +
    "\000\006\010\uffd5\011\uffd5\001\002\000\006\010\uffd6\011" +
    "\uffd6\001\002\000\004\011\042\001\002\000\006\031\044" +
    "\032\025\001\002\000\004\011\052\001\002\000\004\012" +
    "\046\001\002\000\004\010\ufffb\001\002\000\004\021\047" +
    "\001\002\000\004\011\050\001\002\000\004\032\025\001" +
    "\002\000\004\010\ufffa\001\002\000\004\031\053\001\002" +
    "\000\004\012\054\001\002\000\004\021\055\001\002\000" +
    "\004\010\ufff9\001\002\000\004\021\057\001\002\000\004" +
    "\011\060\001\002\000\006\015\063\032\025\001\002\000" +
    "\004\011\072\001\002\000\004\010\ufff5\001\002\000\004" +
    "\012\064\001\002\000\006\016\035\017\034\001\002\000" +
    "\004\022\066\001\002\000\006\016\040\020\037\001\002" +
    "\000\004\011\070\001\002\000\004\032\025\001\002\000" +
    "\004\010\ufff3\001\002\000\004\015\073\001\002\000\004" +
    "\012\074\001\002\000\006\016\035\017\034\001\002\000" +
    "\004\022\076\001\002\000\006\016\040\020\037\001\002" +
    "\000\004\010\ufff4\001\002\000\004\007\101\001\002\000" +
    "\006\007\104\010\ufff0\001\002\000\004\010\ufff1\001\002" +
    "\000\004\010\270\001\002\000\006\014\111\024\106\001" +
    "\002\000\004\010\264\001\002\000\004\012\140\001\002" +
    "\000\004\011\136\001\002\000\004\011\134\001\002\000" +
    "\004\012\112\001\002\000\004\007\113\001\002\000\006" +
    "\013\116\027\115\001\002\000\004\010\133\001\002\000" +
    "\004\012\125\001\002\000\004\012\117\001\002\000\004" +
    "\021\120\001\002\000\004\011\121\001\002\000\004\027" +
    "\122\001\002\000\004\012\123\001\002\000\004\030\124" +
    "\001\002\000\004\010\uffda\001\002\000\004\030\126\001" +
    "\002\000\004\011\127\001\002\000\004\013\130\001\002" +
    "\000\004\012\131\001\002\000\004\021\132\001\002\000" +
    "\004\010\uffd9\001\002\000\006\010\uffdb\011\uffdb\001\002" +
    "\000\004\024\106\001\002\000\004\010\uffed\001\002\000" +
    "\004\014\111\001\002\000\004\010\uffee\001\002\000\004" +
    "\007\141\001\002\000\010\004\146\025\144\026\143\001" +
    "\002\000\004\010\uffe5\001\002\000\004\012\234\001\002" +
    "\000\004\012\204\001\002\000\004\010\uffe7\001\002\000" +
    "\004\012\152\001\002\000\004\010\uffe6\001\002\000\004" +
    "\010\151\001\002\000\006\010\uffe8\011\uffe8\001\002\000" +
    "\004\021\153\001\002\000\004\011\154\001\002\000\006" +
    "\025\156\026\155\001\002\000\004\012\172\001\002\000" +
    "\004\012\160\001\002\000\004\010\uffde\001\002\000\006" +
    "\016\035\017\034\001\002\000\004\022\162\001\002\000" +
    "\006\016\040\020\037\001\002\000\004\011\164\001\002" +
    "\000\004\026\165\001\002\000\004\012\166\001\002\000" +
    "\006\016\035\017\034\001\002\000\004\022\170\001\002" +
    "\000\006\016\040\020\037\001\002\000\004\010\uffdd\001" +
    "\002\000\006\016\035\017\034\001\002\000\004\022\174" +
    "\001\002\000\006\016\040\020\037\001\002\000\004\011" +
    "\176\001\002\000\004\025\177\001\002\000\004\012\200" +
    "\001\002\000\006\016\035\017\034\001\002\000\004\022" +
    "\202\001\002\000\006\016\040\020\037\001\002\000\004" +
    "\010\uffdc\001\002\000\006\016\035\017\034\001\002\000" +
    "\004\022\206\001\002\000\006\016\040\020\037\001\002" +
    "\000\004\011\210\001\002\000\006\004\212\026\211\001" +
    "\002\000\004\012\224\001\002\000\004\012\214\001\002" +
    "\000\004\010\uffe4\001\002\000\004\021\215\001\002\000" +
    "\004\011\216\001\002\000\004\026\217\001\002\000\004" +
    "\012\220\001\002\000\006\016\035\017\034\001\002\000" +
    "\004\022\222\001\002\000\006\016\040\020\037\001\002" +
    "\000\004\010\uffe2\001\002\000\006\016\035\017\034\001" +
    "\002\000\004\022\226\001\002\000\006\016\040\020\037" +
    "\001\002\000\004\011\230\001\002\000\004\004\231\001" +
    "\002\000\004\012\232\001\002\000\004\021\233\001\002" +
    "\000\004\010\uffe3\001\002\000\006\016\035\017\034\001" +
    "\002\000\004\022\236\001\002\000\006\016\040\020\037" +
    "\001\002\000\004\011\240\001\002\000\006\004\242\025" +
    "\241\001\002\000\004\012\254\001\002\000\004\012\244" +
    "\001\002\000\004\010\uffe1\001\002\000\004\021\245\001" +
    "\002\000\004\011\246\001\002\000\004\025\247\001\002" +
    "\000\004\012\250\001\002\000\006\016\035\017\034\001" +
    "\002\000\004\022\252\001\002\000\006\016\040\020\037" +
    "\001\002\000\004\010\uffdf\001\002\000\006\016\035\017" +
    "\034\001\002\000\004\022\256\001\002\000\006\016\040" +
    "\020\037\001\002\000\004\011\260\001\002\000\004\004" +
    "\261\001\002\000\004\012\262\001\002\000\004\021\263" +
    "\001\002\000\004\010\uffe0\001\002\000\006\010\uffeb\011" +
    "\265\001\002\000\004\007\104\001\002\000\004\010\uffef" +
    "\001\002\000\004\010\uffec\001\002\000\006\010\ufff2\011" +
    "\ufff2\001\002\000\006\015\274\031\272\001\002\000\004" +
    "\012\305\001\002\000\004\010\ufff8\001\002\000\004\012" +
    "\275\001\002\000\006\016\035\017\034\001\002\000\004" +
    "\022\277\001\002\000\006\016\040\020\037\001\002\000" +
    "\004\011\301\001\002\000\004\031\302\001\002\000\004" +
    "\012\303\001\002\000\004\021\304\001\002\000\004\010" +
    "\ufff6\001\002\000\004\021\306\001\002\000\004\011\307" +
    "\001\002\000\004\015\310\001\002\000\004\012\311\001" +
    "\002\000\006\016\035\017\034\001\002\000\004\022\313" +
    "\001\002\000\006\016\040\020\037\001\002\000\004\010" +
    "\ufff7\001\002\000\006\006\uffff\011\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\012\001\001\000\014\006\021\007" +
    "\026\011\022\013\030\015\023\001\001\000\004\021\014" +
    "\001\001\000\004\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\044\015\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\061\015\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\064\001\001\000\002\001\001\000\004\004\066\001" +
    "\001\000\002\001\001\000\004\015\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\074\001\001\000\002\001\001\000\004\004\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\101\034" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\104\022\106\032\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\134\001\001\000\002\001\001\000\004\032\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\147" +
    "\024\144\026\146\030\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\160\001\001\000\002\001\001\000\004" +
    "\004\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\166\001\001\000\002\001\001" +
    "\000\004\004\170\001\001\000\002\001\001\000\004\003" +
    "\172\001\001\000\002\001\001\000\004\004\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\200\001\001\000\002\001\001\000\004\004\202" +
    "\001\001\000\002\001\001\000\004\003\204\001\001\000" +
    "\002\001\001\000\004\004\206\001\001\000\002\001\001" +
    "\000\004\025\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\220\001" +
    "\001\000\002\001\001\000\004\004\222\001\001\000\002" +
    "\001\001\000\004\003\224\001\001\000\002\001\001\000" +
    "\004\004\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\234\001\001\000\002\001\001\000\004\004\236" +
    "\001\001\000\002\001\001\000\004\027\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\250\001\001\000\002\001\001\000\004" +
    "\004\252\001\001\000\002\001\001\000\004\003\254\001" +
    "\001\000\002\001\001\000\004\004\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\265\001\001\000\004" +
    "\016\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\275\001" +
    "\001\000\002\001\001\000\004\004\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\311\001" +
    "\001\000\002\001\001\000\004\004\313\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_replay$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_replay$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_replay$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Turno> turnos_;
    public static ArrayList<Ataque> ataques;
    public static String jugador_,origen_,destino_;
    public static int turno_,naves_,numeroTurno;
    public static boolean complete_;
   public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser_replay$actions {
  private final parser_replay parser;

  /** Constructor */
  CUP$parser_replay$actions(parser_replay parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser_replay$do_action(
    int                        CUP$parser_replay$act_num,
    java_cup.runtime.lr_parser CUP$parser_replay$parser,
    java.util.Stack            CUP$parser_replay$stack,
    int                        CUP$parser_replay$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_replay$result;

      /* select the action based on the action number */
      switch (CUP$parser_replay$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMILLAS2 ::= cierraComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMILLAS2 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS2",2, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMILLAS1 ::= abreComilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMILLAS1 ::= comilla 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("COMILLAS1",1, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DATA ::= complete dosPuntos bool coma naves dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DATA ::= naves dosPuntos num coma complete dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		
naves_=Integer.parseInt((String)e);
complete_= Boolean.parseBoolean((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATA",25, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATOS ::= datos dosPuntos abreLlaves DATA cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("DATOS",24, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T1 ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma origen dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
origen_=(String)e;
destino_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-10)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // T1 ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma destino dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
origen_=(String)e;
destino_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T1",23, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-10)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T ::= turno dosPuntos num coma T1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		turno_=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D1 ::= turno dosPuntos num coma origen dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		origen_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // D1 ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma turno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		origen_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D1",21, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // D ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma D1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		destino_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("D",20, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // O1 ::= turno dosPuntos num coma destino dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		destino_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // O1 ::= destino dosPuntos COMILLAS1 id COMILLAS2 coma turno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		destino_=(String)e;
turno_=Integer.parseInt((String)e1);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O1",19, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // O ::= origen dosPuntos COMILLAS1 id COMILLAS2 coma O1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		origen_=(String)e;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("O",18, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GALAXY1 ::= T 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GALAXY1 ::= D 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GALAXY1 ::= O 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY1",17, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GALAXY ::= espacio dosPuntos abreLlaves GALAXY1 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("GALAXY",16, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATAQ4 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATAQ4 ::= coma TURNOS ATAQ4 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ4",15, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATAQ3 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATAQ3 ::= coma ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ3",14, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATAQ2 ::= DATOS coma GALAXY 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATAQ2 ::= GALAXY coma DATOS 
            {
              Object RESULT =null;
		 
Ataque ataque=new Ataque(origen_,destino_,turno_,naves_,complete_);

ataques.add(ataque);

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ2",13, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATAQ1 ::= abreLlaves ATAQ2 cierraLlaves ATAQ3 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ1",12, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATAQ22 ::= 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATAQ22 ::= ATAQ1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ22",26, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATAQ ::= ataque dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQ",11, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NUM1 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma ATAQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		
jugador_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NUM1 ::= ATAQ coma nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		
jugador_=(String)e;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM1",8, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NUM ::= numeroTurno dosPuntos num coma NUM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NUM",7, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATAQUE1 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		numeroTurno=Integer.parseInt((String)e);
jugador_=(String)e1;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ATAQUE1 ::= numeroTurno dosPuntos num coma nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		numeroTurno=Integer.parseInt((String)e);
jugador_=(String)e1;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE1",10, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-8)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATAQUE ::= ATAQ coma ATAQUE1 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("ATAQUE",9, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NAME1 ::= ATAQ coma numeroTurno dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.peek()).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NAME1 ::= numeroTurno dosPuntos num coma ATAQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)).value;
		numeroTurno=Integer.parseInt((String)e);
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME1",6, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-4)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NAME ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-3)).value;
		jugador_=(String)e1;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("NAME",5, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-6)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TURNO1 ::= NUM 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TURNO1 ::= ATAQUE 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TURNO1 ::= NAME 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO1",4, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TURNOS ::= abreLlaves TURNO1 cierraLlaves 
            {
              Object RESULT =null;
		
turnos_.add(new Turno(ataques,jugador_,numeroTurno));
ataques=new ArrayList();
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNOS",3, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-2)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TURNO ::= abreLlaves turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
              Object RESULT =null;

              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("TURNO",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-7)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          return CUP$parser_replay$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TURNO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)).value;
		RESULT = start_val;
              CUP$parser_replay$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_replay$stack.elementAt(CUP$parser_replay$top-1)), ((java_cup.runtime.Symbol)CUP$parser_replay$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_replay$parser.done_parsing();
          return CUP$parser_replay$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

