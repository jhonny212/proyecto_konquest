//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 24 07:52:51 CST 2020
//----------------------------------------------------
package gramaticaTurnosCliente_Servidor;

import classes.Ataque;
import classes.Turno;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.ataques;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.complete_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.naves_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.turno_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.jugador_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.origen_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.destino_;

import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.turnos_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.x_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.y_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.x2_;
import static gramaticaTurnosCliente_Servidor.parser_cliente_servidor.y2_;

import interfaz.inicio_partida;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import planetas.galaxia;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Mar 24 07:52:51 CST 2020
 */
public class parser_cliente_servidor extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser_cliente_servidor() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser_cliente_servidor(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser_cliente_servidor(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\061\000\002\002\004\000\002\002\012\000\002\005"
        + "\005\000\002\006\003\000\002\006\003\000\002\007\011"
        + "\000\002\010\003\000\002\037\007\000\002\040\007\000"
        + "\002\035\011\000\002\035\011\000\002\036\011\000\002"
        + "\036\011\000\002\013\005\000\002\014\007\000\002\015"
        + "\007\000\002\034\003\000\002\034\002\000\002\016\006"
        + "\000\002\017\005\000\002\017\005\000\002\020\004\000"
        + "\002\020\002\000\002\021\005\000\002\021\002\000\002"
        + "\041\007\000\002\041\007\000\002\042\007\000\002\042"
        + "\006\000\002\022\007\000\002\023\003\000\002\023\003"
        + "\000\002\023\003\000\002\024\011\000\002\025\013\000"
        + "\002\025\013\000\002\026\011\000\002\027\013\000\002"
        + "\027\013\000\002\030\007\000\002\031\015\000\002\031"
        + "\015\000\002\032\007\000\002\033\011\000\002\033\011"
        + "\000\002\003\003\000\002\003\003\000\002\004\003\000"
        + "\002\004\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\332\000\004\007\004\001\002\000\004\004\007\001"
        + "\002\000\004\002\006\001\002\000\004\002\001\001\002"
        + "\000\004\012\010\001\002\000\004\005\011\001\002\000"
        + "\004\007\012\001\002\000\006\015\027\032\023\001\002"
        + "\000\006\006\uffe9\011\014\001\002\000\004\007\012\001"
        + "\002\000\004\006\016\001\002\000\004\010\017\001\002"
        + "\000\004\002\000\001\002\000\006\006\uffe9\011\014\001"
        + "\002\000\004\006\uffea\001\002\000\004\010\334\001\002"
        + "\000\004\012\052\001\002\000\004\011\043\001\002\000"
        + "\004\010\ufffe\001\002\000\004\010\ufffd\001\002\000\004"
        + "\012\030\001\002\000\006\016\033\017\032\001\002\000"
        + "\004\022\034\001\002\000\004\022\uffd3\001\002\000\004"
        + "\022\uffd4\001\002\000\006\016\036\020\035\001\002\000"
        + "\010\006\uffd1\010\uffd1\011\uffd1\001\002\000\010\006\uffd2"
        + "\010\uffd2\011\uffd2\001\002\000\004\011\040\001\002\000"
        + "\004\032\023\001\002\000\004\010\ufffb\001\002\000\004"
        + "\010\ufffc\001\002\000\004\015\045\001\002\000\004\010"
        + "\ufff4\001\002\000\004\012\046\001\002\000\006\016\033"
        + "\017\032\001\002\000\004\022\050\001\002\000\006\016"
        + "\036\020\035\001\002\000\004\010\ufff3\001\002\000\004"
        + "\007\053\001\002\000\006\007\056\010\ufff0\001\002\000"
        + "\004\010\ufff1\001\002\000\004\010\333\001\002\000\006"
        + "\014\063\024\060\001\002\000\004\010\327\001\002\000"
        + "\004\012\112\001\002\000\004\011\110\001\002\000\004"
        + "\011\106\001\002\000\004\012\064\001\002\000\004\007"
        + "\065\001\002\000\006\013\070\027\066\001\002\000\004"
        + "\012\100\001\002\000\004\010\077\001\002\000\004\012"
        + "\071\001\002\000\004\021\072\001\002\000\004\011\073"
        + "\001\002\000\004\027\074\001\002\000\004\012\075\001"
        + "\002\000\004\030\076\001\002\000\004\010\uffd6\001\002"
        + "\000\006\010\uffd7\011\uffd7\001\002\000\004\030\101\001"
        + "\002\000\004\011\102\001\002\000\004\013\103\001\002"
        + "\000\004\012\104\001\002\000\004\021\105\001\002\000"
        + "\004\010\uffd5\001\002\000\004\024\060\001\002\000\004"
        + "\010\uffed\001\002\000\004\014\063\001\002\000\004\010"
        + "\uffee\001\002\000\004\007\113\001\002\000\010\004\117"
        + "\025\116\026\115\001\002\000\004\010\uffe1\001\002\000"
        + "\004\012\277\001\002\000\004\012\247\001\002\000\004"
        + "\012\124\001\002\000\004\010\uffe2\001\002\000\004\010"
        + "\uffe3\001\002\000\004\010\123\001\002\000\006\010\uffe4"
        + "\011\uffe4\001\002\000\004\021\125\001\002\000\004\011"
        + "\126\001\002\000\006\025\130\026\127\001\002\000\004"
        + "\012\235\001\002\000\004\012\132\001\002\000\004\010"
        + "\uffda\001\002\000\004\005\133\001\002\000\010\016\033"
        + "\017\032\031\136\001\002\000\004\022\231\001\002\000"
        + "\004\006\166\001\002\000\004\012\144\001\002\000\004"
        + "\011\140\001\002\000\006\016\033\017\032\001\002\000"
        + "\004\022\142\001\002\000\006\016\036\020\035\001\002"
        + "\000\004\006\uffe7\001\002\000\004\005\145\001\002\000"
        + "\006\033\147\034\146\001\002\000\004\012\160\001\002"
        + "\000\004\012\152\001\002\000\004\006\151\001\002\000"
        + "\006\006\ufffa\011\ufffa\001\002\000\004\021\153\001\002"
        + "\000\004\011\154\001\002\000\004\034\155\001\002\000"
        + "\004\012\156\001\002\000\004\021\157\001\002\000\004"
        + "\006\ufff8\001\002\000\004\021\161\001\002\000\004\011"
        + "\162\001\002\000\004\033\163\001\002\000\004\012\164"
        + "\001\002\000\004\021\165\001\002\000\004\006\ufff7\001"
        + "\002\000\004\011\167\001\002\000\004\026\170\001\002"
        + "\000\004\012\171\001\002\000\004\005\172\001\002\000"
        + "\010\016\033\017\032\031\176\001\002\000\004\022\225"
        + "\001\002\000\004\006\224\001\002\000\006\016\033\017"
        + "\032\001\002\000\004\012\177\001\002\000\004\005\200"
        + "\001\002\000\006\033\202\034\201\001\002\000\004\012"
        + "\213\001\002\000\004\012\205\001\002\000\004\006\204"
        + "\001\002\000\010\006\ufff9\016\ufff9\017\ufff9\001\002\000"
        + "\004\021\206\001\002\000\004\011\207\001\002\000\004"
        + "\034\210\001\002\000\004\012\211\001\002\000\004\021"
        + "\212\001\002\000\004\006\ufff6\001\002\000\004\021\214"
        + "\001\002\000\004\011\215\001\002\000\004\033\216\001"
        + "\002\000\004\012\217\001\002\000\004\021\220\001\002"
        + "\000\004\006\ufff5\001\002\000\004\022\222\001\002\000"
        + "\006\016\036\020\035\001\002\000\004\006\uffe5\001\002"
        + "\000\004\010\uffd9\001\002\000\006\016\036\020\035\001"
        + "\002\000\004\011\227\001\002\000\004\031\176\001\002"
        + "\000\004\006\uffe6\001\002\000\006\016\036\020\035\001"
        + "\002\000\004\011\233\001\002\000\004\031\136\001\002"
        + "\000\004\006\uffe8\001\002\000\004\005\236\001\002\000"
        + "\010\016\033\017\032\031\176\001\002\000\004\006\240"
        + "\001\002\000\004\011\241\001\002\000\004\025\242\001"
        + "\002\000\004\012\243\001\002\000\004\005\244\001\002"
        + "\000\010\016\033\017\032\031\136\001\002\000\004\006"
        + "\246\001\002\000\004\010\uffd8\001\002\000\004\005\250"
        + "\001\002\000\010\016\033\017\032\031\136\001\002\000"
        + "\004\006\252\001\002\000\004\011\253\001\002\000\006"
        + "\004\255\026\254\001\002\000\004\012\267\001\002\000"
        + "\004\012\257\001\002\000\004\010\uffe0\001\002\000\004"
        + "\021\260\001\002\000\004\011\261\001\002\000\004\026"
        + "\262\001\002\000\004\012\263\001\002\000\004\005\264"
        + "\001\002\000\010\016\033\017\032\031\176\001\002\000"
        + "\004\006\266\001\002\000\004\010\uffde\001\002\000\004"
        + "\005\270\001\002\000\010\016\033\017\032\031\176\001"
        + "\002\000\004\006\272\001\002\000\004\011\273\001\002"
        + "\000\004\004\274\001\002\000\004\012\275\001\002\000"
        + "\004\021\276\001\002\000\004\010\uffdf\001\002\000\004"
        + "\005\300\001\002\000\010\016\033\017\032\031\176\001"
        + "\002\000\004\006\302\001\002\000\004\011\303\001\002"
        + "\000\006\004\305\025\304\001\002\000\004\012\317\001"
        + "\002\000\004\012\307\001\002\000\004\010\uffdd\001\002"
        + "\000\004\021\310\001\002\000\004\011\311\001\002\000"
        + "\004\025\312\001\002\000\004\012\313\001\002\000\004"
        + "\005\314\001\002\000\010\016\033\017\032\031\136\001"
        + "\002\000\004\006\316\001\002\000\004\010\uffdb\001\002"
        + "\000\004\005\320\001\002\000\010\016\033\017\032\031"
        + "\136\001\002\000\004\006\322\001\002\000\004\011\323"
        + "\001\002\000\004\004\324\001\002\000\004\012\325\001"
        + "\002\000\004\021\326\001\002\000\004\010\uffdc\001\002"
        + "\000\006\010\uffeb\011\330\001\002\000\004\007\056\001"
        + "\002\000\004\010\uffef\001\002\000\004\010\uffec\001\002"
        + "\000\006\010\ufff2\011\ufff2\001\002\000\006\006\uffff\011"
        + "\uffff\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\332\000\004\002\004\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\005\012\001\001\000\012\006\021\007"
        + "\024\013\025\015\023\001\001\000\004\021\014\001\001"
        + "\000\004\005\017\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\021\020\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\003\030\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\004\036\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\006\010"
        + "\041\015\040\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\014\043\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\003\046\001\001\000\002\001\001\000\004"
        + "\004\050\001\001\000\002\001\001\000\002\001\001\000"
        + "\006\016\053\034\054\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\017\056\022\060\032\061\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\033"
        + "\066\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\022\106\001\001\000\002\001\001\000"
        + "\004\032\110\001\001\000\002\001\001\000\002\001\001"
        + "\000\012\023\121\024\120\026\117\030\113\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\031\130\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\003\133"
        + "\037\136\041\134\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\003\140"
        + "\001\001\000\002\001\001\000\004\004\142\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\035\147\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\003\172\040\174\042\173\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\003\220\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\036\202\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\004\222\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\004\225\001\001\000\002"
        + "\001\001\000\004\040\227\001\001\000\002\001\001\000"
        + "\004\004\231\001\001\000\002\001\001\000\004\037\233"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\003"
        + "\172\040\174\042\236\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\003\133\037\136\041\244\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\003"
        + "\133\037\136\041\250\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\025\255\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\003\172\040\174\042\264\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\003"
        + "\172\040\174\042\270\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\003\172"
        + "\040\174\042\300\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\027\305\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\003\133\037\136\041\314\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\003\133"
        + "\037\136\041\320\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\020\330\001\001\000\004\016"
        + "\331\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser_cliente_servidor$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser_cliente_servidor$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser_cliente_servidor$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public static ArrayList<Turno> turnos_;
    public static ArrayList<Ataque> ataques;
    public static String jugador_, origen_, destino_;
    public static int turno_, naves_, x_, y_, x2_, y2_;
    public static boolean complete_;

    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " + s.value + " Linea " + (s.left + 1) + " columna " + (s.right + 1));
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("La Cadena:" + s.value + " en la Linea:" + (s.right + 1) + " ,Columna: " + s.left + "esta fuera de contexto.");
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser_cliente_servidor$actions {

    private final parser_cliente_servidor parser;

    /**
     * Constructor
     */
    CUP$parser_cliente_servidor$actions(parser_cliente_servidor parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser_cliente_servidor$do_action(
            int CUP$parser_cliente_servidor$act_num,
            java_cup.runtime.lr_parser CUP$parser_cliente_servidor$parser,
            java.util.Stack CUP$parser_cliente_servidor$stack,
            int CUP$parser_cliente_servidor$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser_cliente_servidor$result;

        /* select the action based on the action number */
        switch (CUP$parser_cliente_servidor$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // COMILLAS2 ::= cierraComilla 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COMILLAS2", 2, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // COMILLAS2 ::= comilla 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COMILLAS2", 2, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // COMILLAS1 ::= abreComilla 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COMILLAS1", 1, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // COMILLAS1 ::= comilla 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COMILLAS1", 1, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // DATA ::= complete dosPuntos bool coma naves dosPuntos num 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                naves_ = Integer.parseInt((String) e);
                complete_ = Boolean.parseBoolean((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("DATA", 25, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // DATA ::= naves dosPuntos num coma complete dosPuntos bool 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                naves_ = Integer.parseInt((String) e);
                complete_ = Boolean.parseBoolean((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("DATA", 25, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // DATOS ::= datos dosPuntos abreLlaves DATA cierraLlaves 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("DATOS", 24, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // T1 ::= destino dosPuntos abreCor DESTINO cierraCor coma origen dosPuntos abreCor ORIGEN cierraCor 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("T1", 23, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 10)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // T1 ::= origen dosPuntos abreCor ORIGEN cierraCor coma destino dosPuntos abreCor DESTINO cierraCor 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("T1", 23, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 10)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // T ::= turno dosPuntos num coma T1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)).value;
                turno_ = Integer.parseInt((String) e);
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("T", 22, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // D1 ::= turno dosPuntos num coma origen dosPuntos abreCor ORIGEN cierraCor 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).value;

                turno_ = Integer.parseInt((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("D1", 21, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 8)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // D1 ::= origen dosPuntos abreCor ORIGEN cierraCor coma turno dosPuntos num 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                turno_ = Integer.parseInt((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("D1", 21, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 8)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // D ::= destino dosPuntos abreCor DESTINO cierraCor coma D1 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("D", 20, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // O1 ::= turno dosPuntos num coma destino dosPuntos abreCor DESTINO cierraCor 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)).value;

                turno_ = Integer.parseInt((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("O1", 19, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 8)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // O1 ::= destino dosPuntos abreCor DESTINO cierraCor coma turno dosPuntos num 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                turno_ = Integer.parseInt((String) e1);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("O1", 19, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 8)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // O ::= origen dosPuntos abreCor ORIGEN cierraCor coma O1 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("O", 18, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // GALAXY1 ::= T 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("GALAXY1", 17, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // GALAXY1 ::= D 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("GALAXY1", 17, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // GALAXY1 ::= O 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("GALAXY1", 17, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // GALAXY ::= espacio dosPuntos abreLlaves GALAXY1 cierraLlaves 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("GALAXY", 16, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // DESTINO ::= COORD2 COMILLAS1 id COMILLAS2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).value;
                destino_ = (String) e;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("DESTINO", 32, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // DESTINO ::= COMILLAS1 id COMILLAS2 coma COORD2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).value;
                destino_ = (String) e;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("DESTINO", 32, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // ORIGEN ::= COORD coma COMILLAS1 id COMILLAS2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).value;
                origen_ = (String) e;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ORIGEN", 31, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // ORIGEN ::= COMILLAS1 id COMILLAS2 coma COORD 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).value;
                origen_ = (String) e;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ORIGEN", 31, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // ATAQ4 ::= 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ4", 15, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // ATAQ4 ::= coma TURNOS ATAQ4 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ4", 15, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // ATAQ3 ::= 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ3", 14, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // ATAQ3 ::= coma ATAQ1 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ3", 14, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // ATAQ2 ::= DATOS coma GALAXY 
            {
                Object RESULT = null;

                galaxia o = inicio_partida.tablero[x_][y_];
                galaxia d = inicio_partida.tablero[x2_][y2_];
                Ataque ataque = new Ataque("d", "f", turno_, naves_, complete_);
                System.out.println(x_ + " " + y_);
                System.out.println(x2_ + " " + y2_);
                System.out.println(o.getPlaneta().getNombre());
                System.out.println(d.getPlaneta().getNombre());

                ataques.add(ataque);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ2", 13, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // ATAQ2 ::= GALAXY coma DATOS 
            {
                Object RESULT = null;

                galaxia o = inicio_partida.tablero[x_][y_];
                galaxia d = inicio_partida.tablero[x2_][y2_];

                Ataque ataque = new Ataque("f", "d", turno_, naves_, complete_);
                System.out.println(x_ + " " + y_);
                System.out.println(x2_ + " " + y2_);
                System.out.println(o.getPlaneta().getNombre());
                System.out.println(d.getPlaneta().getNombre());

                ataques.add(ataque);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ2", 13, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // ATAQ1 ::= abreLlaves ATAQ2 cierraLlaves ATAQ3 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ1", 12, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // ATAQ22 ::= 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ22", 26, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // ATAQ22 ::= ATAQ1 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ22", 26, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // ATAQ ::= ataque dosPuntos abreLlaves ATAQ22 cierraLlaves 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQ", 11, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // ATAQUE1 ::= nombre dosPuntos COMILLAS1 id COMILLAS2 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).value;

                jugador_ = (String) e1;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQUE1", 10, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // ATAQUE ::= ATAQ coma ATAQUE1 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("ATAQUE", 9, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // POSICION2 ::= posicionY dosPuntos num coma posicionX dosPuntos num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                x2_ = Integer.parseInt((String) e2);
                y2_ = Integer.parseInt((String) e);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("POSICION2", 28, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // POSICION2 ::= posicionX dosPuntos num coma posicionY dosPuntos num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                x2_ = Integer.parseInt((String) e);
                y2_ = Integer.parseInt((String) e2);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("POSICION2", 28, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // POSICION ::= posicionY dosPuntos num coma posicionX dosPuntos num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                x_ = Integer.parseInt((String) e2);
                y_ = Integer.parseInt((String) e);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("POSICION", 27, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // POSICION ::= posicionX dosPuntos num coma posicionY dosPuntos num 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()).value;

                x_ = Integer.parseInt((String) e);
                y_ = Integer.parseInt((String) e2);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("POSICION", 27, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // COORD2 ::= posicion dosPuntos abreCor POSICION2 cierraCor 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COORD2", 30, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // COORD ::= posicion dosPuntos abreCor POSICION cierraCor 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("COORD", 29, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 4)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // NAME1 ::= ATAQ 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("NAME1", 6, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // NAME ::= nombre dosPuntos COMILLAS1 id COMILLAS2 coma NAME1 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).right;
                Object e1 = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 3)).value;
                jugador_ = (String) e1;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("NAME", 5, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 6)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // TURNO1 ::= ATAQUE 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("TURNO1", 4, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // TURNO1 ::= NAME 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("TURNO1", 4, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // TURNOS ::= abreLlaves TURNO1 cierraLlaves 
            {
                Object RESULT = null;

                Turno tmp = new Turno(ataques, jugador_, 0);
                turnos_.add(tmp);

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("TURNOS", 3, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 2)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // TURNO ::= abreLlaves turno dosPuntos abreCor TURNOS ATAQ4 cierraCor cierraLlaves 
            {
                Object RESULT = null;

                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("TURNO", 0, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 7)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            return CUP$parser_cliente_servidor$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= TURNO EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)).value;
                RESULT = start_val;
                CUP$parser_cliente_servidor$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.elementAt(CUP$parser_cliente_servidor$top - 1)), ((java_cup.runtime.Symbol) CUP$parser_cliente_servidor$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parser_cliente_servidor$parser.done_parsing();
            return CUP$parser_cliente_servidor$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
