
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 07 19:56:24 CST 2020
//----------------------------------------------------

package gramatica_juego;

import static gramatica_juego.parser.array_planetas;
import static gramatica_juego.parser.nombre_player;
import static gramatica_juego.parser.tipo_player;
import java_cup.runtime.Symbol;
import java.awt.Dimension;
import planetas_neutral.planeta_neutral;
import java.util.ArrayList;
import jugadores.dificil;
import jugadores.facil;
import jugadores.humano;
import jugadores.jugador;
import planetas.planeta_jugador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 07 19:56:24 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\004\000\002\002\005\000\002\010" +
    "\004\000\002\010\004\000\002\010\002\000\002\003\011" +
    "\000\002\004\013\000\002\005\014\000\002\006\014\000" +
    "\002\007\006\000\002\007\006\000\002\007\011\000\002" +
    "\007\006\000\002\011\006\000\002\011\011\000\002\011" +
    "\006\000\002\015\011\000\002\015\005\000\002\061\007" +
    "\000\002\061\004\000\002\016\006\000\002\016\006\000" +
    "\002\017\011\000\002\017\005\000\002\012\006\000\002" +
    "\012\011\000\002\012\006\000\002\020\011\000\002\020" +
    "\005\000\002\021\006\000\002\021\006\000\002\022\011" +
    "\000\002\022\005\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\023\006\000\002\023\006\000\002" +
    "\024\006\000\002\024\006\000\002\025\006\000\002\025" +
    "\006\000\002\014\006\000\002\014\006\000\002\014\011" +
    "\000\002\026\005\000\002\026\011\000\002\027\011\000" +
    "\002\027\005\000\002\030\006\000\002\030\006\000\002" +
    "\032\004\000\002\032\003\000\002\032\004\000\002\032" +
    "\006\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\016\000\002\035\016\000\002\036" +
    "\011\000\002\036\011\000\002\036\010\000\002\037\021" +
    "\000\002\040\021\000\002\041\021\000\002\042\013\000" +
    "\002\043\013\000\002\044\007\000\002\045\007\000\002" +
    "\046\007\000\002\047\007\000\002\050\013\000\002\051" +
    "\007\000\002\057\007\000\002\060\003\000\002\060\006" +
    "\000\002\053\014\000\002\054\010\000\002\055\010\000" +
    "\002\056\010\000\002\052\006\000\002\052\006\000\002" +
    "\052\006\000\002\052\006\000\002\064\006\000\002\064" +
    "\006\000\002\064\006\000\002\070\006\000\002\070\006" +
    "\000\002\071\006\000\002\071\006\000\002\072\006\000" +
    "\002\072\006\000\002\065\006\000\002\065\006\000\002" +
    "\065\006\000\002\073\006\000\002\073\006\000\002\074" +
    "\006\000\002\074\006\000\002\066\006\000\002\066\006" +
    "\000\002\066\006\000\002\075\006\000\002\075\006\000" +
    "\002\067\006\000\002\067\006\000\002\067\006\000\002" +
    "\103\004\000\002\104\004\000\002\104\010\000\002\142" +
    "\002\000\002\105\014\000\002\106\007\000\002\107\007" +
    "\000\002\110\007\000\002\076\007\000\002\076\007\000" +
    "\002\076\007\000\002\076\007\000\002\111\007\000\002" +
    "\111\003\000\002\111\007\000\002\077\007\000\002\077" +
    "\003\000\002\116\011\000\002\116\011\000\002\115\011" +
    "\000\002\115\005\000\002\120\011\000\002\120\005\000" +
    "\002\100\006\000\002\100\003\000\002\112\007\000\002" +
    "\112\003\000\002\112\007\000\002\101\007\000\002\101" +
    "\003\000\002\121\011\000\002\121\005\000\002\122\011" +
    "\000\002\122\010\000\002\113\007\000\002\113\007\000" +
    "\002\113\007\000\002\124\011\000\002\124\011\000\002" +
    "\114\007\000\002\114\007\000\002\114\003\000\002\102" +
    "\007\000\002\102\003\000\002\126\007\000\002\136\003" +
    "\000\002\136\007\000\002\127\007\000\002\127\007\000" +
    "\002\127\007\000\002\137\007\000\002\137\007\000\002" +
    "\140\007\000\002\140\007\000\002\141\007\000\002\141" +
    "\007\000\002\130\013\000\002\131\011\000\002\132\011" +
    "\000\002\133\003\000\002\133\005\000\002\134\007\000" +
    "\002\135\003\000\002\135\003\000\002\135\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0358\000\010\004\ufffd\050\005\051\007\001\002\000" +
    "\004\004\013\001\002\000\122\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\005\051\007\052\ufffd\054\ufffd\001\002\000\004" +
    "\002\011\001\002\000\122\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\005\051\007\052\ufffd\054\ufffd\001\002\000\116\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\052\ufffe\054\ufffe\001\002\000" +
    "\004\002\001\001\002\000\116\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\052\uffff\054\uffff\001\002\000\016\007\ufffd\031\ufffd" +
    "\035\ufffd\036\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\012\007\u0246\031\043" +
    "\035\u0143\036\314\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\002\000\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\013\023\001\002\000\014\031\ufffd" +
    "\035\ufffd\036\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\010\031\043\035\u0143" +
    "\036\314\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\004\002\ufff8\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\004\013\032\001\002\000\012\031" +
    "\ufffd\036\ufffd\050\005\051\007\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\006\031\043\036\314\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\004\013\040\001" +
    "\002\000\010\031\ufffd\050\005\051\007\001\002\000\004" +
    "\031\043\001\002\000\010\005\uffed\050\uffed\051\uffed\001" +
    "\002\000\010\006\ufffd\050\005\051\007\001\002\000\004" +
    "\006\045\001\002\000\010\040\ufffd\050\005\051\007\001" +
    "\002\000\004\040\047\001\002\000\010\004\ufffd\050\005" +
    "\051\007\001\002\000\004\004\051\001\002\000\016\027" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\050\005\051\007\001\002" +
    "\000\012\027\102\032\176\033\101\034\103\001\002\000" +
    "\010\013\ufffd\050\005\051\007\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\010\013\ufffd\050\005\051\007\001\002" +
    "\000\010\005\ufffd\050\005\051\007\001\002\000\012\005" +
    "\ufffb\013\ufffb\050\ufffb\051\ufffb\001\002\000\004\005\062" +
    "\001\002\000\012\013\ufffd\041\ufffd\050\005\051\007\001" +
    "\002\000\006\013\066\041\064\001\002\000\012\005\uffaf" +
    "\013\uffaf\050\uffaf\051\uffaf\001\002\000\012\005\uffb0\013" +
    "\uffb0\050\uffb0\051\uffb0\001\002\000\010\004\ufffd\050\005" +
    "\051\007\001\002\000\004\004\070\001\002\000\016\027" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\050\005\051\007\001\002" +
    "\000\012\005\uffae\013\uffae\050\uffae\051\uffae\001\002\000" +
    "\004\013\073\001\002\000\014\027\ufffd\033\ufffd\034\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\010\013\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\027" +
    "\102\033\101\034\103\001\002\000\010\005\uffa9\050\uffa9" +
    "\051\uffa9\001\002\000\010\006\ufffd\050\005\051\007\001" +
    "\002\000\010\006\ufffd\050\005\051\007\001\002\000\010" +
    "\006\ufffd\050\005\051\007\001\002\000\004\006\105\001" +
    "\002\000\010\046\ufffd\050\005\051\007\001\002\000\004" +
    "\046\107\001\002\000\012\005\uffaa\013\uffaa\050\uffaa\051" +
    "\uffaa\001\002\000\004\006\111\001\002\000\010\050\005" +
    "\051\007\052\ufffd\001\002\000\004\052\113\001\002\000" +
    "\012\005\uffab\013\uffab\050\uffab\051\uffab\001\002\000\004" +
    "\006\115\001\002\000\010\050\005\051\007\052\ufffd\001" +
    "\002\000\004\052\117\001\002\000\012\005\uffac\013\uffac" +
    "\050\uffac\051\uffac\001\002\000\004\013\121\001\002\000" +
    "\012\027\ufffd\034\ufffd\050\005\051\007\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\010\005\uffa5\050\uffa5\051\uffa5" +
    "\001\002\000\006\027\102\034\103\001\002\000\004\013" +
    "\127\001\002\000\010\034\ufffd\050\005\051\007\001\002" +
    "\000\010\005\uffa2\050\uffa2\051\uffa2\001\002\000\004\034" +
    "\103\001\002\000\004\013\133\001\002\000\010\027\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uffa1\050\uffa1\051" +
    "\uffa1\001\002\000\004\027\102\001\002\000\004\013\137" +
    "\001\002\000\012\033\ufffd\034\ufffd\050\005\051\007\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\010" +
    "\005\uffa4\050\uffa4\051\uffa4\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\006\033\101\034\103\001\002" +
    "\000\004\013\145\001\002\000\010\034\ufffd\050\005\051" +
    "\007\001\002\000\010\005\uffa0\050\uffa0\051\uffa0\001\002" +
    "\000\004\013\150\001\002\000\010\033\ufffd\050\005\051" +
    "\007\001\002\000\010\005\uff9f\050\uff9f\051\uff9f\001\002" +
    "\000\004\033\101\001\002\000\004\013\154\001\002\000" +
    "\012\027\ufffd\033\ufffd\050\005\051\007\001\002\000\010" +
    "\005\uffa3\050\uffa3\051\uffa3\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\006\027\102\033\101\001\002\000\004\013" +
    "\162\001\002\000\010\027\ufffd\050\005\051\007\001\002" +
    "\000\010\005\uff9d\050\uff9d\051\uff9d\001\002\000\004\013" +
    "\165\001\002\000\010\033\ufffd\050\005\051\007\001\002" +
    "\000\010\005\uff9e\050\uff9e\051\uff9e\001\002\000\004\013" +
    "\170\001\002\000\014\027\ufffd\032\ufffd\034\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\010\027\102\032" +
    "\176\034\103\001\002\000\010\005\uffa8\050\uffa8\051\uffa8" +
    "\001\002\000\010\006\ufffd\050\005\051\007\001\002\000" +
    "\004\006\200\001\002\000\010\010\ufffd\050\005\051\007" +
    "\001\002\000\004\010\202\001\002\000\010\047\ufffd\050" +
    "\005\051\007\001\002\000\004\047\204\001\002\000\010" +
    "\011\ufffd\050\005\051\007\001\002\000\004\011\206\001" +
    "\002\000\012\005\uffad\013\uffad\050\uffad\051\uffad\001\002" +
    "\000\004\013\210\001\002\000\012\027\ufffd\034\ufffd\050" +
    "\005\051\007\001\002\000\010\005\uff9c\050\uff9c\051\uff9c" +
    "\001\002\000\004\013\213\001\002\000\012\032\ufffd\034" +
    "\ufffd\050\005\051\007\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\006\032\176\034\103\001\002\000\010\005\uff9b" +
    "\050\uff9b\051\uff9b\001\002\000\004\013\221\001\002\000" +
    "\010\034\ufffd\050\005\051\007\001\002\000\010\005\uff99" +
    "\050\uff99\051\uff99\001\002\000\004\013\224\001\002\000" +
    "\010\032\ufffd\050\005\051\007\001\002\000\010\005\uff98" +
    "\050\uff98\051\uff98\001\002\000\004\032\176\001\002\000" +
    "\004\013\230\001\002\000\012\027\ufffd\032\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\006" +
    "\027\102\032\176\001\002\000\010\005\uff9a\050\uff9a\051" +
    "\uff9a\001\002\000\004\013\236\001\002\000\010\027\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uff96\050\uff96\051" +
    "\uff96\001\002\000\004\013\241\001\002\000\010\032\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uff97\050\uff97\051" +
    "\uff97\001\002\000\004\013\244\001\002\000\014\032\ufffd" +
    "\033\ufffd\034\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\005\uffa7\050\uffa7\051\uffa7\001\002\000\010" +
    "\032\176\033\101\034\103\001\002\000\004\013\253\001" +
    "\002\000\012\033\ufffd\034\ufffd\050\005\051\007\001\002" +
    "\000\010\005\uff95\050\uff95\051\uff95\001\002\000\004\013" +
    "\256\001\002\000\012\032\ufffd\034\ufffd\050\005\051\007" +
    "\001\002\000\010\005\uff94\050\uff94\051\uff94\001\002\000" +
    "\004\013\261\001\002\000\012\032\ufffd\033\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\006" +
    "\032\176\033\101\001\002\000\010\005\uff93\050\uff93\051" +
    "\uff93\001\002\000\004\013\267\001\002\000\010\033\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uff92\050\uff92\051" +
    "\uff92\001\002\000\004\013\272\001\002\000\010\032\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uff91\050\uff91\051" +
    "\uff91\001\002\000\004\013\275\001\002\000\014\027\ufffd" +
    "\032\ufffd\033\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\005\uffa6\050\uffa6\051\uffa6\001\002\000\010" +
    "\027\102\032\176\033\101\001\002\000\004\013\304\001" +
    "\002\000\012\027\ufffd\033\ufffd\050\005\051\007\001\002" +
    "\000\010\005\uff90\050\uff90\051\uff90\001\002\000\004\013" +
    "\307\001\002\000\012\027\ufffd\032\ufffd\050\005\051\007" +
    "\001\002\000\010\005\uff8f\050\uff8f\051\uff8f\001\002\000" +
    "\004\013\312\001\002\000\012\032\ufffd\033\ufffd\050\005" +
    "\051\007\001\002\000\010\005\uff8e\050\uff8e\051\uff8e\001" +
    "\002\000\010\006\ufffd\050\005\051\007\001\002\000\004" +
    "\006\316\001\002\000\010\040\ufffd\050\005\051\007\001" +
    "\002\000\004\040\320\001\002\000\010\004\ufffd\050\005" +
    "\051\007\001\002\000\004\004\322\001\002\000\014\032" +
    "\ufffd\037\ufffd\042\ufffd\050\005\051\007\001\002\000\010" +
    "\032\327\037\324\042\331\001\002\000\010\006\ufffd\050" +
    "\005\051\007\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\010\013\ufffd\050\005\051\007\001\002\000" +
    "\010\006\ufffd\050\005\051\007\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\010\006\ufffd\050\005\051" +
    "\007\001\002\000\012\005\ufff9\013\ufff9\050\ufff9\051\ufff9" +
    "\001\002\000\010\013\ufffd\050\005\051\007\001\002\000" +
    "\004\013\335\001\002\000\012\032\ufffd\037\ufffd\050\005" +
    "\051\007\001\002\000\006\032\327\037\324\001\002\000" +
    "\010\005\uff5c\050\uff5c\051\uff5c\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\013\343\001\002\000\010\037\ufffd" +
    "\050\005\051\007\001\002\000\004\037\324\001\002\000" +
    "\010\005\uff56\050\uff56\051\uff56\001\002\000\004\013\347" +
    "\001\002\000\010\032\ufffd\050\005\051\007\001\002\000" +
    "\004\032\327\001\002\000\010\005\uff57\050\uff57\051\uff57" +
    "\001\002\000\004\006\353\001\002\000\014\043\ufffd\044" +
    "\ufffd\045\ufffd\050\005\051\007\001\002\000\010\043\356" +
    "\044\360\045\355\001\002\000\012\005\uff4e\013\uff4e\050" +
    "\uff4e\051\uff4e\001\002\000\012\005\uff4d\013\uff4d\050\uff4d" +
    "\051\uff4d\001\002\000\012\005\uff50\013\uff50\050\uff50\051" +
    "\uff50\001\002\000\012\005\uff4f\013\uff4f\050\uff4f\051\uff4f" +
    "\001\002\000\004\005\362\001\002\000\012\013\ufffd\041" +
    "\ufffd\050\005\051\007\001\002\000\006\013\365\041\364" +
    "\001\002\000\012\005\uff60\013\uff60\050\uff60\051\uff60\001" +
    "\002\000\010\004\ufffd\050\005\051\007\001\002\000\012" +
    "\005\uff61\013\uff61\050\uff61\051\uff61\001\002\000\004\004" +
    "\370\001\002\000\014\032\ufffd\037\ufffd\042\ufffd\050\005" +
    "\051\007\001\002\000\010\032\327\037\324\042\331\001" +
    "\002\000\012\005\uff5f\013\uff5f\050\uff5f\051\uff5f\001\002" +
    "\000\004\006\374\001\002\000\010\010\ufffd\050\005\051" +
    "\007\001\002\000\004\010\376\001\002\000\010\047\ufffd" +
    "\050\005\051\007\001\002\000\004\047\u0100\001\002\000" +
    "\010\011\ufffd\050\005\051\007\001\002\000\004\011\u0102" +
    "\001\002\000\012\005\uff55\013\uff55\050\uff55\051\uff55\001" +
    "\002\000\004\013\u0104\001\002\000\012\037\ufffd\042\ufffd" +
    "\050\005\051\007\001\002\000\006\037\324\042\331\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\010" +
    "\005\uff5e\050\uff5e\051\uff5e\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\004\013\u010a\001\002\000\010" +
    "\037\ufffd\050\005\051\007\001\002\000\004\037\324\001" +
    "\002\000\010\005\uff5a\050\uff5a\051\uff5a\001\002\000\004" +
    "\013\u010e\001\002\000\010\042\ufffd\050\005\051\007\001" +
    "\002\000\004\042\331\001\002\000\010\005\uff5b\050\uff5b" +
    "\051\uff5b\001\002\000\004\013\u0112\001\002\000\012\032" +
    "\ufffd\042\ufffd\050\005\051\007\001\002\000\006\032\327" +
    "\042\331\001\002\000\010\005\uff5d\050\uff5d\051\uff5d\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\004\013\u0118\001" +
    "\002\000\010\032\ufffd\050\005\051\007\001\002\000\004" +
    "\032\327\001\002\000\010\005\uff58\050\uff58\051\uff58\001" +
    "\002\000\004\013\u011c\001\002\000\010\042\ufffd\050\005" +
    "\051\007\001\002\000\004\042\331\001\002\000\010\005" +
    "\uff59\050\uff59\051\uff59\001\002\000\004\006\u0120\001\002" +
    "\000\010\040\ufffd\050\005\051\007\001\002\000\004\040" +
    "\u0122\001\002\000\010\010\ufffd\050\005\051\007\001\002" +
    "\000\004\010\u0125\001\002\000\012\005\uff54\013\uff54\050" +
    "\uff54\051\uff54\001\002\000\010\047\ufffd\050\005\051\007" +
    "\001\002\000\004\047\u0127\001\002\000\010\011\ufffd\050" +
    "\005\051\007\001\002\000\004\011\u0129\001\002\000\012" +
    "\013\ufffd\041\ufffd\050\005\051\007\001\002\000\006\013" +
    "\u012d\041\u012c\001\002\000\012\005\uff53\013\uff53\050\uff53" +
    "\051\uff53\001\002\000\012\005\uff52\013\uff52\050\uff52\051" +
    "\uff52\001\002\000\010\010\ufffd\050\005\051\007\001\002" +
    "\000\004\010\u0125\001\002\000\012\005\uff51\013\uff51\050" +
    "\uff51\051\uff51\001\002\000\004\013\u0131\001\002\000\010" +
    "\036\ufffd\050\005\051\007\001\002\000\004\036\314\001" +
    "\002\000\010\005\uffec\050\uffec\051\uffec\001\002\000\004" +
    "\005\u0135\001\002\000\010\002\ufffd\050\005\051\007\001" +
    "\002\000\004\002\ufff3\001\002\000\004\013\u0138\001\002" +
    "\000\012\031\ufffd\035\ufffd\050\005\051\007\001\002\000" +
    "\004\002\ufff2\001\002\000\012\005\ufffd\013\ufffd\050\005" +
    "\051\007\001\002\000\006\031\043\035\u0143\001\002\000" +
    "\010\013\ufffd\050\005\051\007\001\002\000\004\013\u013e" +
    "\001\002\000\010\031\ufffd\050\005\051\007\001\002\000" +
    "\010\005\ufffd\050\005\051\007\001\002\000\004\005\u0141" +
    "\001\002\000\010\002\ufffd\050\005\051\007\001\002\000" +
    "\004\002\uffeb\001\002\000\010\006\ufffd\050\005\051\007" +
    "\001\002\000\004\006\u0145\001\002\000\010\040\ufffd\050" +
    "\005\051\007\001\002\000\004\040\u0147\001\002\000\010" +
    "\004\ufffd\050\005\051\007\001\002\000\004\004\u0149\001" +
    "\002\000\016\027\ufffd\032\ufffd\033\ufffd\034\ufffd\050\005" +
    "\051\007\001\002\000\012\027\u014e\032\u014b\033\u0153\034" +
    "\u0152\001\002\000\010\006\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\010\006\ufffd\050\005" +
    "\051\007\001\002\000\012\013\ufffd\041\ufffd\050\005\051" +
    "\007\001\002\000\012\005\ufffa\013\ufffa\050\ufffa\051\ufffa" +
    "\001\002\000\010\013\ufffd\050\005\051\007\001\002\000" +
    "\010\006\ufffd\050\005\051\007\001\002\000\010\006\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\013\u0156\001\002\000\014\027\ufffd" +
    "\032\ufffd\034\ufffd\050\005\051\007\001\002\000\010\027" +
    "\u014e\032\u014b\034\u0152\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\012\013\uff70\041\uff70\050\uff70\051\uff70\001\002" +
    "\000\012\013\uff73\041\uff73\050\uff73\051\uff73\001\002\000" +
    "\010\013\ufffd\050\005\051\007\001\002\000\012\013\uff84" +
    "\041\uff84\050\uff84\051\uff84\001\002\000\004\013\u015f\001" +
    "\002\000\012\032\ufffd\034\ufffd\050\005\051\007\001\002" +
    "\000\006\032\u014b\034\u0152\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\012\013\uff71\041\uff71\050\uff71" +
    "\051\uff71\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\004\013\u0165\001\002\000\010\034\ufffd\050\005" +
    "\051\007\001\002\000\004\034\u0152\001\002\000\010\005" +
    "\ufffd\050\005\051\007\001\002\000\004\005\u0169\001\002" +
    "\000\012\013\uff6d\041\uff6d\050\uff6d\051\uff6d\001\002\000" +
    "\004\013\u016b\001\002\000\004\032\u014b\001\002\000\010" +
    "\005\ufffd\050\005\051\007\001\002\000\004\005\u016e\001" +
    "\002\000\012\013\uff6c\041\uff6c\050\uff6c\051\uff6c\001\002" +
    "\000\004\013\u0170\001\002\000\012\027\ufffd\034\ufffd\050" +
    "\005\051\007\001\002\000\006\027\u014e\034\u0152\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\012\005" +
    "\ufffd\013\ufffd\050\005\051\007\001\002\000\012\013\uff74" +
    "\041\uff74\050\uff74\051\uff74\001\002\000\006\005\u0176\013" +
    "\u0177\001\002\000\012\013\uff75\041\uff75\050\uff75\051\uff75" +
    "\001\002\000\010\027\ufffd\050\005\051\007\001\002\000" +
    "\012\013\uff79\041\uff79\050\uff79\051\uff79\001\002\000\010" +
    "\005\ufffd\050\005\051\007\001\002\000\004\005\u017b\001" +
    "\002\000\012\013\uff76\041\uff76\050\uff76\051\uff76\001\002" +
    "\000\004\013\u017d\001\002\000\010\034\ufffd\050\005\051" +
    "\007\001\002\000\004\034\u0152\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u0181\001\002\000" +
    "\012\013\uff7a\041\uff7a\050\uff7a\051\uff7a\001\002\000\004" +
    "\013\u0183\001\002\000\012\027\ufffd\032\ufffd\050\005\051" +
    "\007\001\002\000\006\027\u014e\032\u014b\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\012\013\uff72\041" +
    "\uff72\050\uff72\051\uff72\001\002\000\012\005\ufffd\013\ufffd" +
    "\050\005\051\007\001\002\000\006\005\u0176\013\u0177\001" +
    "\002\000\012\013\uff6e\041\uff6e\050\uff6e\051\uff6e\001\002" +
    "\000\004\013\u018b\001\002\000\010\032\ufffd\050\005\051" +
    "\007\001\002\000\004\032\u014b\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u018f\001\002\000" +
    "\012\013\uff6f\041\uff6f\050\uff6f\051\uff6f\001\002\000\004" +
    "\006\u0191\001\002\000\010\050\005\051\007\052\ufffd\001" +
    "\002\000\004\052\u0193\001\002\000\012\005\uff88\013\uff88" +
    "\050\uff88\051\uff88\001\002\000\004\006\u0195\001\002\000" +
    "\010\046\ufffd\050\005\051\007\001\002\000\004\046\u0197" +
    "\001\002\000\012\005\uff86\013\uff86\050\uff86\051\uff86\001" +
    "\002\000\004\013\u0199\001\002\000\014\032\ufffd\033\ufffd" +
    "\034\ufffd\050\005\051\007\001\002\000\010\032\u014b\033" +
    "\u0153\034\u0152\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\010\013\ufffd\050\005\051\007\001\002\000" +
    "\012\013\uff83\041\uff83\050\uff83\051\uff83\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\004\013\u01a0\001" +
    "\002\000\012\032\ufffd\034\ufffd\050\005\051\007\001\002" +
    "\000\006\032\u014b\034\u0152\001\002\000\012\013\uff6a\041" +
    "\uff6a\050\uff6a\051\uff6a\001\002\000\004\013\u01a4\001\002" +
    "\000\012\033\ufffd\034\ufffd\050\005\051\007\001\002\000" +
    "\006\033\u0153\034\u0152\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\012\013\uff6b\041\uff6b\050\uff6b\051" +
    "\uff6b\001\002\000\010\013\ufffd\050\005\051\007\001\002" +
    "\000\004\013\u01aa\001\002\000\010\034\ufffd\050\005\051" +
    "\007\001\002\000\004\034\u0152\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u01ae\001\002\000" +
    "\012\013\uff7c\041\uff7c\050\uff7c\051\uff7c\001\002\000\004" +
    "\013\u01b0\001\002\000\010\033\ufffd\050\005\051\007\001" +
    "\002\000\004\033\u0153\001\002\000\010\005\ufffd\050\005" +
    "\051\007\001\002\000\004\005\u01b4\001\002\000\012\013" +
    "\uff7b\041\uff7b\050\uff7b\051\uff7b\001\002\000\004\013\u01b6" +
    "\001\002\000\012\032\ufffd\033\ufffd\050\005\051\007\001" +
    "\002\000\006\032\u014b\033\u0153\001\002\000\012\013\uff69" +
    "\041\uff69\050\uff69\051\uff69\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\004\013\u01bc\001\002\000\010\032\ufffd\050" +
    "\005\051\007\001\002\000\004\032\u014b\001\002\000\010" +
    "\005\ufffd\050\005\051\007\001\002\000\004\005\u01c0\001" +
    "\002\000\012\013\uff67\041\uff67\050\uff67\051\uff67\001\002" +
    "\000\004\013\u01c2\001\002\000\010\033\ufffd\050\005\051" +
    "\007\001\002\000\004\033\u0153\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u01c6\001\002\000" +
    "\012\013\uff68\041\uff68\050\uff68\051\uff68\001\002\000\006" +
    "\013\u01ca\041\u01c9\001\002\000\012\005\uff8d\013\uff8d\050" +
    "\uff8d\051\uff8d\001\002\000\012\005\uff8c\013\uff8c\050\uff8c" +
    "\051\uff8c\001\002\000\010\004\ufffd\050\005\051\007\001" +
    "\002\000\004\004\u01cc\001\002\000\016\027\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\050\005\051\007\001\002\000\012\027" +
    "\u014e\032\u014b\033\u0153\034\u0152\001\002\000\012\005\uff8b" +
    "\013\uff8b\050\uff8b\051\uff8b\001\002\000\004\006\u01d0\001" +
    "\002\000\010\050\005\051\007\052\ufffd\001\002\000\004" +
    "\052\u01d2\001\002\000\010\013\uff87\050\uff87\051\uff87\001" +
    "\002\000\004\013\u01d4\001\002\000\014\027\ufffd\033\ufffd" +
    "\034\ufffd\050\005\051\007\001\002\000\010\027\u014e\033" +
    "\u0153\034\u0152\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\012\013\uff80\041\uff80\050\uff80\051\uff80\001" +
    "\002\000\010\013\ufffd\050\005\051\007\001\002\000\012" +
    "\013\uff7d\041\uff7d\050\uff7d\051\uff7d\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\012\013\uff85\041\uff85" +
    "\050\uff85\051\uff85\001\002\000\004\013\u01dd\001\002\000" +
    "\012\027\ufffd\034\ufffd\050\005\051\007\001\002\000\006" +
    "\027\u014e\034\u0152\001\002\000\012\013\uff81\041\uff81\050" +
    "\uff81\051\uff81\001\002\000\004\013\u01e1\001\002\000\012" +
    "\033\ufffd\034\ufffd\050\005\051\007\001\002\000\006\033" +
    "\u0153\034\u0152\001\002\000\012\013\uff7e\041\uff7e\050\uff7e" +
    "\051\uff7e\001\002\000\004\013\u01e5\001\002\000\012\027" +
    "\ufffd\033\ufffd\050\005\051\007\001\002\000\006\027\u014e" +
    "\033\u0153\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\012\013\uff7f\041\uff7f\050\uff7f\051\uff7f\001\002" +
    "\000\012\005\ufffd\013\ufffd\050\005\051\007\001\002\000" +
    "\006\005\u0176\013\u0177\001\002\000\012\013\uff77\041\uff77" +
    "\050\uff77\051\uff77\001\002\000\004\013\u01ed\001\002\000" +
    "\010\033\ufffd\050\005\051\007\001\002\000\004\033\u0153" +
    "\001\002\000\010\005\ufffd\050\005\051\007\001\002\000" +
    "\004\005\u01f1\001\002\000\012\013\uff78\041\uff78\050\uff78" +
    "\051\uff78\001\002\000\004\013\u01f3\001\002\000\014\027" +
    "\ufffd\032\ufffd\033\ufffd\050\005\051\007\001\002\000\010" +
    "\027\u014e\032\u014b\033\u0153\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\012\013\uff62\041\uff62\050\uff62" +
    "\051\uff62\001\002\000\012\013\uff64\041\uff64\050\uff64\051" +
    "\uff64\001\002\000\010\013\ufffd\050\005\051\007\001\002" +
    "\000\012\013\uff82\041\uff82\050\uff82\051\uff82\001\002\000" +
    "\010\013\ufffd\050\005\051\007\001\002\000\004\013\u01fc" +
    "\001\002\000\012\027\ufffd\032\ufffd\050\005\051\007\001" +
    "\002\000\006\027\u014e\032\u014b\001\002\000\012\013\uff65" +
    "\041\uff65\050\uff65\051\uff65\001\002\000\004\013\u0200\001" +
    "\002\000\012\032\ufffd\033\ufffd\050\005\051\007\001\002" +
    "\000\006\032\u014b\033\u0153\001\002\000\012\013\uff63\041" +
    "\uff63\050\uff63\051\uff63\001\002\000\004\013\u0204\001\002" +
    "\000\012\027\ufffd\033\ufffd\050\005\051\007\001\002\000" +
    "\006\027\u014e\033\u0153\001\002\000\012\013\uff66\041\uff66" +
    "\050\uff66\051\uff66\001\002\000\004\006\u0208\001\002\000" +
    "\010\010\ufffd\050\005\051\007\001\002\000\004\010\u020a" +
    "\001\002\000\010\047\ufffd\050\005\051\007\001\002\000" +
    "\004\047\u020c\001\002\000\010\011\uff8a\050\uff8a\051\uff8a" +
    "\001\002\000\010\011\ufffd\050\005\051\007\001\002\000" +
    "\004\011\u020f\001\002\000\012\005\uff89\013\uff89\050\uff89" +
    "\051\uff89\001\002\000\006\005\u0211\013\u0212\001\002\000" +
    "\010\002\ufffd\050\005\051\007\001\002\000\010\035\ufffd" +
    "\050\005\051\007\001\002\000\004\002\uffea\001\002\000" +
    "\004\035\u0143\001\002\000\010\005\ufffd\050\005\051\007" +
    "\001\002\000\004\005\u0217\001\002\000\010\002\ufffd\050" +
    "\005\051\007\001\002\000\004\002\uffef\001\002\000\004" +
    "\002\uffee\001\002\000\004\013\u021b\001\002\000\012\035" +
    "\ufffd\036\ufffd\050\005\051\007\001\002\000\006\035\u0143" +
    "\036\314\001\002\000\004\002\ufff4\001\002\000\012\005" +
    "\ufffd\013\ufffd\050\005\051\007\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\004\013\u0221\001\002\000" +
    "\010\036\ufffd\050\005\051\007\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u0224\001\002\000" +
    "\010\002\ufffd\050\005\051\007\001\002\000\004\002\ufff1" +
    "\001\002\000\006\005\u0211\013\u0212\001\002\000\004\002" +
    "\ufff0\001\002\000\004\013\u0229\001\002\000\014\007\ufffd" +
    "\031\ufffd\036\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\010\007\u0246\031\043" +
    "\036\314\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\010\005\ufffd\050\005\051\007\001\002\000\010" +
    "\013\ufffd\050\005\051\007\001\002\000\004\013\u0230\001" +
    "\002\000\012\031\ufffd\036\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\005" +
    "\uffdf\050\uffdf\051\uffdf\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\004\013\u0235\001\002\000\010\031" +
    "\ufffd\050\005\051\007\001\002\000\010\005\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\004\013\u0238\001\002\000\010\036" +
    "\ufffd\050\005\051\007\001\002\000\010\005\uffda\050\uffda" +
    "\051\uffda\001\002\000\004\005\u023b\001\002\000\010\002" +
    "\ufffd\050\005\051\007\001\002\000\004\002\ufff6\001\002" +
    "\000\004\013\u023e\001\002\000\012\007\ufffd\031\ufffd\050" +
    "\005\051\007\001\002\000\010\005\uffde\050\uffde\051\uffde" +
    "\001\002\000\010\013\ufffd\050\005\051\007\001\002\000" +
    "\006\007\u0246\031\043\001\002\000\010\013\ufffd\050\005" +
    "\051\007\001\002\000\004\013\u0244\001\002\000\010\031" +
    "\ufffd\050\005\051\007\001\002\000\010\005\uffd8\050\uffd8" +
    "\051\uffd8\001\002\000\010\006\ufffd\050\005\051\007\001" +
    "\002\000\004\006\u0248\001\002\000\010\004\ufffd\050\005" +
    "\051\007\001\002\000\004\004\u024a\001\002\000\032\005" +
    "\u0260\013\u024f\014\u0259\017\u0255\021\u0254\022\u0256\023\u025b" +
    "\024\u024b\030\u0250\050\u025f\051\u025e\054\u0251\001\002\000" +
    "\010\006\ufffd\050\005\051\007\001\002\000\032\005\u0260" +
    "\013\u024f\014\u0259\017\u0255\021\u0254\022\u0256\023\u025b\024" +
    "\u024b\030\u0250\050\u025f\051\u025e\054\u0251\001\002\000\032" +
    "\005\u0260\013\u024f\014\u0259\017\u0255\021\u0254\022\u0256\023" +
    "\u025b\024\u024b\030\u0250\050\u025f\051\u025e\054\u0251\001\002" +
    "\000\012\005\ufffc\013\ufffc\050\ufffc\051\ufffc\001\002\000" +
    "\026\014\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\030\ufffd\050\005\051\007\054\ufffd\001\002\000\010\006" +
    "\ufffd\050\005\051\007\001\002\000\010\006\ufffd\050\005" +
    "\051\007\001\002\000\032\005\uffc5\013\uffc5\014\uffc5\017" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5\050\uffc5" +
    "\051\uffc5\054\uffc5\001\002\000\032\005\uffc4\013\uffc4\014" +
    "\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\030\uffc4" +
    "\050\uffc4\051\uffc4\054\uffc4\001\002\000\010\006\ufffd\050" +
    "\005\051\007\001\002\000\010\006\ufffd\050\005\051\007" +
    "\001\002\000\010\006\ufffd\050\005\051\007\001\002\000" +
    "\032\005\uffc3\013\uffc3\014\uffc3\017\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\030\uffc3\050\uffc3\051\uffc3\054\uffc3\001" +
    "\002\000\032\005\uffc1\013\uffc1\014\uffc1\017\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\030\uffc1\050\uffc1\051\uffc1\054" +
    "\uffc1\001\002\000\010\006\ufffd\050\005\051\007\001\002" +
    "\000\032\005\uffc2\013\uffc2\014\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\030\uffc2\050\uffc2\051\uffc2\054\uffc2" +
    "\001\002\000\010\006\ufffd\050\005\051\007\001\002\000" +
    "\032\005\uffc7\013\uffc7\014\uffc7\017\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\030\uffc7\050\uffc7\051\uffc7\054\uffc7\001" +
    "\002\000\032\005\uffc6\013\uffc6\014\uffc6\017\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\030\uffc6\050\uffc6\051\uffc6\054" +
    "\uffc6\001\002\000\032\005\uffc9\013\uffc9\014\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\030\uffc9\050\uffc9\051" +
    "\uffc9\054\uffc9\001\002\000\032\005\uffca\013\uffca\014\uffca" +
    "\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\030\uffca\050" +
    "\uffca\051\uffca\054\uffca\001\002\000\012\005\uffcd\013\uffcd" +
    "\050\uffcd\051\uffcd\001\002\000\032\005\uffc8\013\uffc8\014" +
    "\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\030\uffc8" +
    "\050\uffc8\051\uffc8\054\uffc8\001\002\000\004\006\u0263\001" +
    "\002\000\010\020\ufffd\050\005\051\007\001\002\000\004" +
    "\020\u0265\001\002\000\032\005\uffb3\013\uffb3\014\uffb3\017" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\030\uffb3\050\uffb3" +
    "\051\uffb3\054\uffb3\001\002\000\004\006\u0267\001\002\000" +
    "\010\004\ufffd\050\005\051\007\001\002\000\004\004\u0269" +
    "\001\002\000\012\015\ufffd\016\ufffd\050\005\051\007\001" +
    "\002\000\006\015\u026b\016\u026d\001\002\000\010\006\ufffd" +
    "\050\005\051\007\001\002\000\010\005\ufffd\050\005\051" +
    "\007\001\002\000\010\006\ufffd\050\005\051\007\001\002" +
    "\000\004\006\u026f\001\002\000\010\050\005\051\007\052" +
    "\ufffd\001\002\000\004\052\u0271\001\002\000\004\013\u0272" +
    "\001\002\000\010\015\ufffd\050\005\051\007\001\002\000" +
    "\004\015\u0274\001\002\000\010\006\ufffd\050\005\051\007" +
    "\001\002\000\004\006\u0276\001\002\000\010\050\005\051" +
    "\007\052\ufffd\001\002\000\004\052\u0278\001\002\000\010" +
    "\005\uffc0\050\uffc0\051\uffc0\001\002\000\004\005\u027a\001" +
    "\002\000\032\005\uffb7\013\uffb7\014\uffb7\017\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\030\uffb7\050\uffb7\051\uffb7\054" +
    "\uffb7\001\002\000\004\006\u027c\001\002\000\010\050\005" +
    "\051\007\052\ufffd\001\002\000\004\052\u027e\001\002\000" +
    "\004\013\u027f\001\002\000\010\016\ufffd\050\005\051\007" +
    "\001\002\000\004\016\u0281\001\002\000\010\006\ufffd\050" +
    "\005\051\007\001\002\000\004\006\u0283\001\002\000\010" +
    "\050\005\051\007\052\ufffd\001\002\000\004\052\u0285\001" +
    "\002\000\010\005\uffbf\050\uffbf\051\uffbf\001\002\000\004" +
    "\006\u0287\001\002\000\010\020\ufffd\050\005\051\007\001" +
    "\002\000\004\020\u0289\001\002\000\032\005\uffb4\013\uffb4" +
    "\014\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\030" +
    "\uffb4\050\uffb4\051\uffb4\054\uffb4\001\002\000\004\006\u028b" +
    "\001\002\000\010\020\ufffd\050\005\051\007\001\002\000" +
    "\004\020\u028d\001\002\000\032\005\uffb6\013\uffb6\014\uffb6" +
    "\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6\050" +
    "\uffb6\051\uffb6\054\uffb6\001\002\000\004\006\u028f\001\002" +
    "\000\010\050\005\051\007\052\ufffd\001\002\000\004\052" +
    "\u0291\001\002\000\032\005\uffb5\013\uffb5\014\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\050\uffb5\051" +
    "\uffb5\054\uffb5\001\002\000\004\006\u0293\001\002\000\010" +
    "\010\ufffd\050\005\051\007\001\002\000\004\010\u0295\001" +
    "\002\000\010\047\ufffd\050\005\051\007\001\002\000\004" +
    "\047\u0297\001\002\000\010\011\ufffd\050\005\051\007\001" +
    "\002\000\004\011\u0299\001\002\000\032\005\uffb8\013\uffb8" +
    "\014\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030" +
    "\uffb8\050\uffb8\051\uffb8\054\uffb8\001\002\000\004\006\u029b" +
    "\001\002\000\010\050\005\051\007\052\ufffd\001\002\000" +
    "\004\052\u029d\001\002\000\032\005\uffb1\013\uffb1\014\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1\050" +
    "\uffb1\051\uffb1\054\uffb1\001\002\000\022\014\u0259\017\u0255" +
    "\021\u0254\022\u0256\023\u025b\024\u024b\030\u0250\054\u0251\001" +
    "\002\000\032\005\u0260\013\u024f\014\u0259\017\u0255\021\u0254" +
    "\022\u0256\023\u025b\024\u024b\030\u0250\050\u025f\051\u025e\054" +
    "\u0251\001\002\000\012\005\uffcb\013\uffcb\050\uffcb\051\uffcb" +
    "\001\002\000\012\005\uffce\013\uffce\050\uffce\051\uffce\001" +
    "\002\000\012\005\uffcc\013\uffcc\050\uffcc\051\uffcc\001\002" +
    "\000\004\006\u02a4\001\002\000\010\004\ufffd\050\005\051" +
    "\007\001\002\000\004\004\u02a6\001\002\000\014\025\ufffd" +
    "\026\ufffd\027\ufffd\050\005\051\007\001\002\000\010\025" +
    "\u02a9\026\u02aa\027\u02ab\001\002\000\010\005\ufffd\050\005" +
    "\051\007\001\002\000\010\006\ufffd\050\005\051\007\001" +
    "\002\000\010\006\ufffd\050\005\051\007\001\002\000\010" +
    "\006\ufffd\050\005\051\007\001\002\000\004\006\u02ad\001" +
    "\002\000\010\050\005\051\007\052\ufffd\001\002\000\004" +
    "\052\u02af\001\002\000\004\013\u02b1\001\002\000\010\005" +
    "\uffbc\050\uffbc\051\uffbc\001\002\000\010\025\ufffd\050\005" +
    "\051\007\001\002\000\004\025\u02b3\001\002\000\010\006" +
    "\ufffd\050\005\051\007\001\002\000\004\006\u02b5\001\002" +
    "\000\010\020\ufffd\050\005\051\007\001\002\000\004\020" +
    "\u02b7\001\002\000\010\013\ufffd\050\005\051\007\001\002" +
    "\000\004\013\u02b9\001\002\000\010\026\ufffd\050\005\051" +
    "\007\001\002\000\004\026\u02bb\001\002\000\010\006\ufffd" +
    "\050\005\051\007\001\002\000\004\006\u02bd\001\002\000" +
    "\010\020\ufffd\050\005\051\007\001\002\000\004\020\u02bf" +
    "\001\002\000\010\005\uffb9\050\uffb9\051\uffb9\001\002\000" +
    "\004\006\u02c1\001\002\000\010\020\ufffd\050\005\051\007" +
    "\001\002\000\004\020\u02c3\001\002\000\010\013\ufffd\050" +
    "\005\051\007\001\002\000\004\013\u02c6\001\002\000\010" +
    "\005\uffbd\050\uffbd\051\uffbd\001\002\000\010\025\ufffd\050" +
    "\005\051\007\001\002\000\004\025\u02c8\001\002\000\010" +
    "\006\ufffd\050\005\051\007\001\002\000\004\006\u02ca\001" +
    "\002\000\010\020\ufffd\050\005\051\007\001\002\000\004" +
    "\020\u02cc\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\004\013\u02ce\001\002\000\010\027\ufffd\050\005" +
    "\051\007\001\002\000\004\027\u02d0\001\002\000\010\006" +
    "\ufffd\050\005\051\007\001\002\000\004\006\u02d2\001\002" +
    "\000\010\050\005\051\007\052\ufffd\001\002\000\004\052" +
    "\u02d4\001\002\000\010\005\uffba\050\uffba\051\uffba\001\002" +
    "\000\004\006\u02d6\001\002\000\010\020\ufffd\050\005\051" +
    "\007\001\002\000\004\020\u02d8\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\004\013\u02db\001\002\000" +
    "\010\005\uffbe\050\uffbe\051\uffbe\001\002\000\010\026\ufffd" +
    "\050\005\051\007\001\002\000\004\026\u02dd\001\002\000" +
    "\010\006\ufffd\050\005\051\007\001\002\000\004\006\u02df" +
    "\001\002\000\010\020\ufffd\050\005\051\007\001\002\000" +
    "\004\020\u02e1\001\002\000\010\013\ufffd\050\005\051\007" +
    "\001\002\000\004\013\u02e3\001\002\000\010\027\ufffd\050" +
    "\005\051\007\001\002\000\004\027\u02e5\001\002\000\010" +
    "\006\ufffd\050\005\051\007\001\002\000\004\006\u02e7\001" +
    "\002\000\010\050\005\051\007\052\ufffd\001\002\000\004" +
    "\052\u02e9\001\002\000\010\005\uffbb\050\uffbb\051\uffbb\001" +
    "\002\000\004\005\u02eb\001\002\000\032\005\uffb2\013\uffb2" +
    "\014\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\030" +
    "\uffb2\050\uffb2\051\uffb2\054\uffb2\001\002\000\004\013\u02ed" +
    "\001\002\000\010\007\ufffd\050\005\051\007\001\002\000" +
    "\004\007\u0246\001\002\000\010\005\uffd9\050\uffd9\051\uffd9" +
    "\001\002\000\004\013\u02f1\001\002\000\012\007\ufffd\036" +
    "\ufffd\050\005\051\007\001\002\000\006\007\u0246\036\314" +
    "\001\002\000\010\005\uffe0\050\uffe0\051\uffe0\001\002\000" +
    "\010\013\ufffd\050\005\051\007\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\004\013\u02f7\001\002\000" +
    "\010\036\ufffd\050\005\051\007\001\002\000\010\005\uffdd" +
    "\050\uffdd\051\uffdd\001\002\000\004\013\u02fa\001\002\000" +
    "\010\007\ufffd\050\005\051\007\001\002\000\010\005\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\004\013\u02fd\001\002\000" +
    "\014\007\ufffd\031\ufffd\035\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\007" +
    "\u0246\031\043\035\u0143\001\002\000\004\002\ufff5\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\004\013\u0304\001\002" +
    "\000\012\031\ufffd\035\ufffd\050\005\051\007\001\002\000" +
    "\004\002\uffd6\001\002\000\012\005\ufffd\013\ufffd\050\005" +
    "\051\007\001\002\000\010\013\ufffd\050\005\051\007\001" +
    "\002\000\004\013\u0309\001\002\000\010\031\ufffd\050\005" +
    "\051\007\001\002\000\010\005\ufffd\050\005\051\007\001" +
    "\002\000\004\005\u030c\001\002\000\010\002\ufffd\050\005" +
    "\051\007\001\002\000\004\002\uffd2\001\002\000\006\005" +
    "\u0211\013\u0212\001\002\000\004\002\uffd1\001\002\000\004" +
    "\013\u0311\001\002\000\012\007\ufffd\031\ufffd\050\005\051" +
    "\007\001\002\000\010\005\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\004\013\u0316\001\002" +
    "\000\010\031\ufffd\050\005\051\007\001\002\000\010\005" +
    "\uffcf\050\uffcf\051\uffcf\001\002\000\004\013\u0319\001\002" +
    "\000\010\007\ufffd\050\005\051\007\001\002\000\010\005" +
    "\uffd0\050\uffd0\051\uffd0\001\002\000\004\005\u031c\001\002" +
    "\000\010\002\ufffd\050\005\051\007\001\002\000\004\002" +
    "\uffd5\001\002\000\004\013\u031f\001\002\000\012\007\ufffd" +
    "\035\ufffd\050\005\051\007\001\002\000\004\002\uffd7\001" +
    "\002\000\006\007\u0246\035\u0143\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\012\005\ufffd\013\ufffd\050" +
    "\005\051\007\001\002\000\006\005\u0211\013\u0212\001\002" +
    "\000\004\002\uffd4\001\002\000\004\013\u0327\001\002\000" +
    "\010\007\ufffd\050\005\051\007\001\002\000\010\005\ufffd" +
    "\050\005\051\007\001\002\000\004\005\u032a\001\002\000" +
    "\010\002\ufffd\050\005\051\007\001\002\000\004\002\uffd3" +
    "\001\002\000\004\013\u032d\001\002\000\014\007\ufffd\035" +
    "\ufffd\036\ufffd\050\005\051\007\001\002\000\010\007\u0246" +
    "\035\u0143\036\314\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\002\ufff7\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\013\u0334\001\002\000\012\035\ufffd" +
    "\036\ufffd\050\005\051\007\001\002\000\004\002\uffe9\001" +
    "\002\000\012\005\ufffd\013\ufffd\050\005\051\007\001\002" +
    "\000\010\013\ufffd\050\005\051\007\001\002\000\004\013" +
    "\u0339\001\002\000\010\036\ufffd\050\005\051\007\001\002" +
    "\000\010\005\ufffd\050\005\051\007\001\002\000\004\005" +
    "\u033c\001\002\000\010\002\ufffd\050\005\051\007\001\002" +
    "\000\004\002\uffe6\001\002\000\006\005\u0211\013\u0212\001" +
    "\002\000\004\002\uffe5\001\002\000\004\013\u0341\001\002" +
    "\000\012\007\ufffd\036\ufffd\050\005\051\007\001\002\000" +
    "\010\005\ufffd\050\005\051\007\001\002\000\010\013\ufffd" +
    "\050\005\051\007\001\002\000\010\013\ufffd\050\005\051" +
    "\007\001\002\000\004\013\u0346\001\002\000\010\036\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uffe3\050\uffe3\051" +
    "\uffe3\001\002\000\004\013\u0349\001\002\000\010\007\ufffd" +
    "\050\005\051\007\001\002\000\010\005\uffe4\050\uffe4\051" +
    "\uffe4\001\002\000\004\005\u034c\001\002\000\010\002\ufffd" +
    "\050\005\051\007\001\002\000\004\002\uffe8\001\002\000" +
    "\004\013\u034f\001\002\000\012\007\ufffd\035\ufffd\050\005" +
    "\051\007\001\002\000\004\002\uffe7\001\002\000\010\013" +
    "\ufffd\050\005\051\007\001\002\000\012\005\ufffd\013\ufffd" +
    "\050\005\051\007\001\002\000\006\005\u0211\013\u0212\001" +
    "\002\000\004\002\uffe1\001\002\000\004\013\u0356\001\002" +
    "\000\010\007\ufffd\050\005\051\007\001\002\000\010\005" +
    "\ufffd\050\005\051\007\001\002\000\004\005\u0359\001\002" +
    "\000\010\002\ufffd\050\005\051\007\001\002\000\004\002" +
    "\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0358\000\006\002\005\010\003\001\001\000\002\001" +
    "\001\000\004\010\011\001\001\000\002\001\001\000\004" +
    "\010\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\020\004\013\005\017\006\015" +
    "\007\016\010\014\001\001\000\004\010\u032b\001\001\000" +
    "\002\001\001\000\004\010\u02fb\001\001\000\002\001\001" +
    "\000\004\010\u0227\001\001\000\004\010\021\001\001\000" +
    "\002\001\001\000\014\004\023\005\027\006\025\010\024" +
    "\011\026\001\001\000\004\010\u0219\001\001\000\002\001" +
    "\001\000\004\010\u0136\001\001\000\002\001\001\000\004" +
    "\010\030\001\001\000\002\001\001\000\012\004\033\006" +
    "\035\010\034\016\032\001\001\000\004\010\u0133\001\001" +
    "\000\004\010\u012f\001\001\000\002\001\001\000\004\010" +
    "\036\001\001\000\002\001\001\000\006\004\041\010\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\043\001\001\000\002\001\001\000\004\010\045\001\001" +
    "\000\002\001\001\000\004\010\047\001\001\000\002\001" +
    "\001\000\020\010\051\052\056\053\055\054\054\055\053" +
    "\056\052\057\057\001\001\000\002\001\001\000\004\010" +
    "\273\001\001\000\004\010\242\001\001\000\004\010\166" +
    "\001\001\000\004\010\071\001\001\000\004\010\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\062" +
    "\001\001\000\004\060\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\066\001\001\000\002\001\001" +
    "\000\020\010\051\052\056\053\055\054\054\055\053\056" +
    "\052\057\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\076\054\075\055\074\056\073\064\077\001" +
    "\001\000\004\010\152\001\001\000\004\010\135\001\001" +
    "\000\004\010\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\113\001\001\000\004\010\107\001\001" +
    "\000\004\010\103\001\001\000\002\001\001\000\004\010" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\124\055\122\056\121\070\123\001\001\000\004" +
    "\010\131\001\001\000\004\010\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\130" +
    "\056\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\134\055\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\142\054\141\056\137\071\140\001\001\000\004\010\146" +
    "\001\001\000\002\001\001\000\004\010\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\130\056\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\151\054\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\157\054\156\055\155\072" +
    "\154\001\001\000\002\001\001\000\004\010\163\001\001" +
    "\000\004\010\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\134\055\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\151\054\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\173\053\172" +
    "\055\171\056\170\065\174\001\001\000\004\010\226\001" +
    "\001\000\004\010\211\001\001\000\004\010\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\176\001" +
    "\001\000\002\001\001\000\004\010\200\001\001\000\002" +
    "\001\001\000\004\010\202\001\001\000\002\001\001\000" +
    "\004\010\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\124\055\122\056\121\070" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\215\053\214\056\213\073\216\001\001\000\004\010" +
    "\222\001\001\000\004\010\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\130\056" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\225\053\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\232\053\231\055\230" +
    "\074\233\001\001\000\004\010\237\001\001\000\004\010" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\134\055\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\225\053\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\250\053" +
    "\246\054\245\056\244\066\247\001\001\000\004\010\257" +
    "\001\001\000\004\010\254\001\001\000\004\010\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\142\054\141\056\137\071\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\215\053\214" +
    "\056\213\073\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\263\053\262\054\261\075\264\001\001" +
    "\000\004\010\270\001\001\000\004\010\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\151\054\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\225\053\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\301\053\277\054\276\055" +
    "\275\067\300\001\001\000\004\010\310\001\001\000\004" +
    "\010\305\001\001\000\004\010\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\157" +
    "\054\156\055\155\072\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\232\053\231\055\230\074\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\263\053\262\054\261\075\312\001\001\000\002\001\001" +
    "\000\004\010\314\001\001\000\002\001\001\000\004\010" +
    "\316\001\001\000\002\001\001\000\004\010\320\001\001" +
    "\000\002\001\001\000\004\010\322\001\001\000\014\126" +
    "\331\127\327\130\325\131\324\134\332\001\001\000\004" +
    "\010\u011e\001\001\000\004\010\u0110\001\001\000\004\010" +
    "\u0102\001\001\000\004\010\372\001\001\000\004\010\360" +
    "\001\001\000\004\010\351\001\001\000\002\001\001\000" +
    "\004\010\333\001\001\000\002\001\001\000\004\010\335" +
    "\001\001\000\010\130\340\131\337\141\336\001\001\000" +
    "\002\001\001\000\004\010\345\001\001\000\004\010\341" +
    "\001\001\000\002\001\001\000\004\010\343\001\001\000" +
    "\004\131\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\347\001\001\000\004\130\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\353\001\001" +
    "\000\004\135\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\362\001\001\000\004\136\365\001\001\000" +
    "\002\001\001\000\004\010\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\370\001\001\000\014\126" +
    "\371\127\327\130\325\131\324\134\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\374\001\001\000" +
    "\002\001\001\000\004\010\376\001\001\000\002\001\001" +
    "\000\004\010\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0104\001\001\000\010" +
    "\131\u0105\134\u0107\137\u0106\001\001\000\004\010\u010c\001" +
    "\001\000\002\001\001\000\004\010\u0108\001\001\000\002" +
    "\001\001\000\004\010\u010a\001\001\000\004\131\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u010e" +
    "\001\001\000\004\134\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0112\001\001\000\010\130\u0114" +
    "\134\u0115\140\u0113\001\001\000\002\001\001\000\004\010" +
    "\u011a\001\001\000\004\010\u0116\001\001\000\002\001\001" +
    "\000\004\010\u0118\001\001\000\004\130\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u011c\001\001" +
    "\000\004\134\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0120\001\001\000\002\001\001\000\004" +
    "\010\u0122\001\001\000\004\132\u0123\001\001\000\002\001" +
    "\001\000\004\010\u0125\001\001\000\002\001\001\000\004" +
    "\010\u0127\001\001\000\002\001\001\000\004\010\u0129\001" +
    "\001\000\004\133\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u012d\001\001\000\004\132\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u0132" +
    "\010\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\u0139\005\u013b\010\u013a\017" +
    "\u0138\001\001\000\002\001\001\000\004\010\u020f\001\001" +
    "\000\002\001\001\000\004\010\u013c\001\001\000\002\001" +
    "\001\000\006\004\u013e\010\040\001\001\000\004\010\u013f" +
    "\001\001\000\002\001\001\000\004\010\u0141\001\001\000" +
    "\002\001\001\000\004\010\u0143\001\001\000\002\001\001" +
    "\000\004\010\u0145\001\001\000\002\001\001\000\004\010" +
    "\u0147\001\001\000\002\001\001\000\004\010\u0149\001\001" +
    "\000\016\076\u014e\103\u014f\105\u014c\106\u0153\107\u0150\110" +
    "\u014b\001\001\000\004\010\u0206\001\001\000\004\010\u01f1" +
    "\001\001\000\004\010\u01d2\001\001\000\004\010\u01ce\001" +
    "\001\000\006\010\u01c6\104\u01c7\001\001\000\002\001\001" +
    "\000\004\010\u0197\001\001\000\004\010\u0193\001\001\000" +
    "\004\010\u018f\001\001\000\004\010\u0154\001\001\000\002" +
    "\001\001\000\004\010\u0156\001\001\000\016\101\u015a\105" +
    "\u0158\107\u015b\110\u0157\112\u015c\123\u0159\001\001\000\004" +
    "\010\u0181\001\001\000\004\010\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u015f\001\001\000" +
    "\010\105\u0162\110\u0160\122\u0161\001\001\000\004\010\u0169" +
    "\001\001\000\002\001\001\000\004\010\u0163\001\001\000" +
    "\002\001\001\000\004\010\u0165\001\001\000\004\110\u0166" +
    "\001\001\000\004\010\u0167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u016b\001\001" +
    "\000\004\010\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0170\001\001\000\010" +
    "\107\u0171\110\u0172\115\u0173\001\001\000\004\010\u017b\001" +
    "\001\000\004\010\u0174\001\001\000\002\001\001\000\004" +
    "\100\u0177\001\001\000\002\001\001\000\006\010\134\055" +
    "\u0178\001\001\000\002\001\001\000\004\010\u0179\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u017d\001\001\000\004\110\u017e\001\001\000\004" +
    "\010\u017f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0183\001\001\000\010\105\u0186" +
    "\107\u0184\121\u0185\001\001\000\004\010\u0189\001\001\000" +
    "\002\001\001\000\004\010\u0187\001\001\000\004\100\u0188" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u018b\001\001\000\004\105\u018c\001\001\000\004\010\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0195\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0199\001\001\000\012\105\u019b\106\u019d\110\u019a\113" +
    "\u019c\001\001\000\004\010\u01b4\001\001\000\004\010\u01a2" +
    "\001\001\000\002\001\001\000\004\010\u019e\001\001\000" +
    "\002\001\001\000\004\010\u01a0\001\001\000\010\105\u0162" +
    "\110\u0160\122\u01a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01a4\001\001\000\010\106\u01a7\110\u01a5" +
    "\116\u01a6\001\001\000\004\010\u01ae\001\001\000\002\001" +
    "\001\000\004\010\u01a8\001\001\000\002\001\001\000\004" +
    "\010\u01aa\001\001\000\004\110\u01ab\001\001\000\004\010" +
    "\u01ac\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u01b0\001\001\000\004\106\u01b1\001" +
    "\001\000\004\010\u01b2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u01b6\001\001\000" +
    "\010\105\u01b8\106\u01b9\124\u01b7\001\001\000\002\001\001" +
    "\000\004\010\u01c0\001\001\000\004\010\u01ba\001\001\000" +
    "\002\001\001\000\004\010\u01bc\001\001\000\004\105\u01bd" +
    "\001\001\000\004\010\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u01c2\001\001" +
    "\000\004\106\u01c3\001\001\000\004\010\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u01ca\001\001\000" +
    "\002\001\001\000\004\010\u01cc\001\001\000\016\076\u014e" +
    "\103\u01cd\105\u014c\106\u0153\107\u0150\110\u014b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u01d4\001\001\000\016\077\u01d6\106\u01d9\107\u01d7" +
    "\110\u01d5\111\u01da\117\u01d8\001\001\000\004\010\u01e3\001" +
    "\001\000\002\001\001\000\004\010\u01df\001\001\000\002" +
    "\001\001\000\004\010\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u01dd\001\001\000\010\107\u0171" +
    "\110\u0172\115\u01de\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01e1\001\001\000\010\106\u01a7\110\u01a5" +
    "\116\u01e2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u01e5\001\001\000\010\106\u01e8\107\u01e6\120\u01e7" +
    "\001\001\000\004\010\u01eb\001\001\000\002\001\001\000" +
    "\004\010\u01e9\001\001\000\004\100\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u01ed\001\001\000" +
    "\004\106\u01ee\001\001\000\004\010\u01ef\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u01f3\001\001\000\016\102\u01f6\105\u01f4\106\u01f9\107\u01f7" +
    "\114\u01f8\125\u01f5\001\001\000\004\010\u0202\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u01fe\001\001" +
    "\000\002\001\001\000\004\010\u01fa\001\001\000\002\001" +
    "\001\000\004\010\u01fc\001\001\000\010\105\u0186\107\u0184" +
    "\121\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0200\001\001\000\010\105\u01b8\106\u01b9\124\u0201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0204\001\001\000\010\106\u01e8\107\u01e6\120\u0205\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0208\001" +
    "\001\000\002\001\001\000\004\010\u020a\001\001\000\002" +
    "\001\001\000\004\142\u020c\001\001\000\004\010\u020d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0212" +
    "\001\001\000\004\010\u0218\001\001\000\006\005\u0214\010" +
    "\u0213\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0215\001\001\000\002\001\001\000\004\010\u0217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\u021e\006\u021d\010\u021b\015\u021c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0225\001\001" +
    "\000\004\010\u021f\001\001\000\002\001\001\000\006\006" +
    "\u0221\010\u0131\001\001\000\004\010\u0222\001\001\000\002" +
    "\001\001\000\004\010\u0224\001\001\000\002\001\001\000" +
    "\004\061\u0226\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u022d\004\u0229\006\u022b\010\u022a\013\u022c\001" +
    "\001\000\004\010\u02ef\001\001\000\002\001\001\000\004" +
    "\010\u023c\001\001\000\004\010\u0239\001\001\000\004\010" +
    "\u022e\001\001\000\002\001\001\000\012\004\u0230\006\u0232" +
    "\010\034\024\u0231\001\001\000\004\010\u0236\001\001\000" +
    "\002\001\001\000\004\010\u0233\001\001\000\002\001\001" +
    "\000\006\004\u0235\010\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0238\010\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u023b\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u0241\004\u023f" +
    "\010\u0240\025\u023e\001\001\000\002\001\001\000\004\010" +
    "\u02eb\001\001\000\002\001\001\000\004\010\u0242\001\001" +
    "\000\002\001\001\000\006\004\u0244\010\040\001\001\000" +
    "\002\001\001\000\004\010\u0246\001\001\000\002\001\001" +
    "\000\004\010\u0248\001\001\000\002\001\001\000\030\032" +
    "\u024d\033\u024c\034\u024b\042\u0260\043\u025b\044\u025c\045\u0251" +
    "\046\u0252\047\u0256\050\u0259\051\u0257\001\001\000\004\010" +
    "\u02a2\001\001\000\030\032\u02a1\033\u024c\034\u024b\042\u0260" +
    "\043\u025b\044\u025c\045\u0251\046\u0252\047\u0256\050\u0259\051" +
    "\u0257\001\001\000\030\032\u02a0\033\u024c\034\u024b\042\u0260" +
    "\043\u025b\044\u025c\045\u0251\046\u0252\047\u0256\050\u0259\051" +
    "\u0257\001\001\000\002\001\001\000\004\010\u029d\001\001" +
    "\000\004\010\u0299\001\001\000\004\010\u0291\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u028d\001\001" +
    "\000\004\010\u0289\001\001\000\004\010\u0285\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0265\001\001" +
    "\000\002\001\001\000\004\010\u0261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0267\001\001\000\002\001" +
    "\001\000\004\010\u0269\001\001\000\004\035\u026b\001\001" +
    "\000\004\010\u027a\001\001\000\004\010\u0278\001\001\000" +
    "\004\010\u026d\001\001\000\002\001\001\000\004\010\u026f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0272\001\001\000\002\001\001\000\004\010\u0274\001\001" +
    "\000\002\001\001\000\004\010\u0276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u027c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u027f\001\001\000\002" +
    "\001\001\000\004\010\u0281\001\001\000\002\001\001\000" +
    "\004\010\u0283\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0287\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u028b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u028f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0293\001\001\000" +
    "\002\001\001\000\004\010\u0295\001\001\000\002\001\001" +
    "\000\004\010\u0297\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u029b\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\034\u029e\042\u0260\043" +
    "\u025b\044\u025c\045\u0251\046\u0252\047\u0256\050\u0259\051\u0257" +
    "\001\001\000\030\032\u029f\033\u024c\034\u024b\042\u0260\043" +
    "\u025b\044\u025c\045\u0251\046\u0252\047\u0256\050\u0259\051\u0257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u02a4\001\001\000\002" +
    "\001\001\000\004\010\u02a6\001\001\000\004\036\u02a7\001" +
    "\001\000\004\010\u02e9\001\001\000\004\010\u02d4\001\001" +
    "\000\004\010\u02bf\001\001\000\004\010\u02ab\001\001\000" +
    "\002\001\001\000\004\010\u02ad\001\001\000\002\001\001" +
    "\000\004\041\u02af\001\001\000\002\001\001\000\004\010" +
    "\u02b1\001\001\000\002\001\001\000\004\010\u02b3\001\001" +
    "\000\002\001\001\000\004\010\u02b5\001\001\000\002\001" +
    "\001\000\004\010\u02b7\001\001\000\002\001\001\000\004" +
    "\010\u02b9\001\001\000\002\001\001\000\004\010\u02bb\001" +
    "\001\000\002\001\001\000\004\010\u02bd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u02c1\001\001\000\002\001\001\000\004\010\u02c3\001\001" +
    "\000\004\040\u02c4\001\001\000\002\001\001\000\004\010" +
    "\u02c6\001\001\000\002\001\001\000\004\010\u02c8\001\001" +
    "\000\002\001\001\000\004\010\u02ca\001\001\000\002\001" +
    "\001\000\004\010\u02cc\001\001\000\002\001\001\000\004" +
    "\010\u02ce\001\001\000\002\001\001\000\004\010\u02d0\001" +
    "\001\000\002\001\001\000\004\010\u02d2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u02d6\001\001\000\002\001\001\000\004\010\u02d8\001\001" +
    "\000\004\037\u02d9\001\001\000\002\001\001\000\004\010" +
    "\u02db\001\001\000\002\001\001\000\004\010\u02dd\001\001" +
    "\000\002\001\001\000\004\010\u02df\001\001\000\002\001" +
    "\001\000\004\010\u02e1\001\001\000\002\001\001\000\004" +
    "\010\u02e3\001\001\000\002\001\001\000\004\010\u02e5\001" +
    "\001\000\002\001\001\000\004\010\u02e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\u02ee\010\u02ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\u02f4\006\u02f3\010\u02f1\023\u02f2\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u02f8\001\001\000" +
    "\004\010\u02f5\001\001\000\002\001\001\000\006\006\u02f7" +
    "\010\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u02fa\010\u02ed\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0301\004\u02fd\005\u0300\010\u02fe\014" +
    "\u02ff\001\001\000\004\010\u031d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u030f\001\001\000\004\010" +
    "\u0302\001\001\000\002\001\001\000\012\004\u0305\005\u0306" +
    "\010\u013a\027\u0304\001\001\000\002\001\001\000\004\010" +
    "\u030d\001\001\000\004\010\u0307\001\001\000\002\001\001" +
    "\000\006\004\u0309\010\040\001\001\000\004\010\u030a\001" +
    "\001\000\002\001\001\000\004\010\u030c\001\001\000\002" +
    "\001\001\000\004\061\u030e\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u0313\004\u0312\010\u0240\030\u0311" +
    "\001\001\000\004\010\u031a\001\001\000\004\010\u0317\001" +
    "\001\000\004\010\u0314\001\001\000\002\001\001\000\006" +
    "\004\u0316\010\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u0319\010\u02ed\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u031c\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u0322\005\u0321\010\u0320" +
    "\026\u031f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0325\001\001\000\004\010\u0323\001\001\000\004" +
    "\061\u0324\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u0327\010\u02ed\001\001\000\004\010\u0328\001\001" +
    "\000\002\001\001\000\004\010\u032a\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0331\005\u0330\006\u032e" +
    "\010\u032d\012\u032f\001\001\000\002\001\001\000\004\010" +
    "\u034d\001\001\000\002\001\001\000\004\010\u033f\001\001" +
    "\000\004\010\u0332\001\001\000\002\001\001\000\012\005" +
    "\u0336\006\u0335\010\u021b\020\u0334\001\001\000\002\001\001" +
    "\000\004\010\u033d\001\001\000\004\010\u0337\001\001\000" +
    "\002\001\001\000\006\006\u0339\010\u0131\001\001\000\004" +
    "\010\u033a\001\001\000\002\001\001\000\004\010\u033c\001" +
    "\001\000\002\001\001\000\004\061\u033e\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0343\006\u0342\010" +
    "\u02f1\021\u0341\001\001\000\004\010\u034a\001\001\000\004" +
    "\010\u0347\001\001\000\004\010\u0344\001\001\000\002\001" +
    "\001\000\006\006\u0346\010\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0349\010\u02ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u034c\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u0351\005" +
    "\u0350\010\u0320\022\u034f\001\001\000\002\001\001\000\004" +
    "\010\u0354\001\001\000\004\010\u0352\001\001\000\004\061" +
    "\u0353\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\u0356\010\u02ed\001\001\000\004\010\u0357\001\001\000" +
    "\002\001\001\000\004\010\u0359\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String nombre_mapa;
    public static Dimension dimension;
    public static boolean azar_,mapaciego_,acumular_;
    public static int finalizacion_,planetasNeutrales_;
    public static planeta_neutral neutral_;
    public static Object[] pbj;
    public static ArrayList<planeta_neutral> array_neutrales;
    public static ArrayList<planeta_jugador> array_planetas;
    public static ArrayList<planeta_jugador> array_planetas_;
    public static ArrayList<jugador> array_jugadores;
    public static String tipo_player;
    public static String nombre_player;
    public static String neutralesNombre_;
    public static int neutralesNaves_,neutralesProduc_=-1;
    public static double neutralesMuertes; 
   
  //  public static boolean validaciones1_,boolean validaciones2_;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // PLAYERS8 ::= human 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // PLAYERS8 ::= easy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // PLAYERS8 ::= hard 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // PLAYERS7 ::= type ENTERSPACE dosPuntos ENTERSPACE PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // PLAYERS6 ::= coma ENTERSPACE PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // PLAYERS6 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // PLAYERS5 ::= abreComilla ENTERSPACE id ENTERSPACE cierraComilla ENTERSPACE PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // PLAYERS4 ::= earths ENTERSPACE dosPuntos ENTERSPACE abreCor ENTERSPACE PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PLAYERS3 ::= name ENTERSPACE dosPuntos ENTERSPACE abreComilla ENTERSPACE id ENTERSPACE cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.nombre_player=(String )e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PLAYERSAUX3 ::= PLAYERS3 ENTERSPACE coma ENTERSPACE PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PLAYERSAUX3 ::= PLAYERS4 ENTERSPACE coma ENTERSPACE PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PLAYERSAUX2 ::= PLAYERS7 ENTERSPACE coma ENTERSPACE PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PLAYERSAUX2 ::= PLAYERS3 ENTERSPACE coma ENTERSPACE PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PLAYERSAUX1 ::= PLAYERS7 ENTERSPACE coma ENTERSPACE PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PLAYERSAUX1 ::= PLAYERS4 ENTERSPACE coma ENTERSPACE PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PLAYERS2 ::= PLAYERS7 ENTERSPACE coma ENTERSPACE PLAYERSAUX3 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
parser.array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PLAYERS2 ::= PLAYERS4 ENTERSPACE coma ENTERSPACE PLAYERSAUX2 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
parser.array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PLAYERS2 ::= PLAYERS3 ENTERSPACE coma ENTERSPACE PLAYERSAUX1 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
parser.array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PLAYERS9 ::= coma ENTERSPACE abreParentesis ENTERSPACE PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PLAYERS9 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PLAYERS1 ::= PLAYERS2 ENTERSPACE cierraParentesis ENTERSPACE PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OPPN5 ::= OPPNAUX13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPPN5 ::= OPP41 ENTERSPACE coma ENTERSPACE OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPPNAUX4 ::= OPPN5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPPNAUX4 ::= OPP31 ENTERSPACE coma ENTERSPACE OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPPNAUX4 ::= OPP21 ENTERSPACE coma ENTERSPACE OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPPNAUX12 ::= OPP31 ENTERSPACE coma ENTERSPACE OPP21 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPPNAUX12 ::= OPP21 ENTERSPACE coma ENTERSPACE OPP31 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPPNAUX3 ::= OPP51 ENTERSPACE coma ENTERSPACE OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPPNAUX3 ::= OPP31 ENTERSPACE coma ENTERSPACE OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OPPNAUX3 ::= OPP21 ENTERSPACE coma ENTERSPACE OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPPNAUX10 ::= OPP51 ENTERSPACE coma OPP21 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPPNAUX10 ::= OPP21 ENTERSPACE coma ENTERSPACE OPP51 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPPNAUX9 ::= OPP21 ENTERSPACE OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPPNAUX9 ::= OPP41 ENTERSPACE coma ENTERSPACE OPP21 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OPPN4 ::= OPPNAUX11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPPN4 ::= OPP41 ENTERSPACE coma ENTERSPACE OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPPNAUX2 ::= OPP51 ENTERSPACE coma ENTERSPACE OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPPNAUX2 ::= OPPN4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPPNAUX2 ::= OPP21 ENTERSPACE coma ENTERSPACE OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPPN3 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPPN3 ::= coma OPP4 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPPNAUX8 ::= OPP31 ENTERSPACE OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPPNAUX8 ::= OPP41 ENTERSPACE coma ENTERSPACE OPP31 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPPNAUX5 ::= OPP51 ENTERSPACE OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPPNAUX5 ::= OPP41 ENTERSPACE coma ENTERSPACE OPP51 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPPNAUX6 ::= OPP51 ENTERSPACE coma ENTERSPACE OPP31 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPPNAUX6 ::= OPP31 ENTERSPACE coma ENTERSPACE OPP51 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPPN2 ::= OPPNAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPPN2 ::= OPP41 ENTERSPACE coma ENTERSPACE OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPPNAUX1 ::= OPP51 ENTERSPACE coma ENTERSPACE OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPPNAUX1 ::= OPPN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPPNAUX1 ::= OPP31 ENTERSPACE coma ENTERSPACE OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPPN1 ::= OPP51 ENTERSPACE coma ENTERSPACE OPPNAUX4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_));
parser.neutralesProduc_=-1;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPPN1 ::= OPP41 ENTERSPACE coma ENTERSPACE OPPNAUX3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPPN1 ::= OPP31 ENTERSPACE coma ENTERSPACE OPPNAUX2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=-1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPPN1 ::= OPP21 ENTERSPACE coma ENTERSPACE OPPNAUX1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=-1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPP51 ::= deaths ENTERSPACE dosPuntos ENTERSPACE decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPP41 ::= produc ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPP31 ::= ships ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPP21 ::= name ENTERSPACE dosPuntos ENTERSPACE abreComilla ENTERSPACE id NT$0 ENTERSPACE cierraComilla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPPN01 ::= ENTERSPACE coma ENTERSPACE abreParentesis ENTERSPACE OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPPN01 ::= ENTERSPACE cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPPN0 ::= OPPN1 OPPN01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN0",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPPAUX4 ::= OPP4 ENTERSPACE coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPPAUX4 ::= OPP3 ENTERSPACE coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPPAUX4 ::= OPP2 ENTERSPACE coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPPAUX10 ::= OPP3 ENTERSPACE coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPPAUX10 ::= OPP2 ENTERSPACE coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPPAUX3 ::= OPP5 ENTERSPACE coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPPAUX3 ::= OPP3 ENTERSPACE coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPPAUX3 ::= OPP2 ENTERSPACE coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPPAUX9 ::= OPP2 ENTERSPACE coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPPAUX9 ::= OPP4 ENTERSPACE coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPPAUX8 ::= OPP5 ENTERSPACE coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPPAUX8 ::= OPP2 ENTERSPACE coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPPAUX2 ::= OPP5 ENTERSPACE coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPPAUX2 ::= OPP4 ENTERSPACE coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPPAUX2 ::= OPP2 ENTERSPACE coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPPAUX7 ::= OPP3 ENTERSPACE coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPPAUX7 ::= OPP4 ENTERSPACE coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPPAUX6 ::= OPP5 ENTERSPACE coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPPAUX6 ::= OPP3 ENTERSPACE coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPPAUX5 ::= OPP5 ENTERSPACE coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPPAUX5 ::= OPP4 ENTERSPACE coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPPAUX1 ::= OPP5 ENTERSPACE coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPPAUX1 ::= OPP4 ENTERSPACE coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPPAUX1 ::= OPP3 ENTERSPACE coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPP1 ::= OPP5 ENTERSPACE coma OPPAUX4 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPP1 ::= OPP4 ENTERSPACE coma OPPAUX3 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPP1 ::= OPP3 ENTERSPACE coma OPPAUX2 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPP1 ::= OPP2 ENTERSPACE coma OPPAUX1 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPP5 ::= ENTERSPACE deaths ENTERSPACE dosPuntos ENTERSPACE decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPP4 ::= ENTERSPACE produc ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPP3 ::= ENTERSPACE ships ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPP2 ::= ENTERSPACE name ENTERSPACE dosPuntos ENTERSPACE abreComilla ENTERSPACE id ENTERSPACE cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.neutralesNombre_=(String)e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPP01 ::= coma ENTERSPACE abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPP01 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPP0 ::= OPP1 ENTERSPACE cierraParentesis ENTERSPACE OPP01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FINALIZACION ::= end ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.finalizacion_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALIZACION",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NEUTRALES ::= Neu ENTERSPACE dosPuntos ENTERSPACE abreParentesis ENTERSPACE OPM5 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ACUMULAR ::= acum ENTERSPACE dosPuntos ENTERSPACE bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.acumular_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MAPA_CIEGO ::= mapaCiego ENTERSPACE dosPuntos ENTERSPACE bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.mapaciego_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA_CIEGO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PLANETA_NEUTRALES ::= planetasNeu ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.planetasNeutrales_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AZAR_MAPA ::= azar ENTERSPACE dosPuntos ENTERSPACE bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.azar_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DIMENSIONES_MAPA ::= tamaño ENTERSPACE dosPuntos ENTERSPACE abreParentesis ENTERSPACE OPM4 ENTERSPACE cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NOMBRE_MAPA ::= name_mapa ENTERSPACE dosPuntos ENTERSPACE abreComilla ENTERSPACE id ENTERSPACE cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.nombre_mapa=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPM8 ::= coma ENTERSPACE mostrarNaves ENTERSPACE dosPuntos ENTERSPACE bool ENTERSPACE coma ENTERSPACE mostrarEstadisticas ENTERSPACE dosPuntos ENTERSPACE bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.pbj[0]=Boolean.parseBoolean((String)e);
        parser.pbj[1]=Boolean.parseBoolean((String)e2);
       
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPM7 ::= coma ENTERSPACE mostrarNaves ENTERSPACE dosPuntos ENTERSPACE bool ENTERSPACE coma ENTERSPACE produc ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.pbj[0]=Boolean.parseBoolean((String)e);
        parser.pbj[2]=Integer.parseInt((String)e2);
        
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPM6 ::= coma ENTERSPACE mostrarEstadisticas ENTERSPACE dosPuntos ENTERSPACE bool ENTERSPACE coma ENTERSPACE produc ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.pbj[1]=Boolean.parseBoolean((String)e);
        parser.pbj[2]=Integer.parseInt((String)e2);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPM5 ::= produc ENTERSPACE dosPuntos ENTERSPACE num OPM8 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.pbj[2]=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPM5 ::= mostrarEstadisticas ENTERSPACE dosPuntos ENTERSPACE bool ENTERSPACE OPM7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.pbj[1]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPM5 ::= mostrarNaves ENTERSPACE dosPuntos ENTERSPACE bool ENTERSPACE OPM6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.pbj[0]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPM4 ::= columns ENTERSPACE dosPuntos ENTERSPACE num coma ENTERSPACE rows ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPM4 ::= rows ENTERSPACE dosPuntos ENTERSPACE num coma ENTERSPACE columns ENTERSPACE dosPuntos ENTERSPACE num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPM3 ::= FINALIZACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPM3 ::= NEUTRALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPM3 ::= ACUMULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPM3 ::= MAPA_CIEGO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPM3 ::= PLANETA_NEUTRALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPM3 ::= AZAR_MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPM3 ::= DIMENSIONES_MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPM3 ::= NOMBRE_MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPM2 ::= enter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPM2 ::= space 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPM1 ::= coma ENTERSPACE OPM3 OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPM1 ::= OPM3 OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPM1 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPM1 ::= OPM2 OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPTIONS16 ::= MAPA ENTERSPACE coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPTIONS16 ::= PLANETAS ENTERSPACE coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPTIONS15 ::= PLANETAS ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPTIONS15 ::= PLANETAS_NEUTRALES ENTERSPACE coma PLANETAS ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPTIONS14 ::= PLANETAS_NEUTRALES ENTERSPACE coma MAPA ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPTIONS14 ::= MAPA ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPTIONS4 ::= PLANETAS_NEUTRALES ENTERSPACE coma OPTIONS16 ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPTIONS4 ::= MAPA ENTERSPACE coma OPTIONS15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPTIONS4 ::= PLANETAS ENTERSPACE coma OPTIONS14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPTIONS13 ::= MAPA ENTERSPACE coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPTIONS13 ::= PLANETAS ENTERSPACE coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPTIONS12 ::= PLANETAS ENTERSPACE coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPTIONS12 ::= JUGADORES ENTERSPACE coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPTIONS11 ::= JUGADORES ENTERSPACE coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPTIONS11 ::= MAPA ENTERSPACE coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPTIONS3 ::= JUGADORES ENTERSPACE coma OPTIONS13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPTIONS3 ::= MAPA ENTERSPACE coma OPTIONS12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTIONS3 ::= PLANETAS ENTERSPACE coma OPTIONS11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPTIONS10 ::= MAPA ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIONS10 ::= PLANETAS_NEUTRALES ENTERSPACE coma MAPA ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIONS9 ::= MAPA ENTERSPACE coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPTIONS9 ::= JUGADORES ENTERSPACE coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPTIONS8 ::= JUGADORES ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPTIONS8 ::= PLANETAS_NEUTRALES ENTERSPACE coma JUGADORES ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPTIONS2 ::= JUGADORES ENTERSPACE coma OPTIONS10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPTIONS2 ::= PLANETAS_NEUTRALES ENTERSPACE coma OPTIONS9 ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPTIONS2 ::= MAPA ENTERSPACE coma OPTIONS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPTIONS7 ::= PLANETAS ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPTIONS7 ::= PLANETAS_NEUTRALES ENTERSPACE coma PLANETAS ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPTIONS6 ::= PLANETAS ENTERSPACE coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPTIONS6 ::= JUGADORES ENTERSPACE coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPTIONS0 ::= cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPTIONS0 ::= coma PLANETAS_NEUTRALES ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPTIONS5 ::= JUGADORES ENTERSPACE OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPTIONS5 ::= PLANETAS_NEUTRALES ENTERSPACE coma JUGADORES ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPTIONS1 ::= JUGADORES ENTERSPACE coma OPTIONS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPTIONS1 ::= PLANETAS_NEUTRALES ENTERSPACE coma OPTIONS6 ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPTIONS1 ::= PLANETAS ENTERSPACE coma OPTIONS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPTIONS ::= JUGADORES ENTERSPACE coma OPTIONS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPTIONS ::= PLANETAS_NEUTRALES ENTERSPACE coma OPTIONS3 ENTERSPACE cierraParentesis ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPTIONS ::= PLANETAS ENTERSPACE coma OPTIONS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPTIONS ::= MAPA ENTERSPACE coma OPTIONS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // JUGADORES ::= ENTERSPACE players ENTERSPACE dosPuntos ENTERSPACE abreCor ENTERSPACE abreParentesis ENTERSPACE PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PLANETAS_NEUTRALES ::= ENTERSPACE planetas_Neu ENTERSPACE dosPuntos ENTERSPACE abreCor ENTERSPACE abreParentesis ENTERSPACE OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PLANETAS ::= ENTERSPACE planets ENTERSPACE dosPuntos ENTERSPACE abreCor ENTERSPACE abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAPA ::= ENTERSPACE map ENTERSPACE dosPuntos ENTERSPACE abreParentesis OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENTERSPACE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTERSPACE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ENTERSPACE ::= enter ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTERSPACE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENTERSPACE ::= space ENTERSPACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTERSPACE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTERSPACE abreParentesis OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

