
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 11:48:26 CST 2020
//----------------------------------------------------

package gramatica_juego;

  import classes.ErrorSintatico;
  import static gramatica_juego.parser.array_planetas;
import static gramatica_juego.parser.listaErrores;
import static gramatica_juego.parser.nombre_player;
import static gramatica_juego.parser.tipo_player;
import java_cup.runtime.Symbol;
import java.awt.Dimension;
import planetas_neutral.planeta_neutral;
import java.util.ArrayList;
import jugadores.dificil;
import jugadores.facil;
import jugadores.humano;
import jugadores.jugador;
import planetas.planeta_jugador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 11:48:26 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\155\003\000\002\155\003" +
    "\000\002\156\003\000\002\156\003\000\002\003\006\000" +
    "\002\003\007\000\002\003\006\000\002\004\007\000\002" +
    "\004\010\000\002\004\005\000\002\005\007\000\002\005" +
    "\010\000\002\005\007\000\002\154\003\000\002\154\003" +
    "\000\002\006\007\000\002\006\010\000\002\006\006\000" +
    "\002\006\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\006\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\006\000\002\007\005\000\002\007\004" +
    "\000\002\010\005\000\002\010\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\006\000\002\010\005\000\002" +
    "\010\004\000\002\014\006\000\002\014\004\000\002\014" +
    "\006\000\002\014\004\000\002\057\005\000\002\057\003" +
    "\000\002\057\006\000\002\057\005\000\002\057\004\000" +
    "\002\015\004\000\002\015\005\000\002\015\005\000\002" +
    "\016\006\000\002\016\004\000\002\011\005\000\002\011" +
    "\006\000\002\011\005\000\002\011\006\000\002\011\005" +
    "\000\002\017\006\000\002\017\004\000\002\017\006\000" +
    "\002\017\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\021\006\000\002\021\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\024\005\000\002\024\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\006\000\002\025\004\000\002\025\006" +
    "\000\002\026\006\000\002\026\004\000\002\027\005\000" +
    "\002\027\005\000\002\031\005\000\002\031\003\000\002" +
    "\141\004\000\002\141\003\000\002\142\005\000\002\142" +
    "\003\000\002\143\005\000\002\143\003\000\002\144\005" +
    "\000\002\144\003\000\002\145\005\000\002\145\003\000" +
    "\002\146\005\000\002\146\003\000\002\147\005\000\002" +
    "\147\003\000\002\150\003\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\150\003\000\002\150\003" +
    "\000\002\150\003\000\002\150\003\000\002\033\011\000" +
    "\002\033\011\000\002\033\012\000\002\033\011\000\002" +
    "\033\010\000\002\033\007\000\002\033\006\000\002\033" +
    "\012\000\002\033\011\000\002\033\010\000\002\033\007" +
    "\000\002\033\006\000\002\033\005\000\002\033\004\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\151\005\000\002" +
    "\151\006\000\002\151\004\000\002\152\005\000\002\152" +
    "\006\000\002\153\005\000\002\153\006\000\002\040\007" +
    "\000\002\040\010\000\002\040\007\000\002\040\006\000" +
    "\002\040\005\000\002\040\004\000\002\041\007\000\002" +
    "\041\010\000\002\041\007\000\002\041\006\000\002\041" +
    "\005\000\002\041\004\000\002\042\005\000\002\042\006" +
    "\000\002\042\004\000\002\043\005\000\002\043\006\000" +
    "\002\043\005\000\002\043\004\000\002\044\005\000\002" +
    "\044\006\000\002\045\005\000\002\045\006\000\002\045" +
    "\005\000\002\046\007\000\002\046\010\000\002\046\007" +
    "\000\002\046\006\000\002\046\005\000\002\047\005\000" +
    "\002\047\006\000\002\055\005\000\002\056\003\000\002" +
    "\056\005\000\002\051\007\000\002\051\010\000\002\051" +
    "\006\000\002\051\005\000\002\051\004\000\002\052\005" +
    "\000\002\052\006\000\002\052\005\000\002\053\005\000" +
    "\002\053\006\000\002\053\004\000\002\054\005\000\002" +
    "\054\006\000\002\054\005\000\002\054\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\066\005\000\002\066\005\000\002\067\005\000\002" +
    "\067\005\000\002\070\005\000\002\070\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\071\005" +
    "\000\002\071\005\000\002\072\005\000\002\072\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\073\005\000\002\073\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\101\004\000\002\102\003" +
    "\000\002\102\005\000\002\157\002\000\002\103\010\000" +
    "\002\160\002\000\002\103\011\000\002\161\002\000\002" +
    "\103\007\000\002\162\002\000\002\103\006\000\002\104" +
    "\005\000\002\104\006\000\002\104\005\000\002\105\005" +
    "\000\002\105\006\000\002\105\004\000\002\106\005\000" +
    "\002\106\006\000\002\106\005\000\002\106\004\000\002" +
    "\074\005\000\002\074\005\000\002\074\005\000\002\074" +
    "\005\000\002\107\005\000\002\107\003\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\075\005\000" +
    "\002\075\003\000\002\075\005\000\002\114\006\000\002" +
    "\114\006\000\002\114\006\000\002\114\004\000\002\114" +
    "\006\000\002\113\006\000\002\113\004\000\002\116\006" +
    "\000\002\116\004\000\002\076\005\000\002\076\003\000" +
    "\002\076\006\000\002\076\005\000\002\076\004\000\002" +
    "\110\005\000\002\110\003\000\002\110\005\000\002\110" +
    "\005\000\002\110\005\000\002\077\005\000\002\077\003" +
    "\000\002\077\005\000\002\117\006\000\002\117\004\000" +
    "\002\117\006\000\002\117\004\000\002\120\006\000\002" +
    "\120\006\000\002\120\006\000\002\111\005\000\002\111" +
    "\005\000\002\111\005\000\002\111\005\000\002\122\006" +
    "\000\002\122\006\000\002\122\006\000\002\122\006\000" +
    "\002\122\004\000\002\112\005\000\002\112\005\000\002" +
    "\112\003\000\002\112\005\000\002\112\005\000\002\100" +
    "\005\000\002\100\003\000\002\100\004\000\002\124\005" +
    "\000\002\124\005\000\002\124\004\000\002\134\003\000" +
    "\002\134\005\000\002\134\006\000\002\134\005\000\002" +
    "\134\004\000\002\134\004\000\002\125\005\000\002\125" +
    "\005\000\002\125\005\000\002\125\005\000\002\125\005" +
    "\000\002\135\005\000\002\135\005\000\002\135\005\000" +
    "\002\135\004\000\002\136\005\000\002\136\005\000\002" +
    "\136\005\000\002\136\004\000\002\137\005\000\002\137" +
    "\005\000\002\137\005\000\002\137\004\000\002\126\007" +
    "\000\002\126\010\000\002\126\007\000\002\126\006\000" +
    "\002\126\005\000\002\126\004\000\002\127\006\000\002" +
    "\127\007\000\002\127\006\000\002\127\005\000\002\130" +
    "\006\000\002\130\007\000\002\130\006\000\002\130\005" +
    "\000\002\130\004\000\002\131\003\000\002\131\004\000" +
    "\002\131\004\000\002\131\004\000\002\132\005\000\002" +
    "\132\006\000\002\132\005\000\002\132\004\000\002\133" +
    "\003\000\002\133\003\000\002\133\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0454\000\006\003\004\004\005\001\002\000\016\003" +
    "\017\004\u0455\007\011\013\013\031\014\035\020\001\002" +
    "\000\014\003\017\007\011\013\013\031\014\035\020\001" +
    "\002\000\004\002\007\001\002\000\004\002\001\001\002" +
    "\000\004\013\u0439\001\002\000\004\006\u0436\001\002\000" +
    "\004\013\u041b\001\002\000\012\003\u02bc\007\011\031\014" +
    "\035\020\001\002\000\004\006\u0406\001\002\000\004\013" +
    "\u03e3\001\002\000\004\002\000\001\002\000\020\004\u0106" +
    "\005\u0105\006\u0108\007\u0109\013\u0107\031\u010a\035\u010b\001" +
    "\002\000\004\006\021\001\002\000\004\040\022\001\002" +
    "\000\004\004\023\001\002\000\014\003\034\027\027\032" +
    "\024\033\035\034\033\001\002\000\004\006\u0100\001\002" +
    "\000\004\013\353\001\002\000\004\013\312\001\002\000" +
    "\004\006\310\001\002\000\006\013\304\041\303\001\002" +
    "\000\006\005\ufff3\013\ufff3\001\002\000\004\013\223\001" +
    "\002\000\004\006\221\001\002\000\026\006\215\010\055" +
    "\027\053\032\047\033\214\034\060\046\056\047\051\050" +
    "\057\051\054\001\002\000\004\006\212\001\002\000\004" +
    "\013\037\001\002\000\012\003\045\027\027\032\024\034" +
    "\033\001\002\000\004\013\203\001\002\000\004\013\174" +
    "\001\002\000\006\013\ufeeb\041\ufeeb\001\002\000\006\013" +
    "\ufef0\041\ufef0\001\002\000\004\013\162\001\002\000\026" +
    "\006\061\010\055\013\052\027\053\032\047\034\060\046" +
    "\056\047\051\050\057\051\054\001\002\000\006\013\uff0a" +
    "\041\uff0a\001\002\000\004\006\155\001\002\000\004\047" +
    "\152\001\002\000\006\011\uff17\051\uff17\001\002\000\012" +
    "\003\075\027\027\032\024\034\033\001\002\000\004\006" +
    "\065\001\002\000\004\047\ufffc\001\002\000\004\047\ufffd" +
    "\001\002\000\010\003\uff0c\005\uff0c\013\uff0c\001\002\000" +
    "\004\013\uff10\001\002\000\004\006\063\001\002\000\004" +
    "\046\062\001\002\000\010\003\uff0d\005\uff0d\013\uff0d\001" +
    "\002\000\004\046\064\001\002\000\010\003\uff0e\005\uff0e" +
    "\013\uff0e\001\002\000\004\050\066\001\002\000\004\013" +
    "\uff11\001\002\000\010\003\112\005\113\013\141\001\002" +
    "\000\010\003\112\005\113\013\114\001\002\000\006\013" +
    "\ufeea\041\ufeea\001\002\000\006\013\ufeed\041\ufeed\001\002" +
    "\000\004\013\105\001\002\000\006\013\ufeee\041\ufeee\001" +
    "\002\000\030\005\076\006\061\010\055\013\077\027\053" +
    "\032\047\034\060\046\056\047\051\050\057\051\054\001" +
    "\002\000\006\013\ufee6\041\ufee6\001\002\000\010\003\101" +
    "\032\024\034\033\001\002\000\004\005\104\001\002\000" +
    "\020\006\061\010\055\032\047\034\060\046\056\047\051" +
    "\051\054\001\002\000\004\005\103\001\002\000\006\013" +
    "\ufee7\041\ufee7\001\002\000\006\013\ufee3\041\ufee3\001\002" +
    "\000\010\003\101\032\024\034\033\001\002\000\004\005" +
    "\111\001\002\000\004\005\110\001\002\000\006\013\ufee9" +
    "\041\ufee9\001\002\000\006\013\ufefa\041\ufefa\001\002\000" +
    "\012\003\133\005\134\013\135\027\121\001\002\000\006" +
    "\013\ufef5\041\ufef5\001\002\000\010\003\117\027\121\034" +
    "\033\001\002\000\006\013\ufee8\041\ufee8\001\002\000\004" +
    "\005\131\001\002\000\014\006\061\027\126\034\060\046" +
    "\056\050\125\001\002\000\004\005\124\001\002\000\004" +
    "\006\122\001\002\000\004\050\123\001\002\000\006\005" +
    "\uff43\013\uff43\001\002\000\006\013\ufee5\041\ufee5\001\002" +
    "\000\006\005\uff41\013\uff41\001\002\000\004\006\127\001" +
    "\002\000\004\050\130\001\002\000\006\005\uff42\013\uff42" +
    "\001\002\000\006\013\ufef6\041\ufef6\001\002\000\004\005" +
    "\140\001\002\000\006\027\126\050\125\001\002\000\006" +
    "\013\ufef2\041\ufef2\001\002\000\006\003\133\027\121\001" +
    "\002\000\004\005\137\001\002\000\006\013\ufef4\041\ufef4" +
    "\001\002\000\006\013\ufef3\041\ufef3\001\002\000\010\003" +
    "\143\027\121\032\024\001\002\000\006\013\ufef9\041\ufef9" +
    "\001\002\000\016\010\055\027\126\032\047\047\051\050" +
    "\125\051\054\001\002\000\004\005\145\001\002\000\006" +
    "\013\ufee4\041\ufee4\001\002\000\006\011\147\051\150\001" +
    "\002\000\012\003\ufffb\005\ufffb\013\ufffb\041\ufffb\001\002" +
    "\000\012\003\ufffa\005\ufffa\013\ufffa\041\ufffa\001\002\000" +
    "\010\003\uff16\005\uff16\013\uff16\001\002\000\006\011\uff19" +
    "\051\uff19\001\002\000\006\011\147\051\150\001\002\000" +
    "\010\003\uff18\005\uff18\013\uff18\001\002\000\006\010\055" +
    "\051\054\001\002\000\004\047\157\001\002\000\006\011" +
    "\uff1b\051\uff1b\001\002\000\006\011\147\051\150\001\002" +
    "\000\010\003\uff1a\005\uff1a\013\uff1a\001\002\000\010\003" +
    "\164\032\024\034\033\001\002\000\004\013\172\001\002" +
    "\000\022\006\061\010\055\013\171\032\047\034\060\046" +
    "\056\047\051\051\054\001\002\000\006\013\ufeec\041\ufeec" +
    "\001\002\000\004\013\167\001\002\000\006\003\170\034" +
    "\033\001\002\000\010\006\061\034\060\046\056\001\002" +
    "\000\006\003\170\034\033\001\002\000\006\003\173\032" +
    "\024\001\002\000\012\010\055\032\047\047\051\051\054" +
    "\001\002\000\010\003\177\027\027\034\033\001\002\000" +
    "\004\013\202\001\002\000\010\003\112\005\113\013\201" +
    "\001\002\000\014\006\061\027\053\034\060\046\056\050" +
    "\057\001\002\000\006\013\ufef1\041\ufef1\001\002\000\006" +
    "\003\133\027\121\001\002\000\006\003\170\034\033\001" +
    "\002\000\010\003\205\027\027\032\024\001\002\000\004" +
    "\013\211\001\002\000\022\005\076\010\055\013\210\027" +
    "\053\032\047\047\051\050\057\051\054\001\002\000\006" +
    "\013\ufeef\041\ufeef\001\002\000\010\003\112\005\113\013" +
    "\201\001\002\000\006\003\173\032\024\001\002\000\006" +
    "\003\173\032\024\001\002\000\004\050\213\001\002\000" +
    "\010\003\uff15\005\uff15\013\uff15\001\002\000\004\006\217" +
    "\001\002\000\006\046\062\050\216\001\002\000\010\003" +
    "\uff13\005\uff13\013\uff13\001\002\000\004\050\220\001\002" +
    "\000\010\003\uff14\005\uff14\013\uff14\001\002\000\004\046" +
    "\222\001\002\000\010\003\uff0f\005\uff0f\013\uff0f\001\002" +
    "\000\012\003\225\032\024\033\035\034\033\001\002\000" +
    "\004\013\261\001\002\000\024\006\215\010\055\013\257" +
    "\032\047\033\214\034\060\046\056\047\051\051\054\001" +
    "\002\000\004\013\233\001\002\000\004\013\231\001\002" +
    "\000\006\013\uff09\041\uff09\001\002\000\010\003\164\032" +
    "\024\034\033\001\002\000\006\013\ufee1\041\ufee1\001\002" +
    "\000\010\003\235\033\035\034\033\001\002\000\004\013" +
    "\252\001\002\000\016\005\243\006\215\013\244\033\214" +
    "\034\060\046\056\001\002\000\006\013\ufee2\041\ufee2\001" +
    "\002\000\004\013\240\001\002\000\006\003\170\034\033" +
    "\001\002\000\004\005\242\001\002\000\006\013\ufeff\041" +
    "\ufeff\001\002\000\006\013\ufefc\041\ufefc\001\002\000\010" +
    "\003\246\033\035\034\033\001\002\000\004\005\251\001" +
    "\002\000\012\006\215\033\214\034\060\046\056\001\002" +
    "\000\004\005\250\001\002\000\006\013\ufefb\041\ufefb\001" +
    "\002\000\006\013\ufefd\041\ufefd\001\002\000\006\003\253" +
    "\033\035\001\002\000\006\006\256\033\214\001\002\000" +
    "\004\005\255\001\002\000\006\013\ufefe\041\ufefe\001\002" +
    "\000\004\050\216\001\002\000\010\003\235\033\035\034" +
    "\033\001\002\000\006\013\ufedf\041\ufedf\001\002\000\010" +
    "\003\262\032\024\033\035\001\002\000\022\005\274\006" +
    "\256\010\055\013\275\032\047\033\214\047\051\051\054" +
    "\001\002\000\006\013\ufee0\041\ufee0\001\002\000\004\013" +
    "\271\001\002\000\004\013\266\001\002\000\006\003\173" +
    "\032\024\001\002\000\004\005\270\001\002\000\006\013" +
    "\ufedd\041\ufedd\001\002\000\006\003\253\033\035\001\002" +
    "\000\004\005\273\001\002\000\006\013\ufede\041\ufede\001" +
    "\002\000\006\013\ufeda\041\ufeda\001\002\000\010\003\276" +
    "\032\024\033\035\001\002\000\016\006\256\010\055\032" +
    "\047\033\214\047\051\051\054\001\002\000\004\005\302" +
    "\001\002\000\004\005\301\001\002\000\006\013\ufedc\041" +
    "\ufedc\001\002\000\006\013\ufedb\041\ufedb\001\002\000\006" +
    "\005\uff1f\013\uff1f\001\002\000\004\004\306\001\002\000" +
    "\006\005\uff20\013\uff20\001\002\000\014\003\034\027\027" +
    "\032\024\033\035\034\033\001\002\000\006\005\uff1e\013" +
    "\uff1e\001\002\000\004\050\311\001\002\000\004\013\uff12" +
    "\001\002\000\012\003\317\027\027\033\035\034\033\001" +
    "\002\000\004\013\345\001\002\000\006\013\uff06\041\uff06" +
    "\001\002\000\004\013\343\001\002\000\006\013\uff01\041" +
    "\uff01\001\002\000\020\006\215\013\324\027\053\033\214" +
    "\034\060\046\056\050\057\001\002\000\004\013\322\001" +
    "\002\000\006\013\uff0b\041\uff0b\001\002\000\010\003\177" +
    "\027\027\034\033\001\002\000\006\013\uff07\041\uff07\001" +
    "\002\000\012\003\332\027\027\033\035\034\033\001\002" +
    "\000\010\003\112\005\113\013\341\001\002\000\004\013" +
    "\336\001\002\000\006\013\uff03\041\uff03\001\002\000\006" +
    "\013\uff00\041\uff00\001\002\000\006\013\uff04\041\uff04\001" +
    "\002\000\022\005\243\006\215\013\244\027\053\033\214" +
    "\034\060\046\056\050\057\001\002\000\010\003\112\005" +
    "\113\013\334\001\002\000\010\003\117\027\121\034\033" +
    "\001\002\000\006\013\ufef7\041\ufef7\001\002\000\010\003" +
    "\246\033\035\034\033\001\002\000\004\005\340\001\002" +
    "\000\006\013\ufef8\041\ufef8\001\002\000\010\003\342\027" +
    "\121\033\035\001\002\000\012\006\256\027\126\033\214" +
    "\050\125\001\002\000\010\003\235\033\035\034\033\001" +
    "\002\000\006\013\uff02\041\uff02\001\002\000\010\003\347" +
    "\027\027\033\035\001\002\000\004\013\352\001\002\000" +
    "\012\006\256\027\053\033\214\050\057\001\002\000\006" +
    "\013\uff05\041\uff05\001\002\000\010\003\112\005\113\013" +
    "\201\001\002\000\006\003\253\033\035\001\002\000\012" +
    "\003\361\027\027\032\024\033\035\001\002\000\004\013" +
    "\376\001\002\000\006\013\ufed3\041\ufed3\001\002\000\006" +
    "\013\ufed7\041\ufed7\001\002\000\004\013\374\001\002\000" +
    "\006\013\uff08\041\uff08\001\002\000\024\006\256\010\055" +
    "\013\366\027\053\032\047\033\214\047\051\050\057\051" +
    "\054\001\002\000\004\013\363\001\002\000\010\003\205" +
    "\027\027\032\024\001\002\000\006\013\ufed8\041\ufed8\001" +
    "\002\000\006\013\ufed2\041\ufed2\001\002\000\012\003\372" +
    "\027\027\032\024\033\035\001\002\000\006\013\ufed5\041" +
    "\ufed5\001\002\000\004\013\373\001\002\000\006\013\ufed6" +
    "\041\ufed6\001\002\000\026\005\076\006\256\010\055\013" +
    "\210\027\053\032\047\033\214\047\051\050\057\051\054" +
    "\001\002\000\010\003\276\032\024\033\035\001\002\000" +
    "\010\003\262\032\024\033\035\001\002\000\006\013\ufed4" +
    "\041\ufed4\001\002\000\010\003\347\027\027\033\035\001" +
    "\002\000\006\013\ufed9\041\ufed9\001\002\000\006\010\055" +
    "\051\054\001\002\000\004\047\u0102\001\002\000\006\011" +
    "\uff1d\051\uff1d\001\002\000\006\011\147\051\150\001\002" +
    "\000\010\003\uff1c\005\uff1c\013\uff1c\001\002\000\004\002" +
    "\uffe2\001\002\000\014\003\u0116\027\121\032\u0113\033\u0119" +
    "\034\u0115\001\002\000\014\003\u02af\007\011\031\014\035" +
    "\020\036\u02ad\001\002\000\006\004\u02a7\040\u02a6\001\002" +
    "\000\004\006\u01a0\001\002\000\004\006\u0110\001\002\000" +
    "\004\006\u010c\001\002\000\004\040\u010d\001\002\000\004" +
    "\004\u010e\001\002\000\014\003\034\027\027\032\024\033" +
    "\035\034\033\001\002\000\006\005\ufff2\013\ufff2\001\002" +
    "\000\004\040\u0111\001\002\000\004\004\u0112\001\002\000" +
    "\014\003\u0116\027\121\032\u0113\033\u0119\034\u0115\001\002" +
    "\000\004\006\u019c\001\002\000\004\013\u0190\001\002\000" +
    "\004\006\u018e\001\002\000\030\006\u012b\010\055\011\147" +
    "\027\126\032\u015b\033\u0129\034\u012c\046\u012a\047\u015d\050" +
    "\125\051\u015e\001\002\000\004\013\u017b\001\002\000\004" +
    "\013\u0154\001\002\000\004\006\u0152\001\002\000\004\013" +
    "\u0123\001\002\000\004\005\u011d\001\002\000\010\003\ufff5" +
    "\005\ufff5\013\ufff5\001\002\000\006\013\u0120\041\u011e\001" +
    "\002\000\010\003\uff4d\005\uff4d\013\uff4d\001\002\000\010" +
    "\003\uff4e\005\uff4e\013\uff4e\001\002\000\004\004\u0121\001" +
    "\002\000\014\003\u0116\027\121\032\u0113\033\u0119\034\u0115" +
    "\001\002\000\010\003\uff4c\005\uff4c\013\uff4c\001\002\000" +
    "\012\003\u0127\027\121\033\u0119\034\u0115\001\002\000\004" +
    "\013\u0149\001\002\000\004\013\u013e\001\002\000\004\013" +
    "\u0133\001\002\000\016\006\u012b\027\126\033\u0129\034\u012c" +
    "\046\u012a\050\125\001\002\000\004\005\uff3c\001\002\000" +
    "\004\006\u0131\001\002\000\006\005\uff3d\013\uff3d\001\002" +
    "\000\006\046\u012f\050\u0130\001\002\000\004\006\u012d\001" +
    "\002\000\004\046\u012e\001\002\000\006\005\uff3f\013\uff3f" +
    "\001\002\000\006\005\uff3e\013\uff3e\001\002\000\006\005" +
    "\uff44\013\uff44\001\002\000\004\050\u0132\001\002\000\006" +
    "\005\uff45\013\uff45\001\002\000\010\003\u0137\027\121\034" +
    "\u0115\001\002\000\004\013\u013c\001\002\000\004\013\u0139" +
    "\001\002\000\004\005\uff38\001\002\000\014\006\u0138\027" +
    "\126\034\u012c\046\u012a\050\125\001\002\000\004\046\u012f" +
    "\001\002\000\006\003\u013b\034\u0115\001\002\000\004\005" +
    "\uff35\001\002\000\010\006\u0138\034\u012c\046\u012a\001\002" +
    "\000\006\003\133\027\121\001\002\000\004\005\uff34\001" +
    "\002\000\010\003\u0142\033\u0119\034\u0115\001\002\000\004" +
    "\013\u0145\001\002\000\004\005\uff37\001\002\000\004\013" +
    "\u0143\001\002\000\012\006\u012b\033\u0129\034\u012c\046\u012a" +
    "\001\002\000\006\003\u013b\034\u0115\001\002\000\004\005" +
    "\uff33\001\002\000\006\003\u0147\033\u0119\001\002\000\004" +
    "\005\uff32\001\002\000\006\006\u0148\033\u0129\001\002\000" +
    "\004\050\u0130\001\002\000\010\003\u014d\027\121\033\u0119" +
    "\001\002\000\004\005\uff36\001\002\000\004\013\u0150\001" +
    "\002\000\004\013\u014e\001\002\000\012\006\u0148\027\126" +
    "\033\u0129\050\125\001\002\000\006\003\133\027\121\001" +
    "\002\000\004\005\uff30\001\002\000\006\003\u0147\033\u0119" +
    "\001\002\000\004\005\uff31\001\002\000\004\050\u0153\001" +
    "\002\000\006\005\uff46\013\uff46\001\002\000\012\003\u0158" +
    "\027\121\032\u0113\034\u0115\001\002\000\004\013\u0172\001" +
    "\002\000\004\013\u0168\001\002\000\004\013\u0166\001\002" +
    "\000\026\006\u0138\010\055\011\147\027\126\032\u015b\034" +
    "\u012c\046\u012a\047\u015d\050\125\051\u015e\001\002\000\004" +
    "\005\uff3b\001\002\000\006\005\uff47\013\uff47\001\002\000" +
    "\004\006\u0162\001\002\000\004\047\u0160\001\002\000\006" +
    "\011\147\051\150\001\002\000\014\003\ufffa\005\ufffa\013" +
    "\ufffa\041\ufffa\047\ufffc\001\002\000\006\005\uff48\013\uff48" +
    "\001\002\000\006\011\147\051\150\001\002\000\006\005" +
    "\uff49\013\uff49\001\002\000\006\010\055\051\054\001\002" +
    "\000\004\047\u0164\001\002\000\006\011\147\051\150\001" +
    "\002\000\006\005\uff4a\013\uff4a\001\002\000\010\003\u0137" +
    "\027\121\034\u0115\001\002\000\004\005\uff2f\001\002\000" +
    "\010\003\u016b\032\u0113\034\u0115\001\002\000\004\013\u016f" +
    "\001\002\000\004\013\u016d\001\002\000\022\006\u0138\010" +
    "\055\011\147\032\u015b\034\u012c\046\u012a\047\u015d\051\u015e" +
    "\001\002\000\004\005\uff2e\001\002\000\006\003\u013b\034" +
    "\u0115\001\002\000\004\005\uff2c\001\002\000\006\003\u0171" +
    "\032\u0113\001\002\000\004\005\uff2b\001\002\000\014\010" +
    "\055\011\147\032\u015b\047\u015d\051\u015e\001\002\000\010" +
    "\003\u0175\027\121\032\u0113\001\002\000\004\013\u0179\001" +
    "\002\000\004\013\u0177\001\002\000\020\010\055\011\147" +
    "\027\126\032\u015b\047\u015d\050\125\051\u015e\001\002\000" +
    "\004\005\uff2d\001\002\000\006\003\133\027\121\001\002" +
    "\000\004\005\uff29\001\002\000\006\003\u0171\032\u0113\001" +
    "\002\000\004\005\uff2a\001\002\000\012\003\u017f\032\u0113" +
    "\033\u0119\034\u0115\001\002\000\004\013\u0185\001\002\000" +
    "\004\013\u0183\001\002\000\004\013\u0181\001\002\000\024" +
    "\006\u012b\010\055\011\147\032\u015b\033\u0129\034\u012c\046" +
    "\u012a\047\u015d\051\u015e\001\002\000\004\005\uff3a\001\002" +
    "\000\010\003\u0142\033\u0119\034\u0115\001\002\000\004\005" +
    "\uff28\001\002\000\010\003\u016b\032\u0113\034\u0115\001\002" +
    "\000\004\005\uff27\001\002\000\010\003\u0188\032\u0113\033" +
    "\u0119\001\002\000\004\013\u018c\001\002\000\004\013\u018a" +
    "\001\002\000\020\006\u0148\010\055\011\147\032\u015b\033" +
    "\u0129\047\u015d\051\u015e\001\002\000\004\005\uff26\001\002" +
    "\000\006\003\u0147\033\u0119\001\002\000\004\005\uff25\001" +
    "\002\000\006\003\u0171\032\u0113\001\002\000\004\005\uff24" +
    "\001\002\000\004\046\u018f\001\002\000\006\005\uff40\013" +
    "\uff40\001\002\000\012\003\u0195\027\121\032\u0113\033\u0119" +
    "\001\002\000\004\013\u019a\001\002\000\004\013\u0198\001" +
    "\002\000\004\013\u0196\001\002\000\004\005\uff39\001\002" +
    "\000\024\006\u0148\010\055\011\147\027\126\032\u015b\033" +
    "\u0129\047\u015d\050\125\051\u015e\001\002\000\010\003\u014d" +
    "\027\121\033\u0119\001\002\000\004\005\uff23\001\002\000" +
    "\010\003\u0175\027\121\032\u0113\001\002\000\004\005\uff22" +
    "\001\002\000\010\003\u0188\032\u0113\033\u0119\001\002\000" +
    "\004\005\uff21\001\002\000\006\010\055\051\054\001\002" +
    "\000\004\047\u019e\001\002\000\006\011\147\051\150\001" +
    "\002\000\006\005\uff4b\013\uff4b\001\002\000\004\004\u01a1" +
    "\001\002\000\026\003\u01b1\005\u01b4\014\u01ae\017\u01aa\021" +
    "\u01a8\022\u01a9\023\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002" +
    "\000\004\006\u02a2\001\002\000\010\003\ufff8\005\ufff8\013" +
    "\ufff8\001\002\000\004\006\u02a0\001\002\000\004\006\u029c" +
    "\001\002\000\006\005\uff93\013\uff93\001\002\000\006\005" +
    "\uff97\013\uff97\001\002\000\004\006\u029a\001\002\000\004" +
    "\006\u0298\001\002\000\004\006\u0296\001\002\000\006\005" +
    "\uff95\013\uff95\001\002\000\006\005\uff96\013\uff96\001\002" +
    "\000\004\013\u0279\001\002\000\004\006\u0275\001\002\000" +
    "\006\005\uff92\013\uff92\001\002\000\004\006\u0273\001\002" +
    "\000\060\003\u01cb\004\u01d0\005\u01ce\006\u01cd\010\055\011" +
    "\147\014\u01c9\015\u01b8\016\u01c2\017\u01c5\020\u01c3\021\u01c4" +
    "\022\u01c6\023\u01ca\024\u01b7\025\u01bf\026\u01cf\027\u01c8\030" +
    "\u01bd\047\u01c7\050\u01c0\051\u015e\052\u01be\001\002\000\006" +
    "\005\uff94\013\uff94\001\002\000\006\005\uff98\013\uff98\001" +
    "\002\000\010\003\uffa8\005\uffa8\013\uffa8\001\002\000\006" +
    "\005\uff99\013\uff99\001\002\000\004\013\u026b\001\002\000" +
    "\004\006\u0265\001\002\000\004\006\u025f\001\002\000\004" +
    "\005\u025e\001\002\000\006\005\uff68\013\uff68\001\002\000" +
    "\004\005\u025d\001\002\000\004\047\u025b\001\002\000\004" +
    "\006\u0259\001\002\000\004\006\u0255\001\002\000\004\006" +
    "\u0253\001\002\000\006\005\uff5b\013\uff5b\001\002\000\004" +
    "\013\u024a\001\002\000\004\006\u0244\001\002\000\006\005" +
    "\uff5f\013\uff5f\001\002\000\004\006\u0242\001\002\000\004" +
    "\006\u0240\001\002\000\004\006\u023e\001\002\000\006\011" +
    "\147\051\150\001\002\000\004\006\u023b\001\002\000\004" +
    "\006\u0235\001\002\000\004\006\u0233\001\002\000\024\006" +
    "\u01f9\013\u01f6\015\u01f7\016\u01fa\020\u01ec\025\u01ed\026\u01f5" +
    "\027\u01e9\050\u01f8\001\002\000\004\013\u01e1\001\002\000" +
    "\014\004\u01d9\010\055\020\u01d7\050\u01d8\051\054\001\002" +
    "\000\006\005\uff62\013\uff62\001\002\000\004\006\u01d5\001" +
    "\002\000\016\003\u01cb\015\u01b8\016\u01c2\025\u01bf\026\u01cf" +
    "\027\u01c8\001\002\000\004\005\u01d4\001\002\000\004\005" +
    "\u01d3\001\002\000\006\005\uff64\013\uff64\001\002\000\006" +
    "\005\uff52\013\uff52\001\002\000\004\020\u01d6\001\002\000" +
    "\006\005\uff71\013\uff71\001\002\000\006\005\uff56\013\uff56" +
    "\001\002\000\006\005\uff5c\013\uff5c\001\002\000\016\003" +
    "\u01cb\015\u01b8\016\u01c2\025\u01bf\026\u01cf\027\u01c8\001\002" +
    "\000\004\047\u01db\001\002\000\006\011\147\051\150\001" +
    "\002\000\006\005\uff6b\013\uff6b\001\002\000\004\005\u01e0" +
    "\001\002\000\004\005\u01df\001\002\000\006\005\uff65\013" +
    "\uff65\001\002\000\006\005\uff53\013\uff53\001\002\000\010" +
    "\003\u01e4\025\u01bf\027\u01c8\001\002\000\004\005\uff82\001" +
    "\002\000\004\013\u01f3\001\002\000\012\013\u01ee\020\u01ec" +
    "\025\u01ed\027\u01e9\001\002\000\004\013\u01e6\001\002\000" +
    "\006\003\u01e8\027\u01c8\001\002\000\004\005\uff7a\001\002" +
    "\000\004\027\u01e9\001\002\000\004\006\u01ea\001\002\000" +
    "\004\050\u01eb\001\002\000\006\005\uff6e\013\uff6e\001\002" +
    "\000\006\005\uff72\013\uff72\001\002\000\004\006\u01f1\001" +
    "\002\000\006\003\u01ef\025\u01bf\001\002\000\006\020\u01ec" +
    "\025\u01ed\001\002\000\004\005\uff78\001\002\000\004\020" +
    "\u01f2\001\002\000\006\005\uff73\013\uff73\001\002\000\006" +
    "\003\u01ef\025\u01bf\001\002\000\004\005\uff79\001\002\000" +
    "\004\006\u0231\001\002\000\016\003\u021b\015\u0216\016\u021e" +
    "\025\u01bf\026\u01cf\027\u01c8\001\002\000\004\006\u0210\001" +
    "\002\000\006\005\uff84\013\u0209\001\002\000\004\050\u0201" +
    "\001\002\000\004\006\u01fb\001\002\000\004\050\u01fc\001" +
    "\002\000\006\005\uff86\013\u01fd\001\002\000\004\015\u01fe" +
    "\001\002\000\004\006\u01ff\001\002\000\004\050\u0200\001" +
    "\002\000\004\005\uff8f\001\002\000\006\005\uff85\013\u0202" +
    "\001\002\000\006\015\u0203\016\u0204\001\002\000\004\006" +
    "\u0207\001\002\000\004\006\u0205\001\002\000\004\050\u0206" +
    "\001\002\000\004\005\uff89\001\002\000\004\050\u0208\001" +
    "\002\000\004\005\uff8e\001\002\000\006\015\u020a\016\u020b" +
    "\001\002\000\004\006\u020e\001\002\000\004\006\u020c\001" +
    "\002\000\004\050\u020d\001\002\000\004\005\uff88\001\002" +
    "\000\004\050\u020f\001\002\000\004\005\uff8d\001\002\000" +
    "\004\050\u0211\001\002\000\006\005\uff8b\013\u0212\001\002" +
    "\000\004\016\u0213\001\002\000\004\006\u0214\001\002\000" +
    "\004\050\u0215\001\002\000\004\005\uff8a\001\002\000\004" +
    "\006\u022f\001\002\000\004\005\uff7e\001\002\000\004\005" +
    "\uff7f\001\002\000\004\013\u022c\001\002\000\004\005\uff80" +
    "\001\002\000\014\013\u0228\020\u01ec\025\u01ed\026\u01f5\027" +
    "\u01e9\001\002\000\004\013\u0224\001\002\000\004\013\u0221" +
    "\001\002\000\004\006\u021f\001\002\000\004\050\u0220\001" +
    "\002\000\004\005\uff87\001\002\000\010\003\u0223\026\u01cf" +
    "\027\u01c8\001\002\000\004\005\uff77\001\002\000\006\026" +
    "\u01f5\027\u01e9\001\002\000\010\003\u0226\025\u01bf\027\u01c8" +
    "\001\002\000\004\005\uff7d\001\002\000\010\020\u01ec\025" +
    "\u01ed\027\u01e9\001\002\000\004\005\uff76\001\002\000\012" +
    "\003\u022b\025\u01bf\026\u01cf\027\u01c8\001\002\000\004\005" +
    "\uff75\001\002\000\004\005\uff7b\001\002\000\012\020\u01ec" +
    "\025\u01ed\026\u01f5\027\u01e9\001\002\000\010\003\u022e\025" +
    "\u01bf\026\u01cf\001\002\000\004\005\uff7c\001\002\000\010" +
    "\020\u01ec\025\u01ed\026\u01f5\001\002\000\004\050\u0230\001" +
    "\002\000\004\005\uff8c\001\002\000\004\020\u0232\001\002" +
    "\000\006\005\uff70\013\uff70\001\002\000\004\020\u0234\001" +
    "\002\000\006\005\uff57\013\uff57\001\002\000\004\004\u0236" +
    "\001\002\000\010\003\u0237\015\u01b8\016\u01c2\001\002\000" +
    "\014\006\u01f9\013\u023a\015\u01f7\016\u01fa\050\u01f8\001\002" +
    "\000\004\005\u0239\001\002\000\006\005\uff66\013\uff66\001" +
    "\002\000\006\015\u0216\016\u021e\001\002\000\004\050\u023c" +
    "\001\002\000\006\005\uff6f\013\uff6f\001\002\000\006\005" +
    "\uff69\013\uff69\001\002\000\004\020\u023f\001\002\000\006" +
    "\005\uff59\013\uff59\001\002\000\004\020\u0241\001\002\000" +
    "\006\005\uff60\013\uff60\001\002\000\004\050\u0243\001\002" +
    "\000\006\005\uff5d\013\uff5d\001\002\000\004\050\u0245\001" +
    "\002\000\004\013\u0246\001\002\000\004\015\u0247\001\002" +
    "\000\004\006\u0248\001\002\000\004\050\u0249\001\002\000" +
    "\004\005\uff91\001\002\000\010\003\u024d\026\u01cf\027\u01c8" +
    "\001\002\000\004\013\u0252\001\002\000\004\013\u0250\001" +
    "\002\000\010\013\u024f\026\u01f5\027\u01e9\001\002\000\004" +
    "\005\uff83\001\002\000\006\003\u01e8\027\u01c8\001\002\000" +
    "\006\003\u0251\026\u01cf\001\002\000\004\026\u01f5\001\002" +
    "\000\006\003\u01e8\027\u01c8\001\002\000\004\020\u0254\001" +
    "\002\000\006\005\uff74\013\uff74\001\002\000\006\010\055" +
    "\051\054\001\002\000\004\047\u0257\001\002\000\004\011" +
    "\u0258\001\002\000\006\005\uff6c\013\uff6c\001\002\000\004" +
    "\050\u025a\001\002\000\006\005\uff4f\013\uff4f\001\002\000" +
    "\006\011\147\051\150\001\002\000\006\005\uff6a\013\uff6a" +
    "\001\002\000\006\005\uff63\013\uff63\001\002\000\006\005" +
    "\uff51\013\uff51\001\002\000\004\050\u0260\001\002\000\004" +
    "\013\u0261\001\002\000\004\016\u0262\001\002\000\004\006" +
    "\u0263\001\002\000\004\050\u0264\001\002\000\004\005\uff90" +
    "\001\002\000\004\004\u0266\001\002\000\012\003\u0267\025" +
    "\u01bf\026\u01cf\027\u01c8\001\002\000\014\013\u026a\020\u01ec" +
    "\025\u01ed\026\u01f5\027\u01e9\001\002\000\004\005\u0269\001" +
    "\002\000\006\005\uff54\013\uff54\001\002\000\012\003\u021b" +
    "\025\u01bf\026\u01cf\027\u01c8\001\002\000\010\003\u026e\025" +
    "\u01bf\026\u01cf\001\002\000\004\013\u0272\001\002\000\004" +
    "\005\uff81\001\002\000\012\013\u0271\020\u01ec\025\u01ed\026" +
    "\u01f5\001\002\000\004\013\u0270\001\002\000\006\003\u0251" +
    "\026\u01cf\001\002\000\006\003\u0251\026\u01cf\001\002\000" +
    "\006\003\u01ef\025\u01bf\001\002\000\004\020\u0274\001\002" +
    "\000\006\005\uff58\013\uff58\001\002\000\004\004\u0276\001" +
    "\002\000\010\003\u0237\015\u01b8\016\u01c2\001\002\000\004" +
    "\005\u0278\001\002\000\006\005\uff67\013\uff67\001\002\000" +
    "\026\003\u01b1\005\u027c\014\u01ae\017\u01aa\021\u01a8\022\u01a9" +
    "\023\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002\000\010\003" +
    "\uffa9\005\uffa9\013\uffa9\001\002\000\006\005\u027d\013\u027e" +
    "\001\002\000\010\003\uffa6\005\uffa6\013\uffa6\001\002\000" +
    "\010\003\uffa4\005\uffa4\013\uffa4\001\002\000\024\003\u01b1" +
    "\014\u01ae\017\u01aa\021\u01a8\022\u01a9\023\u01b0\024\u01a2\030" +
    "\u01a4\052\u01a5\001\002\000\010\003\uffa7\005\uffa7\013\uffa7" +
    "\001\002\000\006\005\u0281\013\u0283\001\002\000\010\003" +
    "\uffa2\005\uffa2\013\uffa2\001\002\000\010\003\uffa5\005\uffa5" +
    "\013\uffa5\001\002\000\024\003\u01b1\014\u01ae\017\u01aa\021" +
    "\u01a8\022\u01a9\023\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002" +
    "\000\006\005\u0286\013\u0287\001\002\000\010\003\uffa3\005" +
    "\uffa3\013\uffa3\001\002\000\010\003\uffa0\005\uffa0\013\uffa0" +
    "\001\002\000\024\003\u01b1\014\u01ae\017\u01aa\021\u01a8\022" +
    "\u01a9\023\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002\000\006" +
    "\005\u028a\013\u028b\001\002\000\010\003\uffa1\005\uffa1\013" +
    "\uffa1\001\002\000\010\003\uff9e\005\uff9e\013\uff9e\001\002" +
    "\000\024\003\u01b1\014\u01ae\017\u01aa\021\u01a8\022\u01a9\023" +
    "\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002\000\006\005\u028e" +
    "\013\u028f\001\002\000\010\003\uff9f\005\uff9f\013\uff9f\001" +
    "\002\000\010\003\uff9c\005\uff9c\013\uff9c\001\002\000\024" +
    "\003\u01b1\014\u01ae\017\u01aa\021\u01a8\022\u01a9\023\u01b0\024" +
    "\u01a2\030\u01a4\052\u01a5\001\002\000\006\005\u0292\013\u0293" +
    "\001\002\000\010\003\uff9d\005\uff9d\013\uff9d\001\002\000" +
    "\010\003\uff9a\005\uff9a\013\uff9a\001\002\000\024\003\u01b1" +
    "\014\u01ae\017\u01aa\021\u01a8\022\u01a9\023\u01b0\024\u01a2\030" +
    "\u01a4\052\u01a5\001\002\000\004\005\u0295\001\002\000\010" +
    "\003\uff9b\005\uff9b\013\uff9b\001\002\000\004\020\u0297\001" +
    "\002\000\006\005\uff61\013\uff61\001\002\000\004\020\u0299" +
    "\001\002\000\006\005\uff5a\013\uff5a\001\002\000\004\050" +
    "\u029b\001\002\000\006\005\uff5e\013\uff5e\001\002\000\006" +
    "\010\055\051\054\001\002\000\004\047\u029e\001\002\000" +
    "\006\011\147\051\150\001\002\000\006\005\uff6d\013\uff6d" +
    "\001\002\000\004\050\u02a1\001\002\000\006\005\uff50\013" +
    "\uff50\001\002\000\004\004\u02a3\001\002\000\012\003\u0267" +
    "\025\u01bf\026\u01cf\027\u01c8\001\002\000\004\005\u02a5\001" +
    "\002\000\006\005\uff55\013\uff55\001\002\000\004\004\u02a9" +
    "\001\002\000\026\003\u01b1\005\u01b4\014\u01ae\017\u01aa\021" +
    "\u01a8\022\u01a9\023\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002" +
    "\000\010\003\ufff7\005\ufff7\013\ufff7\001\002\000\014\003" +
    "\034\027\027\032\024\033\035\034\033\001\002\000\006" +
    "\005\ufff1\013\ufff1\001\002\000\004\013\u03d0\001\002\000" +
    "\004\013\u03bd\001\002\000\004\006\u03b9\001\002\000\004" +
    "\013\u0398\001\002\000\034\003\u02e3\004\u0106\005\u02e4\006" +
    "\u0108\007\u0109\013\u02db\031\u010a\032\u02e5\035\u010b\036\u02d9" +
    "\037\u02dc\040\u02df\042\u02da\001\002\000\004\013\u02b6\001" +
    "\002\000\004\002\uffe3\001\002\000\004\005\u02b5\001\002" +
    "\000\004\002\uffe5\001\002\000\004\002\uffe6\001\002\000" +
    "\004\002\uffe4\001\002\000\012\003\u02bc\007\011\031\014" +
    "\035\020\001\002\000\010\003\u02be\005\u02bf\013\u02d5\001" +
    "\002\000\004\013\u02ce\001\002\000\004\005\uffbc\001\002" +
    "\000\010\003\u02be\005\u02bf\013\u02c0\001\002\000\004\002" +
    "\uffca\001\002\000\014\004\u0106\006\u0108\007\u0109\031\u010a" +
    "\035\u010b\001\002\000\004\002\uffdf\001\002\000\012\003" +
    "\u02c7\005\u02c8\013\u02c9\035\020\001\002\000\004\002\uffd5" +
    "\001\002\000\010\003\u02c2\031\014\035\020\001\002\000" +
    "\004\002\uffbf\001\002\000\012\004\u0106\006\u02c6\031\u010a" +
    "\035\u010b\001\002\000\004\005\uffb3\001\002\000\004\005" +
    "\u02c5\001\002\000\004\002\uffd6\001\002\000\004\040\u02a6" +
    "\001\002\000\006\006\u02c6\035\u010b\001\002\000\004\002" +
    "\uffd2\001\002\000\006\003\u02c7\035\020\001\002\000\004" +
    "\005\u02cb\001\002\000\004\002\uffd3\001\002\000\004\005" +
    "\u02cd\001\002\000\004\002\uffd4\001\002\000\010\003\u02cf" +
    "\007\011\031\014\001\002\000\012\004\u0106\006\u02d4\007" +
    "\u0109\031\u010a\001\002\000\004\005\u02d3\001\002\000\004" +
    "\005\u02d2\001\002\000\004\002\uffc0\001\002\000\004\002" +
    "\uffce\001\002\000\004\004\u02a7\001\002\000\010\003\u02d7" +
    "\007\011\035\020\001\002\000\004\002\uffcd\001\002\000" +
    "\010\006\u0108\007\u0109\035\u010b\001\002\000\004\005\uffb4" +
    "\001\002\000\004\006\u0394\001\002\000\004\006\u0392\001" +
    "\002\000\014\003\u0378\007\011\031\014\035\020\036\u02ad" +
    "\001\002\000\004\006\u036f\001\002\000\004\013\u0363\001" +
    "\002\000\004\013\u035a\001\002\000\004\004\u0358\001\002" +
    "\000\004\013\u034f\001\002\000\004\005\u034d\001\002\000" +
    "\010\003\uffeb\005\uffeb\013\uffeb\001\002\000\042\003\u02f5" +
    "\005\u02f9\006\u02f8\010\055\011\147\013\u02ed\032\u02fa\037" +
    "\u02ef\040\u02f2\041\u02f6\042\u02ec\043\u02f3\044\u02f7\045\u02ee" +
    "\047\u02f4\051\u015e\001\002\000\004\002\uffdb\001\002\000" +
    "\004\006\u02e6\001\002\000\006\010\055\051\054\001\002" +
    "\000\004\047\u02e8\001\002\000\006\011\147\051\150\001" +
    "\002\000\006\005\ufeb7\013\ufeb7\001\002\000\006\005\ufeb2" +
    "\013\ufeb2\001\002\000\004\047\u034b\001\002\000\004\006" +
    "\u0349\001\002\000\014\003\u032d\004\u0301\032\u02e5\037\u02dc" +
    "\042\u02da\001\002\000\006\005\ufe9f\013\ufe9f\001\002\000" +
    "\004\006\u0327\001\002\000\010\003\ufecf\005\ufecf\013\ufecf" +
    "\001\002\000\006\005\ufea1\013\ufea1\001\002\000\010\003" +
    "\u0309\010\055\051\054\001\002\000\006\005\ufe9e\013\ufe9e" +
    "\001\002\000\006\011\147\051\150\001\002\000\020\003" +
    "\u02e3\004\u0320\013\u031e\032\u02e5\037\u02dc\041\u031f\042\u02da" +
    "\001\002\000\010\003\ufece\005\ufece\013\ufece\001\002\000" +
    "\006\005\ufea0\013\ufea0\001\002\000\016\010\055\040\u0303" +
    "\043\u02f3\044\u02f7\045\u02ee\051\054\001\002\000\010\003" +
    "\u02f5\013\u02ff\041\u02f6\001\002\000\004\006\u02fb\001\002" +
    "\000\006\010\055\051\054\001\002\000\004\047\u02fd\001" +
    "\002\000\006\011\147\051\150\001\002\000\006\005\ufeb6" +
    "\013\ufeb6\001\002\000\004\004\u0301\001\002\000\010\003" +
    "\ufed0\005\ufed0\013\ufed0\001\002\000\012\003\u02e3\032\u02e5" +
    "\037\u02dc\042\u02da\001\002\000\010\003\ufecd\005\ufecd\013" +
    "\ufecd\001\002\000\010\003\u0309\010\055\051\054\001\002" +
    "\000\006\005\ufea2\013\ufea2\001\002\000\004\047\u0306\001" +
    "\002\000\006\011\147\051\150\001\002\000\006\005\ufeb5" +
    "\013\ufeb5\001\002\000\006\005\ufeaf\013\ufeaf\001\002\000" +
    "\020\003\u030f\010\055\011\147\013\u0310\041\u030e\047\u0315" +
    "\051\u015e\001\002\000\004\047\u030b\001\002\000\006\011" +
    "\147\051\150\001\002\000\010\003\u030f\013\u0310\041\u030e" +
    "\001\002\000\006\005\ufead\013\ufead\001\002\000\006\005" +
    "\ufea8\013\ufea8\001\002\000\012\003\u0309\010\055\041\u0313" +
    "\051\054\001\002\000\010\003\u0309\010\055\051\054\001" +
    "\002\000\006\005\ufea7\013\ufea7\001\002\000\006\005\ufea6" +
    "\013\ufea6\001\002\000\006\005\ufea5\013\ufea5\001\002\000" +
    "\010\003\u030f\013\u0310\041\u030e\001\002\000\006\011\147" +
    "\051\150\001\002\000\004\047\u0318\001\002\000\006\005" +
    "\ufea9\013\ufea9\001\002\000\006\011\147\051\150\001\002" +
    "\000\010\003\u030f\013\u0310\041\u030e\001\002\000\006\005" +
    "\ufeac\013\ufeac\001\002\000\010\003\u030f\013\u0310\041\u030e" +
    "\001\002\000\006\005\ufeab\013\ufeab\001\002\000\006\005" +
    "\ufeaa\013\ufeaa\001\002\000\004\004\u0323\001\002\000\010" +
    "\003\ufec9\005\ufec9\013\ufec9\001\002\000\012\003\u02e3\032" +
    "\u02e5\037\u02dc\042\u02da\001\002\000\010\003\ufeca\005\ufeca" +
    "\013\ufeca\001\002\000\010\003\ufecb\005\ufecb\013\ufecb\001" +
    "\002\000\012\003\u02e3\032\u02e5\037\u02dc\042\u02da\001\002" +
    "\000\010\003\ufecc\005\ufecc\013\ufecc\001\002\000\006\005" +
    "\ufeb3\013\ufeb3\001\002\000\006\005\ufeae\013\ufeae\001\002" +
    "\000\004\040\u0328\001\002\000\010\003\u0309\010\055\051" +
    "\054\001\002\000\006\005\ufeb0\013\ufeb0\001\002\000\004" +
    "\005\ufec4\001\002\000\004\005\ufec5\001\002\000\004\013" +
    "\u0346\001\002\000\036\003\u033a\006\u02f8\010\055\011\147" +
    "\013\u0336\032\u033b\037\u0337\040\u02f2\042\u02ec\043\u02f3\044" +
    "\u02f7\045\u02ee\047\u02f4\051\u015e\001\002\000\004\013\u0334" +
    "\001\002\000\004\013\u0330\001\002\000\006\003\u0331\042" +
    "\u02da\001\002\000\014\006\u0333\042\u02ec\043\u02f3\044\u02f7" +
    "\045\u02ee\001\002\000\004\005\ufebf\001\002\000\010\043" +
    "\u02f3\044\u02f7\045\u02ee\001\002\000\006\003\u0331\042\u02da" +
    "\001\002\000\004\005\ufec3\001\002\000\010\003\u033a\032" +
    "\u02e5\037\u02dc\001\002\000\004\006\u0341\001\002\000\004" +
    "\005\ufec0\001\002\000\004\005\ufebc\001\002\000\022\006" +
    "\u0340\010\055\011\147\032\u02fa\037\u02ef\040\u02f2\047\u02f4" +
    "\051\u015e\001\002\000\004\006\u033c\001\002\000\006\010" +
    "\055\051\054\001\002\000\004\047\u033e\001\002\000\006" +
    "\011\147\051\150\001\002\000\006\005\ufeb7\013\ufeb6\001" +
    "\002\000\010\010\055\040\u0303\051\054\001\002\000\004" +
    "\040\u0342\001\002\000\010\003\u0309\010\055\051\054\001" +
    "\002\000\006\005\ufeb1\013\ufeb0\001\002\000\004\005\ufec1" +
    "\001\002\000\004\005\ufebd\001\002\000\010\003\u033a\032" +
    "\u02e5\037\u02dc\001\002\000\004\005\ufec2\001\002\000\004" +
    "\005\ufebe\001\002\000\010\043\u02f3\044\u02f7\045\u02ee\001" +
    "\002\000\006\005\ufea3\013\ufea3\001\002\000\006\011\147" +
    "\051\150\001\002\000\006\005\ufeb4\013\ufeb4\001\002\000" +
    "\010\003\u02f5\013\u02ff\041\u02f6\001\002\000\010\003\ufed1" +
    "\005\ufed1\013\ufed1\001\002\000\010\003\u0350\037\u02dc\042" +
    "\u02da\001\002\000\024\003\u0354\006\u0357\013\u0356\037\u0337" +
    "\040\u02f2\042\u02ec\043\u02f3\044\u02f7\045\u02ee\001\002\000" +
    "\004\005\ufec8\001\002\000\004\013\u0353\001\002\000\006" +
    "\003\u0354\037\u02dc\001\002\000\010\006\u0355\037\u02ef\040" +
    "\u02f2\001\002\000\004\040\u0303\001\002\000\006\003\u0354" +
    "\037\u02dc\001\002\000\012\040\u0303\043\u02f3\044\u02f7\045" +
    "\u02ee\001\002\000\012\003\u02e3\032\u02e5\037\u02dc\042\u02da" +
    "\001\002\000\010\003\uffec\005\uffec\013\uffec\001\002\000" +
    "\010\003\u035c\032\u02e5\042\u02da\001\002\000\004\005\ufec7" +
    "\001\002\000\032\003\u035f\006\u0362\010\055\011\147\013" +
    "\u0361\032\u033b\042\u02ec\043\u02f3\044\u02f7\045\u02ee\047\u02f4" +
    "\051\u015e\001\002\000\004\013\u035e\001\002\000\006\003" +
    "\u035f\032\u02e5\001\002\000\016\006\u0360\010\055\011\147" +
    "\032\u02fa\047\u02f4\051\u015e\001\002\000\006\010\055\051" +
    "\054\001\002\000\006\003\u035f\032\u02e5\001\002\000\014" +
    "\010\055\043\u02f3\044\u02f7\045\u02ee\051\054\001\002\000" +
    "\010\003\u0367\032\u02e5\037\u02dc\001\002\000\004\005\ufec6" +
    "\001\002\000\004\013\u036d\001\002\000\004\013\u036b\001" +
    "\002\000\026\003\u0354\006\u0340\010\055\011\147\013\u0368" +
    "\032\u02fa\037\u0337\040\u02f2\047\u02f4\051\u015e\001\002\000" +
    "\006\003\u0354\037\u02dc\001\002\000\004\005\ufeb8\001\002" +
    "\000\004\005\ufeb9\001\002\000\006\003\u0354\037\u02dc\001" +
    "\002\000\004\005\ufeba\001\002\000\006\003\u035f\032\u02e5" +
    "\001\002\000\004\005\ufebb\001\002\000\004\040\u0370\001" +
    "\002\000\010\003\u0309\010\055\051\054\001\002\000\006" +
    "\005\ufeb1\013\ufeb1\001\002\000\010\003\u02be\005\u02bf\013" +
    "\u038f\001\002\000\004\013\u038c\001\002\000\010\003\u02be" +
    "\005\u02bf\013\u0389\001\002\000\004\005\uffbb\001\002\000" +
    "\004\002\uffc8\001\002\000\004\005\u0388\001\002\000\034" +
    "\003\u02e3\004\u0106\005\u0382\006\u0108\007\u0109\013\u0381\031" +
    "\u010a\032\u02e5\035\u010b\036\u02d9\037\u02dc\040\u02df\042\u02da" +
    "\001\002\000\004\002\uffdc\001\002\000\010\003\u02be\005" +
    "\u02bf\013\u037e\001\002\000\004\005\u037d\001\002\000\004" +
    "\002\uffde\001\002\000\004\002\uffdd\001\002\000\012\003" +
    "\u02d7\005\uffd1\007\011\035\020\001\002\000\004\002\uffd9" +
    "\001\002\000\004\005\uffc3\001\002\000\012\003\u0383\007" +
    "\011\031\014\036\u02ad\001\002\000\004\002\uffd7\001\002" +
    "\000\026\003\u02e3\004\u0106\006\u02d4\007\u0109\031\u010a\032" +
    "\u02e5\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\004" +
    "\005\uffcf\001\002\000\004\005\u0387\001\002\000\004\005" +
    "\uffc1\001\002\000\004\002\uffd8\001\002\000\004\002\uffc9" +
    "\001\002\000\012\003\u038a\031\014\035\020\036\u02ad\001" +
    "\002\000\026\003\u02e3\004\u0106\006\u02c6\031\u010a\032\u02e5" +
    "\035\u010b\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000" +
    "\004\005\uffc2\001\002\000\012\003\u0383\007\011\031\014" +
    "\036\u02ad\001\002\000\004\005\u038e\001\002\000\004\002" +
    "\uffda\001\002\000\012\003\u0390\007\011\035\020\036\u02ad" +
    "\001\002\000\024\003\u02e3\006\u0108\007\u0109\032\u02e5\035" +
    "\u010b\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\004" +
    "\005\uffd0\001\002\000\010\043\u02f3\044\u02f7\045\u02ee\001" +
    "\002\000\006\005\ufea4\013\ufea4\001\002\000\004\040\u0395" +
    "\001\002\000\004\004\u0396\001\002\000\012\003\u02e3\032" +
    "\u02e5\037\u02dc\042\u02da\001\002\000\010\003\uffed\005\uffed" +
    "\013\uffed\001\002\000\012\003\u039d\031\014\035\020\036" +
    "\u02ad\001\002\000\010\003\u02be\005\u02bf\013\u03b5\001\002" +
    "\000\004\013\u03af\001\002\000\004\002\uffb1\001\002\000" +
    "\004\005\uffbd\001\002\000\032\003\u03a5\004\u0106\005\u02bf" +
    "\006\u02c6\013\u03a3\031\u010a\032\u02e5\035\u010b\036\u02d9\037" +
    "\u02dc\040\u02df\042\u02da\001\002\000\004\002\uffcc\001\002" +
    "\000\010\003\u02be\005\u02bf\013\u03a0\001\002\000\010\003" +
    "\u02c2\031\014\035\020\001\002\000\004\002\uffc6\001\002" +
    "\000\004\005\uffb7\001\002\000\012\003\u038a\031\014\035" +
    "\020\036\u02ad\001\002\000\004\002\uffc4\001\002\000\044" +
    "\003\u03a7\005\u03a8\006\u02f8\010\055\011\147\013\u03a6\032" +
    "\u02fa\035\020\037\u02ef\040\u02f2\041\u02f6\042\u02ec\043\u02f3" +
    "\044\u02f7\045\u02ee\047\u02f4\051\u015e\001\002\000\016\003" +
    "\u03a9\004\u0301\032\u02e5\035\020\037\u02dc\042\u02da\001\002" +
    "\000\024\003\u02e3\004\u0320\006\u02c6\013\u031e\032\u02e5\035" +
    "\u010b\037\u02dc\041\u031f\042\u02da\001\002\000\012\002\uffd2" +
    "\003\u02f5\013\u02ff\041\u02f6\001\002\000\040\003\u033a\006" +
    "\u03aa\010\055\011\147\013\u0336\032\u033b\035\u010b\037\u0337" +
    "\040\u02f2\042\u02ec\043\u02f3\044\u02f7\045\u02ee\047\u02f4\051" +
    "\u015e\001\002\000\016\010\055\040\u03ab\043\u02f3\044\u02f7" +
    "\045\u02ee\051\054\001\002\000\012\003\u0309\004\u02a9\010" +
    "\055\051\054\001\002\000\004\005\uffb5\001\002\000\004" +
    "\005\u03ae\001\002\000\004\002\uffc5\001\002\000\010\003" +
    "\u03b0\031\014\036\u02ad\001\002\000\022\003\u02e3\004\u0106" +
    "\031\u010a\032\u02e5\036\u02d9\037\u02dc\040\u02df\042\u02da\001" +
    "\002\000\004\005\u03b4\001\002\000\004\005\u03b3\001\002" +
    "\000\004\002\uffc7\001\002\000\004\002\uffad\001\002\000" +
    "\010\003\u03b7\035\020\036\u02ad\001\002\000\004\002\uffac" +
    "\001\002\000\022\003\u02e3\006\u02c6\032\u02e5\035\u010b\036" +
    "\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\004\005\uffb6" +
    "\001\002\000\004\040\u03ba\001\002\000\004\004\u03bb\001" +
    "\002\000\012\003\u02e3\032\u02e5\037\u02dc\042\u02da\001\002" +
    "\000\010\003\uffee\005\uffee\013\uffee\001\002\000\012\003" +
    "\u03c2\007\011\031\014\036\u02ad\001\002\000\004\013\u03cd" +
    "\001\002\000\004\005\u03cc\001\002\000\004\013\u03ca\001" +
    "\002\000\004\005\u03c9\001\002\000\030\003\u02e3\004\u0106" +
    "\006\u02d4\007\u0109\013\u03c8\031\u010a\032\u02e5\036\u02d9\037" +
    "\u02dc\040\u02df\042\u02da\001\002\000\004\013\u03c6\001\002" +
    "\000\004\005\u03c5\001\002\000\004\002\uffe0\001\002\000" +
    "\010\003\u03c7\005\uffd1\007\011\001\002\000\006\006\u02d4" +
    "\007\u0109\001\002\000\010\003\u02cf\007\011\031\014\001" +
    "\002\000\004\002\uffcb\001\002\000\010\003\u03b0\031\014" +
    "\036\u02ad\001\002\000\004\005\uffaa\001\002\000\004\002" +
    "\uffb0\001\002\000\010\003\u03ce\007\011\036\u02ad\001\002" +
    "\000\022\003\u02e3\006\u02d4\007\u0109\032\u02e5\036\u02d9\037" +
    "\u02dc\040\u02df\042\u02da\001\002\000\004\005\uffab\001\002" +
    "\000\012\003\u03d5\007\011\035\020\036\u02ad\001\002\000" +
    "\004\013\u03df\001\002\000\004\002\uffb2\001\002\000\010" +
    "\003\u02be\005\u02bf\013\u03dc\001\002\000\004\005\uffbe\001" +
    "\002\000\030\003\u02e3\005\u0382\006\u0108\007\u0109\013\u03da" +
    "\032\u02e5\035\u010b\036\u02d9\037\u02dc\040\u02df\042\u02da\001" +
    "\002\000\010\003\u02be\005\u02bf\013\u03d8\001\002\000\004" +
    "\002\uffe1\001\002\000\010\003\u02d7\007\011\035\020\001" +
    "\002\000\004\005\uffb9\001\002\000\010\003\u03ce\007\011" +
    "\036\u02ad\001\002\000\004\005\uffb8\001\002\000\010\003" +
    "\u03b7\035\020\036\u02ad\001\002\000\004\002\uffaf\001\002" +
    "\000\004\005\uffba\001\002\000\010\003\u03ce\007\011\036" +
    "\u02ad\001\002\000\004\005\u03e1\001\002\000\004\002\uffae" +
    "\001\002\000\010\003\ufff4\005\ufff4\013\ufff4\001\002\000" +
    "\012\003\u03e4\031\014\035\020\036\u02ad\001\002\000\032" +
    "\003\u02e3\004\u0106\005\u02e4\006\u02c6\013\u03fd\031\u010a\032" +
    "\u02e5\035\u010b\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002" +
    "\000\004\013\u03f7\001\002\000\004\013\u03f2\001\002\000" +
    "\004\013\u03e9\001\002\000\004\002\uffea\001\002\000\010" +
    "\003\u03ea\031\014\036\u02ad\001\002\000\024\003\u02e3\004" +
    "\u0106\013\u03f0\031\u010a\032\u02e5\036\u02d9\037\u02dc\040\u02df" +
    "\042\u02da\001\002\000\004\013\u03ee\001\002\000\004\013" +
    "\u03ed\001\002\000\004\005\uffd1\001\002\000\006\003\u03ef" +
    "\036\u02ad\001\002\000\016\003\u02e3\032\u02e5\036\u02d9\037" +
    "\u02dc\040\u02df\042\u02da\001\002\000\006\003\u03f1\031\014" +
    "\001\002\000\006\004\u0106\031\u010a\001\002\000\010\003" +
    "\u02c2\031\014\035\020\001\002\000\010\003\u02be\005\u02bf" +
    "\013\u03f6\001\002\000\004\013\u03f5\001\002\000\006\003" +
    "\u03f1\031\014\001\002\000\006\003\u02c7\035\020\001\002" +
    "\000\010\003\u03f8\035\020\036\u02ad\001\002\000\026\003" +
    "\u02e3\005\u0382\006\u02c6\013\u03fc\032\u02e5\035\u010b\036\u02d9" +
    "\037\u02dc\040\u02df\042\u02da\001\002\000\010\003\u02be\005" +
    "\u02bf\013\u03f6\001\002\000\004\013\u03fb\001\002\000\006" +
    "\003\u03ef\036\u02ad\001\002\000\006\003\u03ef\036\u02ad\001" +
    "\002\000\012\003\u0400\031\014\035\020\036\u02ad\001\002" +
    "\000\010\003\u02be\005\u02bf\013\u0405\001\002\000\004\013" +
    "\u0404\001\002\000\032\003\u02e3\004\u0106\005\u0382\006\u02c6" +
    "\013\u0403\031\u010a\032\u02e5\035\u010b\036\u02d9\037\u02dc\040" +
    "\u02df\042\u02da\001\002\000\010\003\u02be\005\u02bf\013\u0402" +
    "\001\002\000\010\003\u02c7\005\uffd1\035\020\001\002\000" +
    "\010\003\u03b0\031\014\036\u02ad\001\002\000\010\003\u03b0" +
    "\031\014\036\u02ad\001\002\000\010\003\u03b7\035\020\036" +
    "\u02ad\001\002\000\004\040\u0407\001\002\000\004\004\u0408" +
    "\001\002\000\014\003\u0116\027\121\032\u0113\033\u0119\034" +
    "\u0115\001\002\000\010\003\ufff6\005\ufff6\013\ufff6\001\002" +
    "\000\004\013\u0417\001\002\000\004\002\uffe7\001\002\000" +
    "\004\013\u0412\001\002\000\004\013\u040e\001\002\000\010" +
    "\003\u02c2\031\014\035\020\001\002\000\010\003\u02be\005" +
    "\u02bf\013\u03f6\001\002\000\004\013\u0411\001\002\000\006" +
    "\003\u03f1\031\014\001\002\000\010\003\u02cf\007\011\031" +
    "\014\001\002\000\004\013\u0416\001\002\000\004\013\u0415" +
    "\001\002\000\006\003\u03f1\031\014\001\002\000\006\003" +
    "\u03c7\007\011\001\002\000\010\003\u02d7\007\011\035\020" +
    "\001\002\000\004\013\u041a\001\002\000\010\003\u02be\005" +
    "\u02bf\013\u03f6\001\002\000\006\003\u03c7\007\011\001\002" +
    "\000\012\003\u041c\007\011\031\014\036\u02ad\001\002\000" +
    "\030\003\u02e3\004\u0106\006\u02d4\007\u0109\013\u0435\031\u010a" +
    "\032\u02e5\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000" +
    "\004\013\u042e\001\002\000\004\013\u0429\001\002\000\004" +
    "\005\u0428\001\002\000\004\013\u0421\001\002\000\010\003" +
    "\u0422\031\014\036\u02ad\001\002\000\024\003\u02e3\004\u0106" +
    "\013\u0427\031\u010a\032\u02e5\036\u02d9\037\u02dc\040\u02df\042" +
    "\u02da\001\002\000\004\013\u0426\001\002\000\004\013\u0425" +
    "\001\002\000\006\003\u03f1\031\014\001\002\000\006\003" +
    "\u03ef\036\u02ad\001\002\000\006\003\u03f1\031\014\001\002" +
    "\000\004\002\uffe8\001\002\000\010\003\u02cf\007\011\031" +
    "\014\001\002\000\004\013\u042d\001\002\000\004\013\u042c" +
    "\001\002\000\006\003\u03f1\031\014\001\002\000\006\003" +
    "\u03c7\007\011\001\002\000\010\003\u042f\007\011\036\u02ad" +
    "\001\002\000\024\003\u02e3\006\u02d4\007\u0109\013\u0434\032" +
    "\u02e5\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\004" +
    "\013\u0433\001\002\000\004\013\u0432\001\002\000\006\003" +
    "\u03ef\036\u02ad\001\002\000\006\003\u03c7\007\011\001\002" +
    "\000\006\003\u03c7\007\011\001\002\000\010\003\u02cf\007" +
    "\011\031\014\001\002\000\004\004\u0437\001\002\000\026" +
    "\003\u01b1\005\u01b4\014\u01ae\017\u01aa\021\u01a8\022\u01a9\023" +
    "\u01b0\024\u01a2\030\u01a4\052\u01a5\001\002\000\010\003\ufff9" +
    "\005\ufff9\013\ufff9\001\002\000\012\003\u043a\007\011\035" +
    "\020\036\u02ad\001\002\000\026\003\u02e3\006\u0108\007\u0109" +
    "\013\u0450\032\u02e5\035\u010b\036\u02d9\037\u02dc\040\u02df\042" +
    "\u02da\001\002\000\004\013\u044c\001\002\000\004\002\uffe9" +
    "\001\002\000\004\013\u0445\001\002\000\004\013\u043f\001" +
    "\002\000\010\003\u0440\035\020\036\u02ad\001\002\000\026" +
    "\003\u03a5\005\u02bf\006\u02c6\013\u0444\032\u02e5\035\u010b\036" +
    "\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\010\003\u02be" +
    "\005\u02bf\013\u03f6\001\002\000\004\013\u0443\001\002\000" +
    "\006\003\u03ef\036\u02ad\001\002\000\010\003\u03b7\035\020" +
    "\036\u02ad\001\002\000\010\003\u0446\007\011\036\u02ad\001" +
    "\002\000\024\003\u02e3\006\u02d4\007\u0109\013\u044b\032\u02e5" +
    "\036\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\004\013" +
    "\u044a\001\002\000\004\013\u0449\001\002\000\006\003\u03ef" +
    "\036\u02ad\001\002\000\006\003\u03c7\007\011\001\002\000" +
    "\006\003\u03c7\007\011\001\002\000\010\003\u02d7\007\011" +
    "\035\020\001\002\000\004\013\u044f\001\002\000\010\003" +
    "\u02be\005\u02bf\013\u03f6\001\002\000\006\003\u03c7\007\011" +
    "\001\002\000\012\003\u0452\007\011\035\020\036\u02ad\001" +
    "\002\000\010\003\u02be\005\u02bf\013\u0453\001\002\000\026" +
    "\003\u02e3\006\u0108\007\u0109\013\u044b\032\u02e5\035\u010b\036" +
    "\u02d9\037\u02dc\040\u02df\042\u02da\001\002\000\010\003\u03b7" +
    "\035\020\036\u02ad\001\002\000\004\002\ufffe\001\002\000" +
    "\014\003\017\007\011\013\013\031\014\035\020\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0454\000\004\002\005\001\001\000\012\003\014\004" +
    "\007\005\011\007\u0453\001\001\000\012\003\014\004\007" +
    "\005\011\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u040c\004\u0409\005\u040b\013\u040a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\074\027\101\030\103\025\104\035\105\031" +
    "\106\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\077\042\103\040\105\043\106\037\110\045\121" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\155" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\162\145\001\001\000\016\103\067\105" +
    "\072\106\066\113\073\117\071\120\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\141\001\001" +
    "\000\004\076\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\155\047" +
    "\001\001\000\002\001\001\000\006\103\101\106\077\001" +
    "\001\000\002\001\001\000\004\155\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\103" +
    "\106\106\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\131\001" +
    "\001\000\002\001\001\000\006\053\115\106\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\115\103\143\001\001\000" +
    "\002\001\001\000\004\155\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\156\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\161\152" +
    "\001\001\000\004\156\153\001\001\000\002\001\001\000" +
    "\004\155\155\001\001\000\002\001\001\000\004\160\157" +
    "\001\001\000\004\156\160\001\001\000\002\001\001\000" +
    "\010\103\165\106\162\120\164\001\001\000\002\001\001" +
    "\000\004\155\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\117\001\001\000\002\001\001\000\004" +
    "\106\077\001\001\000\004\103\143\001\001\000\004\155" +
    "\047\001\001\000\010\105\174\106\175\113\177\001\001" +
    "\000\002\001\001\000\004\076\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\115\001\001\000\004" +
    "\106\105\001\001\000\010\103\206\105\203\117\205\001" +
    "\001\000\002\001\001\000\004\155\047\001\001\000\002" +
    "\001\001\000\004\076\114\001\001\000\004\103\101\001" +
    "\001\000\004\103\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\103\225\104\226\106\223\111" +
    "\227\001\001\000\002\001\001\000\004\155\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\103\165\106\162\120\231\001\001\000\002\001\001" +
    "\000\010\104\236\106\233\114\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\104\246\106\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\104\236\106\233\114\257\001\001" +
    "\000\002\001\001\000\010\103\263\104\264\122\262\001" +
    "\001\000\004\155\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\276\104\277\001\001\000\004\155\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\074\027\101\306\103\025\104\035\105" +
    "\031\106\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\075\313\104\317\105\314\106" +
    "\312\107\320\115\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\105\174" +
    "\106\175\113\322\001\001\000\002\001\001\000\016\104" +
    "\332\105\325\106\324\113\330\114\327\116\326\001\001" +
    "\000\004\076\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\334\001\001\000\006\053\115\106\240\001" +
    "\001\000\002\001\001\000\006\104\336\106\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\115\104" +
    "\253\001\001\000\002\001\001\000\010\104\236\106\233" +
    "\114\343\001\001\000\002\001\001\000\010\104\350\105" +
    "\345\116\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\334\001\001\000\004\104" +
    "\336\001\001\000\016\100\355\103\353\104\361\105\356" +
    "\112\357\123\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\123\364\155\047\001\001\000\002\001\001\000" +
    "\010\103\206\105\203\117\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\103\206\104\350\105\367\116" +
    "\370\117\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\155\047\001\001\000\006\103" +
    "\106\104\336\001\001\000\010\103\263\104\264\122\374" +
    "\001\001\000\002\001\001\000\010\104\350\105\345\116" +
    "\376\001\001\000\002\001\001\000\004\155\u0100\001\001" +
    "\000\002\001\001\000\004\157\u0102\001\001\000\004\156" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\050\u011a\051\u0119\052\u0117\053\u0116\054\u0113\055\u03e1\001" +
    "\001\000\022\003\u02ad\004\u02aa\005\u02ab\006\u02af\010\u02b3" +
    "\011\u02b2\012\u02b1\013\u02b0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\074\027\101\u010e\103" +
    "\025\104\035\105\031\106\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\050\u011a\051" +
    "\u0119\052\u0117\053\u0116\054\u0113\055\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\155" +
    "\u015b\156\u0159\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\050\u011a\051" +
    "\u0119\052\u0117\053\u0116\054\u0113\055\u0121\001\001\000\002" +
    "\001\001\000\012\052\u0125\053\u0124\054\u0123\062\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\u0134" +
    "\054\u0133\066\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u013c\001\001\000\002\001\001\000\010" +
    "\052\u0140\054\u013e\067\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0143\001\001\000\002\001\001\000\004\052\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\052\u014b\053\u014a\070\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u014e\001\001\000\002\001\001\000\004\052" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\051\u0156\053\u0155\054\u0154\063\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\155\u015b\156\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\156\u015e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\156\u0160\001\001\000\002\001\001\000\004\155\u0162" +
    "\001\001\000\002\001\001\000\004\156\u0164\001\001\000" +
    "\002\001\001\000\010\053\u0134\054\u0133\066\u0166\001\001" +
    "\000\002\001\001\000\010\051\u0169\054\u0168\071\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\155\u015b" +
    "\156\u0159\001\001\000\002\001\001\000\004\054\u016d\001" +
    "\001\000\002\001\001\000\004\051\u016f\001\001\000\002" +
    "\001\001\000\006\155\u015b\156\u0159\001\001\000\010\051" +
    "\u0173\053\u0172\072\u0175\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\155\u015b\156\u0159\001\001\000\002\001" +
    "\001\000\004\053\u0177\001\001\000\002\001\001\000\004" +
    "\051\u0179\001\001\000\002\001\001\000\012\051\u017d\052" +
    "\u017c\054\u017b\064\u017f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\155\u015b\156\u0159\001" +
    "\001\000\002\001\001\000\010\052\u0140\054\u013e\067\u0181" +
    "\001\001\000\002\001\001\000\010\051\u0169\054\u0168\071" +
    "\u0183\001\001\000\002\001\001\000\010\051\u0186\052\u0185" +
    "\073\u0188\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\155\u015b\156\u0159\001\001\000\002\001\001\000\004" +
    "\052\u018a\001\001\000\002\001\001\000\004\051\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\051\u0192\052\u0191\053\u0190\065\u0193\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\155\u015b\156\u0159\001\001\000\010\052" +
    "\u014b\053\u014a\070\u0196\001\001\000\002\001\001\000\010" +
    "\051\u0173\053\u0172\072\u0198\001\001\000\002\001\001\000" +
    "\010\051\u0186\052\u0185\073\u019a\001\001\000\002\001\001" +
    "\000\004\155\u019c\001\001\000\002\001\001\000\004\156" +
    "\u019e\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\031\u01a2\040\u01b4\041\u01b1\042\u01b2\043\u01a5\044\u01a6\045" +
    "\u01aa\046\u01ae\047\u01ab\150\u01ac\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\033\u01ba\034\u01b8\151\u01c0\152" +
    "\u01cb\153\u01b5\155\u01bb\156\u01b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\156\u023c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\155\u01d9\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\u01d1\034\u01d0\151\u01c0\152\u01cb" +
    "\153\u01b5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\u01dd\034\u01dc\151\u01c0\152\u01cb\153\u01b5\001\001\000\002" +
    "\001\001\000\004\156\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u01e1\151\u01e4\153\u01e2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\u01e6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\151" +
    "\u01ef\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\035\u0219\036\u0217" +
    "\037\u0216\151\u021c\152\u021b\153\u0218\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\152\u0221" +
    "\153\u01e6\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\151\u0226\153\u0224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\151\u01ef\152\u0228\153" +
    "\u0229\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\151\u01f3\152\u022c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\035\u024d\152\u024a\153\u024b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\153\u0229\001\001\000\004\152\u022c\001\001\000\002\001" +
    "\001\000\004\153\u0224\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\155\u0255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\156\u025b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\u0267" +
    "\151\u01c0\152\u01cb\153\u01b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\035\u0219\036\u0217" +
    "\037\u0216\151\u021c\152\u021b\153\u0218\001\001\000\010\037" +
    "\u026c\151\u026e\152\u026b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\152" +
    "\u0221\001\001\000\004\152\u0228\001\001\000\004\151\u0226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0276\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\040\u01b4\041\u01b1\042\u01b2\043\u01a5\044" +
    "\u01a6\045\u01aa\046\u01ae\047\u01ab\141\u0279\150\u027a\001\001" +
    "\000\002\001\001\000\004\142\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\040\u01b4\041\u01b1\042\u01b2" +
    "\043\u01a5\044\u01a6\045\u01aa\046\u01ae\047\u01ab\150\u027f\001" +
    "\001\000\002\001\001\000\004\143\u0281\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\040\u01b4\041\u01b1\042" +
    "\u01b2\043\u01a5\044\u01a6\045\u01aa\046\u01ae\047\u01ab\150\u0283" +
    "\001\001\000\004\144\u0284\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\040\u01b4\041\u01b1\042\u01b2\043\u01a5" +
    "\044\u01a6\045\u01aa\046\u01ae\047\u01ab\150\u0287\001\001\000" +
    "\004\145\u0288\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\040\u01b4\041\u01b1\042\u01b2\043\u01a5\044\u01a6\045" +
    "\u01aa\046\u01ae\047\u01ab\150\u028b\001\001\000\004\146\u028c" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\040" +
    "\u01b4\041\u01b1\042\u01b2\043\u01a5\044\u01a6\045\u01aa\046\u01ae" +
    "\047\u01ab\150\u028f\001\001\000\004\147\u0290\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\040\u01b4\041\u01b1" +
    "\042\u01b2\043\u01a5\044\u01a6\045\u01aa\046\u01ae\047\u01ab\150" +
    "\u0293\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\155\u029c" +
    "\001\001\000\002\001\001\000\004\156\u029e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\u02a3\151\u01c0\152\u01cb\153\u01b5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\u02a7\040\u01b4\041\u01b1\042\u01b2\043\u01a5\044" +
    "\u01a6\045\u01aa\046\u01ae\047\u01ab\150\u01ac\001\001\000\002" +
    "\001\001\000\016\074\027\101\u02a9\103\025\104\035\105" +
    "\031\106\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u02b9\004\u02b6\005\u02b7\016\u02bc\021\u02ba\024\u02b8\001" +
    "\001\000\004\057\u02d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u02c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u02c9\001\001" +
    "\000\002\001\001\000\006\004\u02c2\005\u02c3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u02cb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u02d0\004\u02cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\u02d7\005\u02c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\u0373" +
    "\004\u0371\005\u0372\006\u0379\014\u037b\015\u037a\016\u0378\020" +
    "\u0376\021\u0375\024\u0374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\133\u02f0" +
    "\134\u02ef\155\u02ea\156\u02e9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\155\u02e6\001\001\000\002\001\001" +
    "\000\004\156\u02e8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\126\u032e" +
    "\127\u032d\132\u032b\135\u032a\136\u0329\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\130\u0325\155\u0309\001\001\000\002\001\001\000" +
    "\004\156\u0324\001\001\000\014\124\u0320\125\u02e0\126\u02df" +
    "\127\u02dd\132\u02dc\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\133\u0303\155\u0304\001\001\000\004\134\u02ff" +
    "\001\001\000\002\001\001\000\004\155\u02fb\001\001\000" +
    "\002\001\001\000\004\156\u02fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\124\u0301\125" +
    "\u02e0\126\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001" +
    "\000\006\130\u0307\155\u0309\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\156\u0306\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\131\u0316\155\u0315\156\u0313\001" +
    "\001\000\002\001\001\000\004\156\u030b\001\001\000\004" +
    "\131\u030c\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\130\u0311\155\u0309\001\001\000\006\130\u0310\155\u0309" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\u031c\001\001\000\004\156\u031a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\156\u0318\001" +
    "\001\000\004\131\u0319\001\001\000\002\001\001\000\004" +
    "\131\u031b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\124\u0321\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\124\u0323\125\u02e0\126\u02df\127\u02dd" +
    "\132\u02dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\130\u0328\155\u0309" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\126\u0338\127\u0337\133\u02f0" +
    "\155\u02ea\156\u02e9\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\132\u0331\001\001\000\004\133\u02f0\001\001" +
    "\000\002\001\001\000\004\133\u0303\001\001\000\004\132" +
    "\u0334\001\001\000\002\001\001\000\006\126\u0344\127\u0343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\155\u02ea\156\u02e9\001\001\000\002\001\001" +
    "\000\004\155\u033c\001\001\000\002\001\001\000\004\156" +
    "\u033e\001\001\000\002\001\001\000\004\155\u0304\001\001" +
    "\000\002\001\001\000\006\130\u0342\155\u0309\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\126\u0347\127\u0346\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\u0349\001\001\000\002\001\001\000\004" +
    "\156\u034b\001\001\000\002\001\001\000\004\134\u034d\001" +
    "\001\000\002\001\001\000\010\127\u032d\132\u0351\135\u0350" +
    "\001\001\000\006\127\u0337\133\u02f0\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\u0346\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\u0343\001\001\000" +
    "\004\133\u0303\001\001\000\014\124\u0358\125\u02e0\126\u02df" +
    "\127\u02dd\132\u02dc\001\001\000\002\001\001\000\010\126" +
    "\u032e\132\u035c\136\u035a\001\001\000\002\001\001\000\012" +
    "\126\u0338\133\u02f0\155\u02ea\156\u02e9\001\001\000\002\001" +
    "\001\000\004\126\u0347\001\001\000\006\155\u02ea\156\u02e9" +
    "\001\001\000\004\155\u0304\001\001\000\004\126\u0344\001" +
    "\001\000\006\133\u0303\155\u0304\001\001\000\010\126\u0365" +
    "\127\u0364\137\u0363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\127\u0368\155\u02ea\156\u02e9" +
    "\001\001\000\004\127\u0369\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\127\u036b\001\001\000\002\001\001" +
    "\000\004\126\u036d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\130\u0370\155\u0309\001\001\000\002\001\001" +
    "\000\004\057\u02d5\001\001\000\002\001\001\000\004\057" +
    "\u02c0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132" +
    "\u02dc\001\001\000\002\001\001\000\004\057\u037e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u037f\005\u02c3\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\u0385\004\u0383\006\u0384\001\001\000" +
    "\002\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd" +
    "\132\u02dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\u02c2\005\u02c3\006\u038a\001\001\000\014\124\u02e1\125" +
    "\u02e0\126\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001" +
    "\000\010\003\u02d0\004\u02cf\006\u038c\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\u02d7\005\u02c3\006\u0390" +
    "\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132" +
    "\u02dc\001\001\000\002\001\001\000\004\133\u0392\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\124\u0396\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001" +
    "\000\002\001\001\000\016\004\u0398\005\u0399\006\u039e\017" +
    "\u039d\023\u039b\026\u039a\001\001\000\004\057\u03b5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\057\u03a3\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc" +
    "\001\001\000\002\001\001\000\004\057\u03a0\001\001\000" +
    "\006\004\u03a1\005\u02c3\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\u03ab\005\u02c3\006\u03ac\001\001\000" +
    "\002\001\001\000\014\005\u02c9\133\u02f0\134\u02ef\155\u02ea" +
    "\156\u02e9\001\001\000\016\005\u02cb\126\u032e\127\u032d\132" +
    "\u032b\135\u032a\136\u0329\001\001\000\014\124\u0320\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\004\134\u02ff\001" +
    "\001\000\014\126\u0338\127\u0337\133\u02f0\155\u02ea\156\u02e9" +
    "\001\001\000\006\133\u0303\155\u0304\001\001\000\006\130" +
    "\u0307\155\u0309\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\u03b0\006\u03b1\001\001\000" +
    "\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u02c3\006\u03b7\001\001\000\002" +
    "\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132" +
    "\u02dc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\124\u03bb\125\u02e0\126\u02df\127\u02dd\132" +
    "\u02dc\001\001\000\002\001\001\000\016\003\u03bf\004\u03bd" +
    "\006\u03c2\015\u03c3\020\u03c0\027\u03be\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u037f\001\001\000\002\001\001\000\006\003" +
    "\u0385\004\u0383\001\001\000\002\001\001\000\006\004\u03ca" +
    "\006\u038a\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\u03ce\006\u0390\001\001\000\014\124\u02e1\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001\000" +
    "\016\003\u03d2\005\u03d0\006\u03d5\014\u03d6\022\u03d3\025\u03d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u03dc\001\001\000\002\001\001\000\014\124\u02e1\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\004\057\u037e\001" +
    "\001\000\002\001\001\000\006\003\u03d8\005\u02c3\001\001" +
    "\000\002\001\001\000\006\003\u03da\006\u0384\001\001\000" +
    "\002\001\001\000\006\005\u02c3\006\u03dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u03df\006\u038c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\u03e4\005\u03e6\006\u03e5\010\u03e7\001\001\000" +
    "\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u03ea\006\u03eb\015\u03c3\001\001" +
    "\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0390\001\001\000\014\124\u02e1\125\u02e0\126" +
    "\u02df\127\u02dd\132\u02dc\001\001\000\004\004\u0383\001\001" +
    "\000\002\001\001\000\010\004\u03f2\005\u03f3\016\u02bc\001" +
    "\001\000\004\057\u02d5\001\001\000\002\001\001\000\004" +
    "\004\u02cf\001\001\000\004\005\u02c3\001\001\000\010\005" +
    "\u03f9\006\u03f8\014\u03d6\001\001\000\014\124\u02e1\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\004\057\u037e\001" +
    "\001\000\002\001\001\000\004\006\u038c\001\001\000\004" +
    "\006\u0384\001\001\000\016\004\u03fd\005\u03fe\006\u0400\014" +
    "\u037b\015\u037a\016\u0378\001\001\000\004\057\u02d5\001\001" +
    "\000\002\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127" +
    "\u02dd\132\u02dc\001\001\000\004\057\u037e\001\001\000\004" +
    "\005\u02c3\001\001\000\006\004\u0383\006\u0384\001\001\000" +
    "\006\004\u02cf\006\u038c\001\001\000\006\005\u02c3\006\u0390" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\050" +
    "\u011a\051\u0119\052\u0117\053\u0116\054\u0113\055\u0408\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\u040e\005\u040f" +
    "\026\u039a\001\001\000\004\057\u03b5\001\001\000\002\001" +
    "\001\000\004\004\u03b0\001\001\000\010\003\u0413\004\u0412" +
    "\027\u03be\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u03ca\001\001\000\004\003\u03ce\001\001\000\010" +
    "\003\u0418\005\u0417\025\u03d1\001\001\000\002\001\001\000" +
    "\004\057\u03dc\001\001\000\004\003\u03df\001\001\000\012" +
    "\003\u041f\004\u041c\006\u041d\012\u041e\001\001\000\014\124" +
    "\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u0422\006\u0423\023\u039b\001\001\000\014" +
    "\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u03a1\001\001" +
    "\000\004\006\u03b7\001\001\000\004\004\u03ab\001\001\000" +
    "\002\001\001\000\010\003\u042a\004\u0429\024\u02b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u02c2\001" +
    "\001\000\004\003\u02d7\001\001\000\010\003\u0430\006\u042f" +
    "\022\u03d3\001\001\000\014\124\u02e1\125\u02e0\126\u02df\127" +
    "\u02dd\132\u02dc\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u03dd\001\001\000\004\003\u03d8\001\001\000" +
    "\004\003\u03da\001\001\000\010\003\u042a\004\u0429\024\u0374" +
    "\001\001\000\002\001\001\000\026\031\u0437\040\u01b4\041" +
    "\u01b1\042\u01b2\043\u01a5\044\u01a6\045\u01aa\046\u01ae\047\u01ab" +
    "\150\u01ac\001\001\000\002\001\001\000\012\003\u043d\005" +
    "\u043c\006\u043a\011\u043b\001\001\000\014\124\u02e1\125\u02e0" +
    "\126\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u0441\006\u0440\017\u039d\001\001\000\016\057\u03a3\124" +
    "\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc\001\001\000\004" +
    "\057\u03a0\001\001\000\002\001\001\000\004\006\u03b1\001" +
    "\001\000\006\005\u02c3\006\u03ac\001\001\000\010\003\u0447" +
    "\006\u0446\020\u03c0\001\001\000\014\124\u02e1\125\u02e0\126" +
    "\u02df\127\u02dd\132\u02dc\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u038a\001\001\000\004\003\u037f\001" +
    "\001\000\004\003\u0385\001\001\000\010\003\u044d\005\u044c" +
    "\021\u02ba\001\001\000\002\001\001\000\004\057\u02c0\001" +
    "\001\000\004\003\u02d0\001\001\000\014\003\u0450\005\u044c" +
    "\006\u0446\020\u0376\021\u0375\001\001\000\004\057\u02c0\001" +
    "\001\000\014\124\u02e1\125\u02e0\126\u02df\127\u02dd\132\u02dc" +
    "\001\001\000\006\005\u02c3\006\u038a\001\001\000\002\001" +
    "\001\000\012\003\014\004\007\005\011\007\u0455\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String nombre_mapa;
    public static Dimension dimension;
    public static boolean azar_,mapaciego_,acumular_;
    public static int finalizacion_,planetasNeutrales_;
    public static planeta_neutral neutral_;
    public static Object[] pbj;
    public static ArrayList<planeta_neutral> array_neutrales;
    public static ArrayList<planeta_jugador> array_planetas;
    public static ArrayList<planeta_jugador> array_planetas_;
    public static ArrayList<jugador> array_jugadores;
    public static String tipo_player;
    public static String nombre_player;
    public static String neutralesNombre_;
    public static int neutralesNaves_,neutralesProduc_;
    public static double neutralesMuertes; 
    public static ArrayList<ErrorSintatico> listaErrores;
    public static String mensaje_error;
    public static int arrayCod[];
  //  public static boolean validaciones1_,boolean validaciones2_;
    public void syntax_error(Symbol s){
        System.out.println(mensaje_error);
        listaErrores.add(new ErrorSintatico(s,"Corrija la sintaxis antes del token",false));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // PLAYERS8 ::= human 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // PLAYERS8 ::= easy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // PLAYERS8 ::= hard 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // PLAYERS7 ::= error PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // PLAYERS7 ::= error dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // PLAYERS7 ::= error type dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // PLAYERS7 ::= type dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // PLAYERS6 ::= error cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // PLAYERS6 ::= error PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // PLAYERS6 ::= coma PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // PLAYERS6 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // PLAYERS5 ::= error PLAYERS6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // PLAYERS5 ::= error COMILLA2 PLAYERS6 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de un jugador";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // PLAYERS5 ::= error id COMILLA2 PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
String msj="Error de sintaxis en declaracion  del jugador \n";
msj+=e;
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // PLAYERS5 ::= error COMILLA1 id COMILLA2 PLAYERS6 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
String msj="Error de sintaxis en declaracion  del jugador \n";
msj+=e;
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // PLAYERS5 ::= COMILLA1 id COMILLA2 PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // PLAYERS4 ::= error abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de  \" [ \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // PLAYERS4 ::= error dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de  \": [ \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // PLAYERS4 ::= error earths dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de \"planetas: [\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // PLAYERS4 ::= earths dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // PLAYERS3 ::= error COMILLA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // PLAYERS3 ::= error id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // PLAYERS3 ::= error COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // PLAYERS3 ::= error dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+" \" "+e+" \"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // PLAYERS3 ::= error name dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+":\""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // PLAYERS3 ::= name dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  parser.nombre_player=(String )e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // PLAYERSAUX3 ::= error PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // PLAYERSAUX3 ::= error coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // PLAYERSAUX3 ::= PLAYERS3 coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // PLAYERSAUX3 ::= PLAYERS4 coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // PLAYERSAUX2 ::= error PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // PLAYERSAUX2 ::= error coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // PLAYERSAUX2 ::= PLAYERS7 coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // PLAYERSAUX2 ::= PLAYERS3 coma PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // PLAYERSAUX1 ::= error PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // PLAYERSAUX1 ::= error coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // PLAYERSAUX1 ::= PLAYERS7 coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // PLAYERSAUX1 ::= PLAYERS4 coma PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // PLAYERS2 ::= error coma PLAYERSAUX2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // PLAYERS2 ::= error coma PLAYERSAUX1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // PLAYERS2 ::= PLAYERS7 coma PLAYERSAUX3 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // PLAYERS2 ::= PLAYERS4 coma PLAYERSAUX2 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // PLAYERS2 ::= PLAYERS3 coma PLAYERSAUX1 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // PLAYERS9 ::= error cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // PLAYERS9 ::= error PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // PLAYERS9 ::= error abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // PLAYERS9 ::= error coma abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // PLAYERS9 ::= coma abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // PLAYERS9 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // PLAYERS1 ::= error PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // PLAYERS1 ::= error cierraParentesis PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // PLAYERS1 ::= PLAYERS2 cierraParentesis PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // OPPN5 ::= error OPPNAUX13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // OPPN5 ::= OPPNAUX13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // OPPN5 ::= OPP41 coma OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // OPPNAUX4 ::= error coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // OPPNAUX4 ::= error coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // OPPNAUX4 ::= OPPN5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OPPNAUX4 ::= OPP31 coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // OPPNAUX4 ::= OPP21 coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // OPPNAUX12 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // OPPNAUX12 ::= error coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // OPPNAUX12 ::= error coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // OPPNAUX12 ::= OPP31 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // OPPNAUX12 ::= OPP21 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // OPPNAUX3 ::= error coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // OPPNAUX3 ::= OPP51 coma OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // OPPNAUX3 ::= OPP31 coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // OPPNAUX3 ::= OPP21 coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // OPPNAUX10 ::= error coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // OPPNAUX10 ::= OPP51 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // OPPNAUX10 ::= OPP21 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // OPPNAUX9 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OPPNAUX9 ::= error coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OPPNAUX9 ::= OPP21 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // OPPNAUX9 ::= OPP41 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // OPPN4 ::= error coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // OPPN4 ::= OPPNAUX11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // OPPN4 ::= OPP41 coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // OPPNAUX2 ::= error coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OPPNAUX2 ::= error coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OPPNAUX2 ::= OPP51 coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OPPNAUX2 ::= OPPN4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // OPPNAUX2 ::= OPP21 coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // OPPN3 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // OPPN3 ::= error OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // OPPN3 ::= error coma OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // OPPN3 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // OPPN3 ::= coma OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // OPPNAUX8 ::= OPP31 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // OPPNAUX8 ::= OPP41 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // OPPNAUX5 ::= OPP51 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // OPPNAUX5 ::= OPP41 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // OPPNAUX6 ::= error coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // OPPNAUX6 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // OPPNAUX6 ::= error coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // OPPNAUX6 ::= OPP51 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // OPPNAUX6 ::= OPP31 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // OPPN2 ::= error coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // OPPN2 ::= OPPNAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OPPN2 ::= OPP41 coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // OPPNAUX1 ::= error coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // OPPNAUX1 ::= error coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // OPPNAUX1 ::= OPP51 coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // OPPNAUX1 ::= OPPN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // OPPNAUX1 ::= OPP31 coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // OPPN1 ::= OPP51 coma OPPNAUX4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_));
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OPPN1 ::= OPP41 coma OPPNAUX3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // OPPN1 ::= OPP31 coma OPPNAUX2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OPPN1 ::= OPP21 coma OPPNAUX1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OPP51 ::= error decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \"cantidad de "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // OPP51 ::= error dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \" : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // OPP51 ::= error deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \"procentajeMuertes : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // OPP51 ::= deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // OPP41 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta neutral \n";
msj+= " antes  de la declaracion de \" la cantidad de "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // OPP41 ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta neutral \n";
msj+= " antes  de la declaracion de \"produccion : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // OPP41 ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OPP31 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta neutral \n";
msj+= " antes  de la declaracion de \" : "+e+"  \", falta el token naves";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OPP31 ::= error ships dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta neutral \n";
msj+= " antes  de la declaracion de \" naves: "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OPP31 ::= ships dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OPP21 ::= error id NT$3 COMILLA2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion del id,error en las comillas \"  "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OPP21 ::= error COMILLA1 id NT$2 COMILLA2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion del id \" \" "+e+" \" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPP21 ::= error name dosPuntos COMILLA1 id NT$1 COMILLA2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion de la \" nombre: \" "+e+" \" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OPP21 ::= name dosPuntos COMILLA1 id NT$0 COMILLA2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OPPN01 ::= coma abreParentesis OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // OPPN01 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OPPN0 ::= OPPN1 OPPN01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN0",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OPPAUX4 ::= OPP4 coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OPPAUX4 ::= OPP3 coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OPPAUX4 ::= OPP2 coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OPPAUX10 ::= OPP3 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPPAUX10 ::= OPP2 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPPAUX3 ::= OPP5 coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPPAUX3 ::= OPP3 coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPPAUX3 ::= OPP2 coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OPPAUX9 ::= OPP2 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OPPAUX9 ::= OPP4 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OPPAUX8 ::= OPP5 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPPAUX8 ::= OPP2 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPPAUX2 ::= OPP5 coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPPAUX2 ::= OPP4 coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPPAUX2 ::= OPP2 coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPPAUX7 ::= OPP3 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPPAUX7 ::= OPP4 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OPPAUX6 ::= OPP5 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OPPAUX6 ::= OPP3 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OPPAUX5 ::= OPP5 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OPPAUX5 ::= OPP4 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OPPAUX1 ::= OPP5 coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPPAUX1 ::= OPP4 coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPPAUX1 ::= OPP3 coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPP1 ::= OPP5 coma OPPAUX4 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPP1 ::= OPP4 coma OPPAUX3 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPP1 ::= OPP3 coma OPPAUX2 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPP1 ::= OPP2 coma OPPAUX1 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPP5 ::= error decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPP5 ::= error dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de muertes de un planeta \n";
msj+= " antes  de la declaracion de la \" :"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPP5 ::= error deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de muertes de un planeta \n";
msj+= " antes  de la declaracion de la  \" procentajeMuertes: "+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPP5 ::= deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPP4 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
String msj="Error de sintaxis en declaracion  de produccion de un planeta \n";
msj+= " antes  de la declaracion de la  \" cantidad "+e+" \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPP4 ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta \n";
msj+= " antes  de \" produccion:"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPP4 ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OPP3 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta \n";
msj+= " antes de \" :"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e,e1left,eright,msj,true));
 parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPP3 ::= error ships dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
String msj="Error de sintaxis en declaracion  de naves de un planeta \n";
msj+= " antes  de \" naves:"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPP3 ::= ships dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPP2 ::= error COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta \n no se agrego correctamente \n";
msj+= " antes  de comilla";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPP2 ::= error id COMILLA2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" "+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPP2 ::= error COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" \""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OPP2 ::= error name dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" nombre:\""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OPP2 ::= name dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OPP01 ::= coma abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OPP01 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OPP0 ::= OPP1 cierraParentesis OPP01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FINALIZACION ::= error end dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  FINALIZACION\n";
msj+= "antes de  \" finalizacion:"+e1+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.finalizacion_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALIZACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FINALIZACION ::= end dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.finalizacion_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALIZACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NEUTRALES ::= error OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NEUTRALES ::= error abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES\n";
msj+= " antes de \"{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NEUTRALES ::= error dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES \n";
msj+= " antes de \":{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NEUTRALES ::= error Neu dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES \n";
msj+= " antes de \""+e1+":{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NEUTRALES ::= Neu dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ACUMULAR ::= error dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.acumular_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de ACUMULAR \n";
msj+= "\""+e1+" "+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ACUMULAR ::= error acum dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.acumular_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de ACUMULAR \n";
msj+= "\""+e1+": "+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ACUMULAR ::= acum dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.acumular_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // MAPA_CIEGO ::= error mapaCiego dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.mapaciego_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de MAPA CIEGO \n";
msj+= "\" "+e1+":"+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA_CIEGO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // MAPA_CIEGO ::= mapaCiego dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.mapaciego_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA_CIEGO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PLANETA_NEUTRALES ::= error num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e1);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES\n ";
msj+= "\" cantidad de planetas neutrales tomado "+e1+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PLANETA_NEUTRALES ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES \n";
msj+= "\" :"+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PLANETA_NEUTRALES ::= error planetasNeu dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES \n";
msj+= "\" "+e1+":"+e+" \" ";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PLANETA_NEUTRALES ::= planetasNeu dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.planetasNeutrales_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AZAR_MAPA ::= error bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.azar_=Boolean.parseBoolean((String)e1);
String msj="Error de sintaxis en declaracion de AZAR \" valor de azar tomado"+e1+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // AZAR_MAPA ::= error azar dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.azar_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de AZAR. \" "+e1+":"+e+" \"\n ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // AZAR_MAPA ::= azar dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.azar_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DIMENSIONES_MAPA ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en dimensiones del mapa antes de cerrar parentesis tamaño:{ aqui->}";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DIMENSIONES_MAPA ::= error OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error antes de cierraParentesis en los datos de las dimensiones";
listaErrores.add(new ErrorSintatico((String)e,eleft-1,eright-1,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DIMENSIONES_MAPA ::= error abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en dimensiones del mapa antes de \n abrir parentesis tamaño:->{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DIMENSIONES_MAPA ::= error dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis en dimensiones del \n mapa antes de dos puntos tamaño->:{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DIMENSIONES_MAPA ::= error tamaño dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis en dimensiones del \n mapa antes de \"tamaño\" ->tamaño:{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DIMENSIONES_MAPA ::= tamaño dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NOMBRE_MAPA ::= error COMILLA2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.nombre_mapa="MAPA";
String msj="Error de sintaxis en la declaracion del \n nombre del mapa en la linea de declaracion";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NOMBRE_MAPA ::= error id COMILLA2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de cierre de comilla ";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NOMBRE_MAPA ::= error COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \""+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NOMBRE_MAPA ::= error dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \":"+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NOMBRE_MAPA ::= error name_mapa dosPuntos COMILLA1 id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \"id:"+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NOMBRE_MAPA ::= name_mapa dosPuntos COMILLA1 id COMILLA2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SHOWPRODUCCION ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[2]=Integer.parseInt((String)e);
String msj="Error de sintaxis en la declaracion cantidad de produccion de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWPRODUCCION",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SHOWPRODUCCION ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[2]=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWPRODUCCION",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SHOWESTADISTICAS ::= error mostrarEstadisticas dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[1]=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en la declaracion mostrar estadisticas de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWESTADISTICAS",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SHOWESTADISTICAS ::= mostrarEstadisticas dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[1]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWESTADISTICAS",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SHOWNAVES ::= error bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SHOWNAVES ::= error mostrarNaves dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[0]=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en la declaracion mostrar naves de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SHOWNAVES ::= mostrarNaves dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[0]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPM8 ::= error coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPM8 ::= SHOWESTADISTICAS coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPM8 ::= SHOWNAVES coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPM7 ::= error coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPM7 ::= SHOWPRODUCCION coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPM7 ::= SHOWNAVES coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPM6 ::= error coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPM6 ::= SHOWPRODUCCION coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPM6 ::= SHOWESTADISTICAS coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPM5 ::= error coma OPM8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPM5 ::= error coma OPM7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPM5 ::= error coma OPM6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPM5 ::= SHOWPRODUCCION coma OPM8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPM5 ::= SHOWESTADISTICAS coma OPM7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPM5 ::= SHOWNAVES coma OPM6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPM4 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas), antes de  \""+e+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPM4 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas), antes de  \":"+x+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPM4 ::= error rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de  \"filas:"+x+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPM4 ::= error coma rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=10;
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de  \",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPM4 ::= error num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de \""+e2+",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPM4 ::= error dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de  \":"+e2+",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPM4 ::= error columns dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de Columnas: \" columnas:+"+e2+",filas:"+e1+" \"";
listaErrores.add(new ErrorSintatico((String)x,xleft,xright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPM4 ::= error columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=10;
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas) antes de \"columnas:"+e2+", corrija el error";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPM4 ::= error coma columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=10;
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas) antes de \",columnas:"+e2+" \" corrija el error";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPM4 ::= error num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \":"+e1+",columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPM4 ::= error dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \":"+e1+",columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));



              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPM4 ::= error rows dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \"filas: "+x+", columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)x,xleft,xright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPM4 ::= columns dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPM4 ::= rows dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // JSONDATOS ::= NEUTRALES 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // JSONDATOS ::= PLANETA_NEUTRALES 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // JSONDATOS ::= DIMENSIONES_MAPA 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // JSONDATOS ::= ACUMULAR 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // JSONDATOS ::= FINALIZACION 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // JSONDATOS ::= MAPA_CIEGO 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // JSONDATOS ::= AZAR_MAPA 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // JSONDATOS ::= NOMBRE_MAPA 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // JSON7 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON7",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // JSON7 ::= coma JSONDATOS cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON7",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // JSON6 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON6",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // JSON6 ::= coma JSONDATOS JSON7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON6",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // JSON5 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON5",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // JSON5 ::= coma JSONDATOS JSON6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON5",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // JSON4 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON4",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // JSON4 ::= coma JSONDATOS JSON5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);



if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON4",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // JSON3 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON3",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // JSON3 ::= coma JSONDATOS JSON4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON3",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // JSON2 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // JSON2 ::= coma JSONDATOS JSON3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // JSON1 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // JSON1 ::= JSONDATOS JSON2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

if(xx==yy){
String msj="Error de sintaxis atributos repetidos entre";
switch(xx){
case 1:
msj+="NOMBRE DE MAPA";
break;
case 2:
msj+="DIMENSIONES DE MAPA";
break;
case 3:
msj+="PLANETAS NEUTRALES";
break;
case 4:
msj+="DECLARACION DE PLANETAS NEUTRALES";
break;

}

listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPM1 ::= cierraParentesis 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis atributos de MAPA no hay atributos definidos";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPM1 ::= JSONDATOS coma JSON1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String d=e2+""+e;


if(!d.equals("91")){
String msj="Error de sintaxis atributos de MAPA existen atributos por definir aun";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPTIONS16 ::= MAPA coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPTIONS16 ::= PLANETAS coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPTIONS15 ::= PLANETAS OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPTIONS15 ::= PLANETAS_NEUTRALES coma PLANETAS cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPTIONS14 ::= PLANETAS_NEUTRALES coma MAPA cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPTIONS14 ::= MAPA OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPTIONS4 ::= PLANETAS_NEUTRALES coma OPTIONS16 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPTIONS4 ::= MAPA coma OPTIONS15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPTIONS4 ::= PLANETAS coma OPTIONS14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPTIONS13 ::= MAPA coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPTIONS13 ::= PLANETAS coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPTIONS12 ::= error coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPTIONS12 ::= PLANETAS coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPTIONS12 ::= JUGADORES coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPTIONS11 ::= error coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPTIONS11 ::= JUGADORES coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPTIONS11 ::= MAPA coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPTIONS3 ::= error coma OPTIONS13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPTIONS3 ::= JUGADORES coma OPTIONS13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPTIONS3 ::= MAPA coma OPTIONS12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPTIONS3 ::= PLANETAS coma OPTIONS11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPTIONS10 ::= MAPA OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPTIONS10 ::= PLANETAS_NEUTRALES coma MAPA cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPTIONS9 ::= error coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPTIONS9 ::= MAPA coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPTIONS9 ::= JUGADORES coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPTIONS8 ::= error OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPTIONS8 ::= error coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPTIONS8 ::= JUGADORES OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPTIONS8 ::= PLANETAS_NEUTRALES coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPTIONS2 ::= error coma OPTIONS10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPTIONS2 ::= error coma OPTIONS9 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPTIONS2 ::= JUGADORES coma OPTIONS10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPTIONS2 ::= PLANETAS_NEUTRALES coma OPTIONS9 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPTIONS2 ::= MAPA coma OPTIONS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPTIONS7 ::= PLANETAS OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPTIONS7 ::= PLANETAS_NEUTRALES coma PLANETAS cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPTIONS6 ::= error coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPTIONS6 ::= PLANETAS coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPTIONS6 ::= JUGADORES coma 
            {
              Object RESULT =null;
		int PLANETASleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int PLANETASright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object PLANETAS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPTIONS0 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis despues de la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPTIONS0 ::= error PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPTIONS0 ::= error coma PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPTIONS0 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPTIONS0 ::= coma PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPTIONS5 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis despues de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPTIONS5 ::= error coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPTIONS5 ::= JUGADORES OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPTIONS5 ::= PLANETAS_NEUTRALES coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPTIONS1 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPTIONS1 ::= error coma OPTIONS7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPTIONS1 ::= error coma OPTIONS6 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPTIONS1 ::= error coma OPTIONS5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPTIONS1 ::= JUGADORES coma OPTIONS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTIONS1 ::= PLANETAS_NEUTRALES coma OPTIONS6 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPTIONS1 ::= PLANETAS coma OPTIONS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIONS ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIONS ::= error coma OPTIONS4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPTIONS ::= error coma OPTIONS3 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPTIONS ::= error coma OPTIONS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPTIONS ::= error coma OPTIONS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPTIONS ::= coma OPTIONS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPTIONS ::= PLANETAS_NEUTRALES coma OPTIONS3 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPTIONS ::= PLANETAS coma OPTIONS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPTIONS ::= MAPA coma OPTIONS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // JUGADORES ::= error PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // JUGADORES ::= error abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // JUGADORES ::= error players dosPuntos abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // JUGADORES ::= players dosPuntos abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ERRORES ::= OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORES",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ERRORES ::= OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORES",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PLANETAS_NEUTRALES ::= error dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PLANETAS_NEUTRALES ::= error planetas_Neu dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PLANETAS_NEUTRALES ::= planetas_Neu dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PLANETAS ::= error abreParentesis OPP0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PLANETAS ::= error planets dosPuntos abreCor abreParentesis OPP0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PLANETAS ::= planets dosPuntos abreCor abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAPA ::= error dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de MAPA";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAPA ::= error map dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de MAPA";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAPA ::= map dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMILLA2 ::= Comilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILLA2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMILLA2 ::= cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILLA2",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMILLA1 ::= Comilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILLA1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMILLA1 ::= abreComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILLA1",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error abreParentesis OPTIONS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de configuracion del juego";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= abreParentesis OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

