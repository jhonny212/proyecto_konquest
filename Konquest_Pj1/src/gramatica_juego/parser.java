
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 29 16:35:46 CST 2020
//----------------------------------------------------

package gramatica_juego;

       import classes.ErrorSintatico;
  import static gramatica_juego.parser.array_planetas;
import static gramatica_juego.parser.listaErrores;
import static gramatica_juego.parser.nombre_player;
import static gramatica_juego.parser.tipo_player;
import java_cup.runtime.Symbol;
import java.awt.Dimension;
import planetas_neutral.planeta_neutral;
import java.util.ArrayList;
import jugadores.dificil;
import jugadores.facil;
import jugadores.humano;
import jugadores.jugador;
import planetas.planeta_jugador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 29 16:35:46 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\003\006\000\002\003\007" +
    "\000\002\003\006\000\002\004\007\000\002\004\010\000" +
    "\002\004\005\000\002\005\007\000\002\005\010\000\002" +
    "\005\007\000\002\154\003\000\002\154\003\000\002\006" +
    "\007\000\002\006\010\000\002\006\006\000\002\006\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\006\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\006\000\002\007\005\000\002\007\004\000\002\010" +
    "\005\000\002\010\006\000\002\010\005\000\002\010\005" +
    "\000\002\010\006\000\002\010\005\000\002\010\004\000" +
    "\002\014\006\000\002\014\004\000\002\014\006\000\002" +
    "\014\004\000\002\057\005\000\002\057\003\000\002\057" +
    "\006\000\002\057\005\000\002\057\004\000\002\015\004" +
    "\000\002\015\005\000\002\015\005\000\002\016\006\000" +
    "\002\016\004\000\002\011\005\000\002\011\006\000\002" +
    "\011\005\000\002\011\006\000\002\011\005\000\002\017" +
    "\006\000\002\017\004\000\002\017\006\000\002\017\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\006\000\002\021\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\025\004\000\002\025\006\000\002\026" +
    "\006\000\002\026\004\000\002\027\005\000\002\027\005" +
    "\000\002\031\005\000\002\031\003\000\002\141\004\000" +
    "\002\141\003\000\002\142\005\000\002\142\003\000\002" +
    "\143\005\000\002\143\003\000\002\144\005\000\002\144" +
    "\003\000\002\145\005\000\002\145\003\000\002\146\005" +
    "\000\002\146\003\000\002\147\005\000\002\147\003\000" +
    "\002\150\003\000\002\150\003\000\002\150\003\000\002" +
    "\150\003\000\002\150\003\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\033\011\000\002\033\011" +
    "\000\002\033\012\000\002\033\011\000\002\033\010\000" +
    "\002\033\007\000\002\033\006\000\002\033\012\000\002" +
    "\033\011\000\002\033\010\000\002\033\007\000\002\033" +
    "\006\000\002\033\005\000\002\033\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\151\005\000\002\151\006\000" +
    "\002\151\004\000\002\152\005\000\002\152\006\000\002" +
    "\153\005\000\002\153\006\000\002\040\007\000\002\040" +
    "\010\000\002\040\007\000\002\040\006\000\002\040\005" +
    "\000\002\040\004\000\002\041\007\000\002\041\010\000" +
    "\002\041\007\000\002\041\006\000\002\041\005\000\002" +
    "\041\004\000\002\042\005\000\002\042\006\000\002\042" +
    "\004\000\002\043\005\000\002\043\006\000\002\043\005" +
    "\000\002\043\004\000\002\044\005\000\002\044\006\000" +
    "\002\045\005\000\002\045\006\000\002\045\005\000\002" +
    "\046\007\000\002\046\010\000\002\046\007\000\002\046" +
    "\006\000\002\046\005\000\002\047\005\000\002\047\006" +
    "\000\002\055\005\000\002\056\003\000\002\056\005\000" +
    "\002\051\007\000\002\051\010\000\002\051\006\000\002" +
    "\051\005\000\002\051\004\000\002\052\005\000\002\052" +
    "\006\000\002\052\005\000\002\053\005\000\002\053\006" +
    "\000\002\053\004\000\002\054\005\000\002\054\006\000" +
    "\002\054\005\000\002\054\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\066\005" +
    "\000\002\066\005\000\002\067\005\000\002\067\005\000" +
    "\002\070\005\000\002\070\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\071\005\000\002\071" +
    "\005\000\002\072\005\000\002\072\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\073\005\000" +
    "\002\073\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\101\004\000\002\102\003\000\002\102" +
    "\005\000\002\155\002\000\002\103\010\000\002\156\002" +
    "\000\002\103\011\000\002\157\002\000\002\103\007\000" +
    "\002\160\002\000\002\103\006\000\002\104\005\000\002" +
    "\104\006\000\002\104\005\000\002\105\005\000\002\105" +
    "\006\000\002\105\004\000\002\106\005\000\002\106\006" +
    "\000\002\106\005\000\002\106\004\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\107\005\000\002\107\003\000\002\107\005\000\002\107" +
    "\005\000\002\107\005\000\002\075\005\000\002\075\003" +
    "\000\002\075\005\000\002\114\006\000\002\114\006\000" +
    "\002\114\006\000\002\114\004\000\002\114\006\000\002" +
    "\113\006\000\002\113\004\000\002\116\006\000\002\116" +
    "\004\000\002\076\005\000\002\076\003\000\002\076\006" +
    "\000\002\076\005\000\002\076\004\000\002\110\005\000" +
    "\002\110\003\000\002\110\005\000\002\110\005\000\002" +
    "\110\005\000\002\077\005\000\002\077\003\000\002\077" +
    "\005\000\002\117\006\000\002\117\004\000\002\117\006" +
    "\000\002\117\004\000\002\120\006\000\002\120\006\000" +
    "\002\120\006\000\002\111\005\000\002\111\005\000\002" +
    "\111\005\000\002\111\005\000\002\122\006\000\002\122" +
    "\006\000\002\122\006\000\002\122\006\000\002\122\004" +
    "\000\002\112\005\000\002\112\005\000\002\112\003\000" +
    "\002\112\005\000\002\112\005\000\002\100\005\000\002" +
    "\100\003\000\002\100\004\000\002\124\005\000\002\124" +
    "\005\000\002\124\004\000\002\134\003\000\002\134\005" +
    "\000\002\134\006\000\002\134\005\000\002\134\004\000" +
    "\002\134\004\000\002\125\005\000\002\125\005\000\002" +
    "\125\005\000\002\125\005\000\002\125\005\000\002\135" +
    "\005\000\002\135\005\000\002\135\005\000\002\135\004" +
    "\000\002\136\005\000\002\136\005\000\002\136\005\000" +
    "\002\136\004\000\002\137\005\000\002\137\005\000\002" +
    "\137\005\000\002\137\004\000\002\126\007\000\002\126" +
    "\010\000\002\126\007\000\002\126\006\000\002\126\005" +
    "\000\002\126\004\000\002\127\006\000\002\127\007\000" +
    "\002\127\006\000\002\127\005\000\002\130\006\000\002" +
    "\130\007\000\002\130\006\000\002\130\005\000\002\130" +
    "\004\000\002\131\003\000\002\131\004\000\002\131\004" +
    "\000\002\131\004\000\002\132\005\000\002\132\006\000" +
    "\002\132\005\000\002\132\004\000\002\133\003\000\002" +
    "\133\003\000\002\133\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u044f\000\006\003\004\004\005\001\002\000\016\003" +
    "\017\004\u0450\007\010\013\013\031\014\035\020\001\002" +
    "\000\014\003\017\007\010\013\013\031\014\035\020\001" +
    "\002\000\004\002\007\001\002\000\004\002\001\001\002" +
    "\000\004\006\u044c\001\002\000\004\013\u0431\001\002\000" +
    "\004\013\u0416\001\002\000\012\003\u02b7\007\010\031\014" +
    "\035\020\001\002\000\004\006\u0401\001\002\000\004\013" +
    "\u03de\001\002\000\004\002\000\001\002\000\020\004\u0102" +
    "\005\u0101\006\u0104\007\u0105\013\u0103\031\u0106\035\u0107\001" +
    "\002\000\004\006\021\001\002\000\004\040\022\001\002" +
    "\000\004\004\023\001\002\000\014\003\034\027\027\032" +
    "\024\033\035\034\033\001\002\000\004\006\374\001\002" +
    "\000\004\013\347\001\002\000\004\013\306\001\002\000" +
    "\004\006\304\001\002\000\006\013\300\041\277\001\002" +
    "\000\006\005\ufff7\013\ufff7\001\002\000\004\013\217\001" +
    "\002\000\004\006\215\001\002\000\024\006\211\010\053" +
    "\027\052\032\047\033\210\034\056\046\054\047\050\050" +
    "\055\001\002\000\004\006\206\001\002\000\004\013\037" +
    "\001\002\000\012\003\045\027\027\032\024\034\033\001" +
    "\002\000\004\013\177\001\002\000\004\013\170\001\002" +
    "\000\006\013\ufeef\041\ufeef\001\002\000\006\013\ufef4\041" +
    "\ufef4\001\002\000\004\013\156\001\002\000\024\006\057" +
    "\010\053\013\051\027\052\032\047\034\056\046\054\047" +
    "\050\050\055\001\002\000\006\013\uff0e\041\uff0e\001\002" +
    "\000\004\006\151\001\002\000\004\011\uff1b\001\002\000" +
    "\012\003\076\027\027\032\024\034\033\001\002\000\004" +
    "\006\066\001\002\000\004\047\063\001\002\000\010\003" +
    "\uff10\005\uff10\013\uff10\001\002\000\004\013\uff14\001\002" +
    "\000\004\006\061\001\002\000\004\046\060\001\002\000" +
    "\010\003\uff11\005\uff11\013\uff11\001\002\000\004\046\062" +
    "\001\002\000\010\003\uff12\005\uff12\013\uff12\001\002\000" +
    "\004\011\uff1d\001\002\000\004\011\065\001\002\000\010" +
    "\003\uff1c\005\uff1c\013\uff1c\001\002\000\004\050\067\001" +
    "\002\000\004\013\uff15\001\002\000\010\003\113\005\114" +
    "\013\142\001\002\000\010\003\113\005\114\013\115\001" +
    "\002\000\006\013\ufeee\041\ufeee\001\002\000\006\013\ufef1" +
    "\041\ufef1\001\002\000\004\013\106\001\002\000\006\013" +
    "\ufef2\041\ufef2\001\002\000\026\005\077\006\057\010\053" +
    "\013\100\027\052\032\047\034\056\046\054\047\050\050" +
    "\055\001\002\000\006\013\ufeea\041\ufeea\001\002\000\010" +
    "\003\102\032\024\034\033\001\002\000\004\005\105\001" +
    "\002\000\016\006\057\010\053\032\047\034\056\046\054" +
    "\047\050\001\002\000\004\005\104\001\002\000\006\013" +
    "\ufeeb\041\ufeeb\001\002\000\006\013\ufee7\041\ufee7\001\002" +
    "\000\010\003\102\032\024\034\033\001\002\000\004\005" +
    "\112\001\002\000\004\005\111\001\002\000\006\013\ufeed" +
    "\041\ufeed\001\002\000\006\013\ufefe\041\ufefe\001\002\000" +
    "\012\003\134\005\135\013\136\027\122\001\002\000\006" +
    "\013\ufef9\041\ufef9\001\002\000\010\003\121\027\122\034" +
    "\033\001\002\000\006\013\ufeec\041\ufeec\001\002\000\004" +
    "\005\132\001\002\000\004\005\131\001\002\000\014\006" +
    "\057\027\126\034\056\046\054\050\125\001\002\000\004" +
    "\006\123\001\002\000\004\050\124\001\002\000\006\005" +
    "\uff47\013\uff47\001\002\000\006\005\uff45\013\uff45\001\002" +
    "\000\004\006\127\001\002\000\004\050\130\001\002\000" +
    "\006\005\uff46\013\uff46\001\002\000\006\013\ufee9\041\ufee9" +
    "\001\002\000\006\013\ufefa\041\ufefa\001\002\000\004\005" +
    "\141\001\002\000\006\027\126\050\125\001\002\000\006" +
    "\013\ufef6\041\ufef6\001\002\000\006\003\134\027\122\001" +
    "\002\000\004\005\140\001\002\000\006\013\ufef8\041\ufef8" +
    "\001\002\000\006\013\ufef7\041\ufef7\001\002\000\010\003" +
    "\144\027\122\032\024\001\002\000\006\013\ufefd\041\ufefd" +
    "\001\002\000\014\010\053\027\126\032\047\047\050\050" +
    "\125\001\002\000\004\005\146\001\002\000\006\013\ufee8" +
    "\041\ufee8\001\002\000\004\011\150\001\002\000\010\003" +
    "\uff1a\005\uff1a\013\uff1a\001\002\000\004\010\152\001\002" +
    "\000\004\047\153\001\002\000\004\011\uff1f\001\002\000" +
    "\004\011\155\001\002\000\010\003\uff1e\005\uff1e\013\uff1e" +
    "\001\002\000\010\003\160\032\024\034\033\001\002\000" +
    "\004\013\166\001\002\000\020\006\057\010\053\013\165" +
    "\032\047\034\056\046\054\047\050\001\002\000\006\013" +
    "\ufef0\041\ufef0\001\002\000\004\013\163\001\002\000\006" +
    "\003\164\034\033\001\002\000\010\006\057\034\056\046" +
    "\054\001\002\000\006\003\164\034\033\001\002\000\006" +
    "\003\167\032\024\001\002\000\010\010\053\032\047\047" +
    "\050\001\002\000\010\003\173\027\027\034\033\001\002" +
    "\000\004\013\176\001\002\000\010\003\113\005\114\013" +
    "\175\001\002\000\014\006\057\027\052\034\056\046\054" +
    "\050\055\001\002\000\006\013\ufef5\041\ufef5\001\002\000" +
    "\006\003\134\027\122\001\002\000\006\003\164\034\033" +
    "\001\002\000\010\003\201\027\027\032\024\001\002\000" +
    "\004\013\205\001\002\000\020\005\077\010\053\013\204" +
    "\027\052\032\047\047\050\050\055\001\002\000\006\013" +
    "\ufef3\041\ufef3\001\002\000\010\003\113\005\114\013\175" +
    "\001\002\000\006\003\167\032\024\001\002\000\006\003" +
    "\167\032\024\001\002\000\004\050\207\001\002\000\010" +
    "\003\uff19\005\uff19\013\uff19\001\002\000\004\006\213\001" +
    "\002\000\006\046\060\050\212\001\002\000\010\003\uff17" +
    "\005\uff17\013\uff17\001\002\000\004\050\214\001\002\000" +
    "\010\003\uff18\005\uff18\013\uff18\001\002\000\004\046\216" +
    "\001\002\000\010\003\uff13\005\uff13\013\uff13\001\002\000" +
    "\012\003\221\032\024\033\035\034\033\001\002\000\004" +
    "\013\255\001\002\000\022\006\211\010\053\013\253\032" +
    "\047\033\210\034\056\046\054\047\050\001\002\000\004" +
    "\013\227\001\002\000\004\013\225\001\002\000\006\013" +
    "\uff0d\041\uff0d\001\002\000\010\003\160\032\024\034\033" +
    "\001\002\000\006\013\ufee5\041\ufee5\001\002\000\010\003" +
    "\231\033\035\034\033\001\002\000\004\013\246\001\002" +
    "\000\016\005\237\006\211\013\240\033\210\034\056\046" +
    "\054\001\002\000\006\013\ufee6\041\ufee6\001\002\000\004" +
    "\013\234\001\002\000\006\003\164\034\033\001\002\000" +
    "\004\005\236\001\002\000\006\013\uff03\041\uff03\001\002" +
    "\000\006\013\uff00\041\uff00\001\002\000\010\003\242\033" +
    "\035\034\033\001\002\000\004\005\245\001\002\000\012" +
    "\006\211\033\210\034\056\046\054\001\002\000\004\005" +
    "\244\001\002\000\006\013\ufeff\041\ufeff\001\002\000\006" +
    "\013\uff01\041\uff01\001\002\000\006\003\247\033\035\001" +
    "\002\000\006\006\252\033\210\001\002\000\004\005\251" +
    "\001\002\000\006\013\uff02\041\uff02\001\002\000\004\050" +
    "\212\001\002\000\010\003\231\033\035\034\033\001\002" +
    "\000\006\013\ufee3\041\ufee3\001\002\000\010\003\256\032" +
    "\024\033\035\001\002\000\020\005\270\006\252\010\053" +
    "\013\271\032\047\033\210\047\050\001\002\000\006\013" +
    "\ufee4\041\ufee4\001\002\000\004\013\265\001\002\000\004" +
    "\013\262\001\002\000\006\003\167\032\024\001\002\000" +
    "\004\005\264\001\002\000\006\013\ufee1\041\ufee1\001\002" +
    "\000\006\003\247\033\035\001\002\000\004\005\267\001" +
    "\002\000\006\013\ufee2\041\ufee2\001\002\000\006\013\ufede" +
    "\041\ufede\001\002\000\010\003\272\032\024\033\035\001" +
    "\002\000\014\006\252\010\053\032\047\033\210\047\050" +
    "\001\002\000\004\005\276\001\002\000\004\005\275\001" +
    "\002\000\006\013\ufee0\041\ufee0\001\002\000\006\013\ufedf" +
    "\041\ufedf\001\002\000\006\005\uff23\013\uff23\001\002\000" +
    "\004\004\302\001\002\000\006\005\uff24\013\uff24\001\002" +
    "\000\014\003\034\027\027\032\024\033\035\034\033\001" +
    "\002\000\006\005\uff22\013\uff22\001\002\000\004\050\305" +
    "\001\002\000\004\013\uff16\001\002\000\012\003\313\027" +
    "\027\033\035\034\033\001\002\000\004\013\341\001\002" +
    "\000\006\013\uff0a\041\uff0a\001\002\000\004\013\337\001" +
    "\002\000\006\013\uff05\041\uff05\001\002\000\020\006\211" +
    "\013\320\027\052\033\210\034\056\046\054\050\055\001" +
    "\002\000\004\013\316\001\002\000\006\013\uff0f\041\uff0f" +
    "\001\002\000\010\003\173\027\027\034\033\001\002\000" +
    "\006\013\uff0b\041\uff0b\001\002\000\012\003\326\027\027" +
    "\033\035\034\033\001\002\000\010\003\113\005\114\013" +
    "\335\001\002\000\004\013\332\001\002\000\006\013\uff07" +
    "\041\uff07\001\002\000\006\013\uff04\041\uff04\001\002\000" +
    "\006\013\uff08\041\uff08\001\002\000\022\005\237\006\211" +
    "\013\240\027\052\033\210\034\056\046\054\050\055\001" +
    "\002\000\010\003\113\005\114\013\330\001\002\000\010" +
    "\003\121\027\122\034\033\001\002\000\006\013\ufefb\041" +
    "\ufefb\001\002\000\010\003\242\033\035\034\033\001\002" +
    "\000\004\005\334\001\002\000\006\013\ufefc\041\ufefc\001" +
    "\002\000\010\003\336\027\122\033\035\001\002\000\012" +
    "\006\252\027\126\033\210\050\125\001\002\000\010\003" +
    "\231\033\035\034\033\001\002\000\006\013\uff06\041\uff06" +
    "\001\002\000\010\003\343\027\027\033\035\001\002\000" +
    "\004\013\346\001\002\000\012\006\252\027\052\033\210" +
    "\050\055\001\002\000\006\013\uff09\041\uff09\001\002\000" +
    "\010\003\113\005\114\013\175\001\002\000\006\003\247" +
    "\033\035\001\002\000\012\003\355\027\027\032\024\033" +
    "\035\001\002\000\004\013\372\001\002\000\006\013\ufed7" +
    "\041\ufed7\001\002\000\006\013\ufedb\041\ufedb\001\002\000" +
    "\004\013\370\001\002\000\006\013\uff0c\041\uff0c\001\002" +
    "\000\022\006\252\010\053\013\362\027\052\032\047\033" +
    "\210\047\050\050\055\001\002\000\004\013\357\001\002" +
    "\000\010\003\201\027\027\032\024\001\002\000\006\013" +
    "\ufedc\041\ufedc\001\002\000\006\013\ufed6\041\ufed6\001\002" +
    "\000\012\003\366\027\027\032\024\033\035\001\002\000" +
    "\006\013\ufed9\041\ufed9\001\002\000\004\013\367\001\002" +
    "\000\006\013\ufeda\041\ufeda\001\002\000\024\005\077\006" +
    "\252\010\053\013\204\027\052\032\047\033\210\047\050" +
    "\050\055\001\002\000\010\003\272\032\024\033\035\001" +
    "\002\000\010\003\256\032\024\033\035\001\002\000\006" +
    "\013\ufed8\041\ufed8\001\002\000\010\003\343\027\027\033" +
    "\035\001\002\000\006\013\ufedd\041\ufedd\001\002\000\004" +
    "\010\375\001\002\000\004\047\376\001\002\000\004\011" +
    "\uff21\001\002\000\004\011\u0100\001\002\000\010\003\uff20" +
    "\005\uff20\013\uff20\001\002\000\004\002\uffe6\001\002\000" +
    "\014\003\u0113\027\122\032\u010f\033\u0114\034\u0110\001\002" +
    "\000\014\003\u02aa\007\010\031\014\035\020\036\u02a7\001" +
    "\002\000\006\004\u02a2\040\u02a1\001\002\000\004\006\u019b" +
    "\001\002\000\004\006\u010c\001\002\000\004\006\u0108\001" +
    "\002\000\004\040\u0109\001\002\000\004\004\u010a\001\002" +
    "\000\014\003\034\027\027\032\024\033\035\034\033\001" +
    "\002\000\006\005\ufff6\013\ufff6\001\002\000\004\040\u010d" +
    "\001\002\000\004\004\u010e\001\002\000\014\003\u0113\027" +
    "\122\032\u010f\033\u0114\034\u0110\001\002\000\004\006\u0197" +
    "\001\002\000\004\006\u0195\001\002\000\004\013\u0189\001" +
    "\002\000\004\013\u0176\001\002\000\026\006\u0127\010\u0157" +
    "\011\u0156\027\126\032\u0154\033\u0125\034\u0128\046\u0126\047" +
    "\u0155\050\125\001\002\000\004\006\u0174\001\002\000\004" +
    "\013\u014e\001\002\000\004\013\u011f\001\002\000\004\005" +
    "\u0119\001\002\000\010\003\ufff9\005\ufff9\013\ufff9\001\002" +
    "\000\006\013\u011c\041\u011a\001\002\000\010\003\uff51\005" +
    "\uff51\013\uff51\001\002\000\010\003\uff52\005\uff52\013\uff52" +
    "\001\002\000\004\004\u011d\001\002\000\014\003\u0113\027" +
    "\122\032\u010f\033\u0114\034\u0110\001\002\000\010\003\uff50" +
    "\005\uff50\013\uff50\001\002\000\012\003\u0123\027\122\033" +
    "\u0114\034\u0110\001\002\000\004\013\u0145\001\002\000\004" +
    "\013\u013a\001\002\000\004\013\u012f\001\002\000\016\006" +
    "\u0127\027\126\033\u0125\034\u0128\046\u0126\050\125\001\002" +
    "\000\004\005\uff40\001\002\000\004\006\u012d\001\002\000" +
    "\006\005\uff41\013\uff41\001\002\000\006\046\u012b\050\u012c" +
    "\001\002\000\004\006\u0129\001\002\000\004\046\u012a\001" +
    "\002\000\006\005\uff43\013\uff43\001\002\000\006\005\uff42" +
    "\013\uff42\001\002\000\006\005\uff48\013\uff48\001\002\000" +
    "\004\050\u012e\001\002\000\006\005\uff49\013\uff49\001\002" +
    "\000\010\003\u0133\027\122\034\u0110\001\002\000\004\013" +
    "\u0138\001\002\000\004\013\u0135\001\002\000\004\005\uff3c" +
    "\001\002\000\014\006\u0134\027\126\034\u0128\046\u0126\050" +
    "\125\001\002\000\004\046\u012b\001\002\000\006\003\u0137" +
    "\034\u0110\001\002\000\004\005\uff39\001\002\000\010\006" +
    "\u0134\034\u0128\046\u0126\001\002\000\006\003\134\027\122" +
    "\001\002\000\004\005\uff38\001\002\000\010\003\u013e\033" +
    "\u0114\034\u0110\001\002\000\004\013\u0141\001\002\000\004" +
    "\005\uff3b\001\002\000\004\013\u013f\001\002\000\012\006" +
    "\u0127\033\u0125\034\u0128\046\u0126\001\002\000\006\003\u0137" +
    "\034\u0110\001\002\000\004\005\uff37\001\002\000\006\003" +
    "\u0143\033\u0114\001\002\000\004\005\uff36\001\002\000\006" +
    "\006\u0144\033\u0125\001\002\000\004\050\u012c\001\002\000" +
    "\010\003\u0149\027\122\033\u0114\001\002\000\004\005\uff3a" +
    "\001\002\000\004\013\u014c\001\002\000\004\013\u014a\001" +
    "\002\000\012\006\u0144\027\126\033\u0125\050\125\001\002" +
    "\000\006\003\134\027\122\001\002\000\004\005\uff34\001" +
    "\002\000\006\003\u0143\033\u0114\001\002\000\004\005\uff35" +
    "\001\002\000\012\003\u0152\027\122\032\u010f\034\u0110\001" +
    "\002\000\004\013\u016b\001\002\000\004\013\u0161\001\002" +
    "\000\004\013\u015f\001\002\000\024\006\u0134\010\u0157\011" +
    "\u0156\027\126\032\u0154\034\u0128\046\u0126\047\u0155\050\125" +
    "\001\002\000\004\005\uff3f\001\002\000\004\006\u015b\001" +
    "\002\000\004\011\u015a\001\002\000\006\005\uff4b\013\uff4b" +
    "\001\002\000\004\047\u0158\001\002\000\004\011\u0159\001" +
    "\002\000\006\005\uff4d\013\uff4d\001\002\000\006\005\uff4c" +
    "\013\uff4c\001\002\000\004\010\u015c\001\002\000\004\047" +
    "\u015d\001\002\000\004\011\u015e\001\002\000\006\005\uff4e" +
    "\013\uff4e\001\002\000\010\003\u0133\027\122\034\u0110\001" +
    "\002\000\004\005\uff33\001\002\000\010\003\u0164\032\u010f" +
    "\034\u0110\001\002\000\004\013\u0168\001\002\000\004\013" +
    "\u0166\001\002\000\020\006\u0134\010\u0157\011\u0156\032\u0154" +
    "\034\u0128\046\u0126\047\u0155\001\002\000\004\005\uff32\001" +
    "\002\000\006\003\u0137\034\u0110\001\002\000\004\005\uff30" +
    "\001\002\000\006\003\u016a\032\u010f\001\002\000\004\005" +
    "\uff2f\001\002\000\012\010\u0157\011\u0156\032\u0154\047\u0155" +
    "\001\002\000\010\003\u016e\027\122\032\u010f\001\002\000" +
    "\004\013\u0172\001\002\000\004\013\u0170\001\002\000\016" +
    "\010\u0157\011\u0156\027\126\032\u0154\047\u0155\050\125\001" +
    "\002\000\004\005\uff31\001\002\000\006\003\134\027\122" +
    "\001\002\000\004\005\uff2d\001\002\000\006\003\u016a\032" +
    "\u010f\001\002\000\004\005\uff2e\001\002\000\004\050\u0175" +
    "\001\002\000\006\005\uff4a\013\uff4a\001\002\000\012\003" +
    "\u017a\032\u010f\033\u0114\034\u0110\001\002\000\004\013\u0180" +
    "\001\002\000\004\013\u017e\001\002\000\004\013\u017c\001" +
    "\002\000\022\006\u0127\010\u0157\011\u0156\032\u0154\033\u0125" +
    "\034\u0128\046\u0126\047\u0155\001\002\000\004\005\uff3e\001" +
    "\002\000\010\003\u013e\033\u0114\034\u0110\001\002\000\004" +
    "\005\uff2c\001\002\000\010\003\u0164\032\u010f\034\u0110\001" +
    "\002\000\004\005\uff2b\001\002\000\010\003\u0183\032\u010f" +
    "\033\u0114\001\002\000\004\013\u0187\001\002\000\004\013" +
    "\u0185\001\002\000\016\006\u0144\010\u0157\011\u0156\032\u0154" +
    "\033\u0125\047\u0155\001\002\000\004\005\uff2a\001\002\000" +
    "\006\003\u0143\033\u0114\001\002\000\004\005\uff29\001\002" +
    "\000\006\003\u016a\032\u010f\001\002\000\004\005\uff28\001" +
    "\002\000\012\003\u018e\027\122\032\u010f\033\u0114\001\002" +
    "\000\004\013\u0193\001\002\000\004\013\u0191\001\002\000" +
    "\004\005\uff3d\001\002\000\004\013\u018f\001\002\000\022" +
    "\006\u0144\010\u0157\011\u0156\027\126\032\u0154\033\u0125\047" +
    "\u0155\050\125\001\002\000\010\003\u0149\027\122\033\u0114" +
    "\001\002\000\004\005\uff27\001\002\000\010\003\u016e\027" +
    "\122\032\u010f\001\002\000\004\005\uff26\001\002\000\010" +
    "\003\u0183\032\u010f\033\u0114\001\002\000\004\005\uff25\001" +
    "\002\000\004\046\u0196\001\002\000\006\005\uff44\013\uff44" +
    "\001\002\000\004\010\u0198\001\002\000\004\047\u0199\001" +
    "\002\000\004\011\u019a\001\002\000\006\005\uff4f\013\uff4f" +
    "\001\002\000\004\004\u019c\001\002\000\026\003\u01ac\005" +
    "\u01af\014\u01a9\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024\u019d" +
    "\030\u019f\052\u01a0\001\002\000\004\006\u029d\001\002\000" +
    "\010\003\ufffc\005\ufffc\013\ufffc\001\002\000\004\006\u029b" +
    "\001\002\000\004\006\u0297\001\002\000\006\005\uff97\013" +
    "\uff97\001\002\000\006\005\uff9b\013\uff9b\001\002\000\004" +
    "\006\u0295\001\002\000\004\006\u0293\001\002\000\004\006" +
    "\u0291\001\002\000\006\005\uff99\013\uff99\001\002\000\006" +
    "\005\uff9a\013\uff9a\001\002\000\004\013\u0274\001\002\000" +
    "\004\006\u0270\001\002\000\006\005\uff96\013\uff96\001\002" +
    "\000\004\006\u026e\001\002\000\056\003\u01c6\004\u01cb\005" +
    "\u01c9\006\u01c8\010\u01c4\011\u01b5\014\u01c3\015\u01b3\016\u01bc" +
    "\017\u01bf\020\u01bd\021\u01be\022\u01c0\023\u01c5\024\u01b2\025" +
    "\u01b9\026\u01ca\027\u01c2\030\u01b7\047\u01c1\050\u01ba\052\u01b8" +
    "\001\002\000\006\005\uff98\013\uff98\001\002\000\006\005" +
    "\uff9c\013\uff9c\001\002\000\010\003\uffac\005\uffac\013\uffac" +
    "\001\002\000\006\005\uff9d\013\uff9d\001\002\000\004\013" +
    "\u0266\001\002\000\004\006\u0260\001\002\000\004\006\u025a" +
    "\001\002\000\004\005\u0259\001\002\000\006\005\uff6c\013" +
    "\uff6c\001\002\000\004\005\u0258\001\002\000\004\006\u0256" +
    "\001\002\000\004\006\u0252\001\002\000\004\006\u0250\001" +
    "\002\000\006\005\uff5f\013\uff5f\001\002\000\004\013\u0247" +
    "\001\002\000\004\006\u0241\001\002\000\006\005\uff63\013" +
    "\uff63\001\002\000\004\006\u023f\001\002\000\004\006\u023d" +
    "\001\002\000\004\006\u023b\001\002\000\004\011\u023a\001" +
    "\002\000\004\006\u0238\001\002\000\004\006\u0232\001\002" +
    "\000\004\047\u0230\001\002\000\004\006\u022e\001\002\000" +
    "\024\006\u01f4\013\u01f1\015\u01f2\016\u01f5\020\u01ea\025\u01eb" +
    "\026\u01f0\027\u01e4\050\u01f3\001\002\000\004\013\u01dc\001" +
    "\002\000\012\004\u01d4\010\u01d5\020\u01d2\050\u01d3\001\002" +
    "\000\006\005\uff66\013\uff66\001\002\000\004\006\u01d0\001" +
    "\002\000\016\003\u01c6\015\u01b3\016\u01bc\025\u01b9\026\u01ca" +
    "\027\u01c2\001\002\000\004\005\u01cf\001\002\000\004\005" +
    "\u01ce\001\002\000\006\005\uff68\013\uff68\001\002\000\006" +
    "\005\uff56\013\uff56\001\002\000\004\020\u01d1\001\002\000" +
    "\006\005\uff75\013\uff75\001\002\000\006\005\uff5a\013\uff5a" +
    "\001\002\000\006\005\uff60\013\uff60\001\002\000\016\003" +
    "\u01c6\015\u01b3\016\u01bc\025\u01b9\026\u01ca\027\u01c2\001\002" +
    "\000\004\047\u01d6\001\002\000\004\011\u01d7\001\002\000" +
    "\006\005\uff6f\013\uff6f\001\002\000\004\005\u01db\001\002" +
    "\000\004\005\u01da\001\002\000\006\005\uff69\013\uff69\001" +
    "\002\000\006\005\uff57\013\uff57\001\002\000\010\003\u01dd" +
    "\025\u01b9\027\u01c2\001\002\000\012\013\u01ee\020\u01ea\025" +
    "\u01eb\027\u01e4\001\002\000\004\005\uff86\001\002\000\004" +
    "\013\u01e7\001\002\000\004\013\u01e1\001\002\000\006\003" +
    "\u01e2\027\u01c2\001\002\000\004\027\u01e4\001\002\000\004" +
    "\005\uff7e\001\002\000\004\006\u01e5\001\002\000\004\050" +
    "\u01e6\001\002\000\006\005\uff72\013\uff72\001\002\000\006" +
    "\003\u01e8\025\u01b9\001\002\000\006\020\u01ea\025\u01eb\001" +
    "\002\000\004\005\uff7d\001\002\000\006\005\uff76\013\uff76" +
    "\001\002\000\004\006\u01ec\001\002\000\004\020\u01ed\001" +
    "\002\000\006\005\uff77\013\uff77\001\002\000\006\003\u01e8" +
    "\025\u01b9\001\002\000\004\005\uff7c\001\002\000\004\006" +
    "\u022c\001\002\000\016\003\u0216\015\u0211\016\u0219\025\u01b9" +
    "\026\u01ca\027\u01c2\001\002\000\004\006\u020b\001\002\000" +
    "\006\005\uff88\013\u0204\001\002\000\004\050\u01fc\001\002" +
    "\000\004\006\u01f6\001\002\000\004\050\u01f7\001\002\000" +
    "\006\005\uff8a\013\u01f8\001\002\000\004\015\u01f9\001\002" +
    "\000\004\006\u01fa\001\002\000\004\050\u01fb\001\002\000" +
    "\004\005\uff93\001\002\000\006\005\uff89\013\u01fd\001\002" +
    "\000\006\015\u01fe\016\u01ff\001\002\000\004\006\u0202\001" +
    "\002\000\004\006\u0200\001\002\000\004\050\u0201\001\002" +
    "\000\004\005\uff8d\001\002\000\004\050\u0203\001\002\000" +
    "\004\005\uff92\001\002\000\006\015\u0205\016\u0206\001\002" +
    "\000\004\006\u0209\001\002\000\004\006\u0207\001\002\000" +
    "\004\050\u0208\001\002\000\004\005\uff8c\001\002\000\004" +
    "\050\u020a\001\002\000\004\005\uff91\001\002\000\004\050" +
    "\u020c\001\002\000\006\005\uff8f\013\u020d\001\002\000\004" +
    "\016\u020e\001\002\000\004\006\u020f\001\002\000\004\050" +
    "\u0210\001\002\000\004\005\uff8e\001\002\000\004\006\u022a" +
    "\001\002\000\004\005\uff82\001\002\000\004\005\uff83\001" +
    "\002\000\004\005\uff84\001\002\000\004\013\u0227\001\002" +
    "\000\014\013\u0223\020\u01ea\025\u01eb\026\u01f0\027\u01e4\001" +
    "\002\000\004\013\u021f\001\002\000\004\013\u021c\001\002" +
    "\000\004\006\u021a\001\002\000\004\050\u021b\001\002\000" +
    "\004\005\uff8b\001\002\000\010\003\u021e\026\u01ca\027\u01c2" +
    "\001\002\000\004\005\uff7b\001\002\000\006\026\u01f0\027" +
    "\u01e4\001\002\000\010\003\u0220\025\u01b9\027\u01c2\001\002" +
    "\000\010\020\u01ea\025\u01eb\027\u01e4\001\002\000\004\005" +
    "\uff81\001\002\000\004\005\uff7a\001\002\000\012\003\u0226" +
    "\025\u01b9\026\u01ca\027\u01c2\001\002\000\004\005\uff79\001" +
    "\002\000\004\005\uff7f\001\002\000\012\020\u01ea\025\u01eb" +
    "\026\u01f0\027\u01e4\001\002\000\010\003\u0229\025\u01b9\026" +
    "\u01ca\001\002\000\004\005\uff80\001\002\000\010\020\u01ea" +
    "\025\u01eb\026\u01f0\001\002\000\004\050\u022b\001\002\000" +
    "\004\005\uff90\001\002\000\004\020\u022d\001\002\000\006" +
    "\005\uff74\013\uff74\001\002\000\004\020\u022f\001\002\000" +
    "\006\005\uff5b\013\uff5b\001\002\000\004\011\u0231\001\002" +
    "\000\006\005\uff6e\013\uff6e\001\002\000\004\004\u0233\001" +
    "\002\000\010\003\u0234\015\u01b3\016\u01bc\001\002\000\014" +
    "\006\u01f4\013\u0237\015\u01f2\016\u01f5\050\u01f3\001\002\000" +
    "\004\005\u0236\001\002\000\006\005\uff6a\013\uff6a\001\002" +
    "\000\006\015\u0211\016\u0219\001\002\000\004\050\u0239\001" +
    "\002\000\006\005\uff73\013\uff73\001\002\000\006\005\uff6d" +
    "\013\uff6d\001\002\000\004\020\u023c\001\002\000\006\005" +
    "\uff5d\013\uff5d\001\002\000\004\020\u023e\001\002\000\006" +
    "\005\uff64\013\uff64\001\002\000\004\050\u0240\001\002\000" +
    "\006\005\uff61\013\uff61\001\002\000\004\050\u0242\001\002" +
    "\000\004\013\u0243\001\002\000\004\015\u0244\001\002\000" +
    "\004\006\u0245\001\002\000\004\050\u0246\001\002\000\004" +
    "\005\uff95\001\002\000\010\003\u0249\026\u01ca\027\u01c2\001" +
    "\002\000\004\013\u024f\001\002\000\010\013\u024e\026\u01f0" +
    "\027\u01e4\001\002\000\004\013\u024c\001\002\000\004\005" +
    "\uff87\001\002\000\006\003\u024d\026\u01ca\001\002\000\004" +
    "\026\u01f0\001\002\000\006\003\u01e2\027\u01c2\001\002\000" +
    "\006\003\u01e2\027\u01c2\001\002\000\004\020\u0251\001\002" +
    "\000\006\005\uff78\013\uff78\001\002\000\004\010\u0253\001" +
    "\002\000\004\047\u0254\001\002\000\004\011\u0255\001\002" +
    "\000\006\005\uff70\013\uff70\001\002\000\004\050\u0257\001" +
    "\002\000\006\005\uff53\013\uff53\001\002\000\006\005\uff67" +
    "\013\uff67\001\002\000\006\005\uff55\013\uff55\001\002\000" +
    "\004\050\u025b\001\002\000\004\013\u025c\001\002\000\004" +
    "\016\u025d\001\002\000\004\006\u025e\001\002\000\004\050" +
    "\u025f\001\002\000\004\005\uff94\001\002\000\004\004\u0261" +
    "\001\002\000\012\003\u0262\025\u01b9\026\u01ca\027\u01c2\001" +
    "\002\000\014\013\u0265\020\u01ea\025\u01eb\026\u01f0\027\u01e4" +
    "\001\002\000\004\005\u0264\001\002\000\006\005\uff58\013" +
    "\uff58\001\002\000\012\003\u0216\025\u01b9\026\u01ca\027\u01c2" +
    "\001\002\000\010\003\u0269\025\u01b9\026\u01ca\001\002\000" +
    "\004\013\u026d\001\002\000\004\005\uff85\001\002\000\012" +
    "\013\u026c\020\u01ea\025\u01eb\026\u01f0\001\002\000\004\013" +
    "\u026b\001\002\000\006\003\u024d\026\u01ca\001\002\000\006" +
    "\003\u024d\026\u01ca\001\002\000\006\003\u01e8\025\u01b9\001" +
    "\002\000\004\020\u026f\001\002\000\006\005\uff5c\013\uff5c" +
    "\001\002\000\004\004\u0271\001\002\000\010\003\u0234\015" +
    "\u01b3\016\u01bc\001\002\000\004\005\u0273\001\002\000\006" +
    "\005\uff6b\013\uff6b\001\002\000\026\003\u01ac\005\u0277\014" +
    "\u01a9\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024\u019d\030\u019f" +
    "\052\u01a0\001\002\000\010\003\uffad\005\uffad\013\uffad\001" +
    "\002\000\006\005\u0278\013\u0279\001\002\000\010\003\uffaa" +
    "\005\uffaa\013\uffaa\001\002\000\010\003\uffa8\005\uffa8\013" +
    "\uffa8\001\002\000\024\003\u01ac\014\u01a9\017\u01a4\021\u01a3" +
    "\022\u01a5\023\u01ab\024\u019d\030\u019f\052\u01a0\001\002\000" +
    "\010\003\uffab\005\uffab\013\uffab\001\002\000\006\005\u027c" +
    "\013\u027e\001\002\000\010\003\uffa6\005\uffa6\013\uffa6\001" +
    "\002\000\010\003\uffa9\005\uffa9\013\uffa9\001\002\000\024" +
    "\003\u01ac\014\u01a9\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024" +
    "\u019d\030\u019f\052\u01a0\001\002\000\006\005\u0281\013\u0282" +
    "\001\002\000\010\003\uffa7\005\uffa7\013\uffa7\001\002\000" +
    "\010\003\uffa4\005\uffa4\013\uffa4\001\002\000\024\003\u01ac" +
    "\014\u01a9\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024\u019d\030" +
    "\u019f\052\u01a0\001\002\000\006\005\u0285\013\u0286\001\002" +
    "\000\010\003\uffa5\005\uffa5\013\uffa5\001\002\000\010\003" +
    "\uffa2\005\uffa2\013\uffa2\001\002\000\024\003\u01ac\014\u01a9" +
    "\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024\u019d\030\u019f\052" +
    "\u01a0\001\002\000\006\005\u0289\013\u028a\001\002\000\010" +
    "\003\uffa3\005\uffa3\013\uffa3\001\002\000\010\003\uffa0\005" +
    "\uffa0\013\uffa0\001\002\000\024\003\u01ac\014\u01a9\017\u01a4" +
    "\021\u01a3\022\u01a5\023\u01ab\024\u019d\030\u019f\052\u01a0\001" +
    "\002\000\006\005\u028d\013\u028e\001\002\000\010\003\uffa1" +
    "\005\uffa1\013\uffa1\001\002\000\010\003\uff9e\005\uff9e\013" +
    "\uff9e\001\002\000\024\003\u01ac\014\u01a9\017\u01a4\021\u01a3" +
    "\022\u01a5\023\u01ab\024\u019d\030\u019f\052\u01a0\001\002\000" +
    "\004\005\u0290\001\002\000\010\003\uff9f\005\uff9f\013\uff9f" +
    "\001\002\000\004\020\u0292\001\002\000\006\005\uff5e\013" +
    "\uff5e\001\002\000\004\020\u0294\001\002\000\006\005\uff65" +
    "\013\uff65\001\002\000\004\050\u0296\001\002\000\006\005" +
    "\uff62\013\uff62\001\002\000\004\010\u0298\001\002\000\004" +
    "\047\u0299\001\002\000\004\011\u029a\001\002\000\006\005" +
    "\uff71\013\uff71\001\002\000\004\050\u029c\001\002\000\006" +
    "\005\uff54\013\uff54\001\002\000\004\004\u029e\001\002\000" +
    "\012\003\u0262\025\u01b9\026\u01ca\027\u01c2\001\002\000\004" +
    "\005\u02a0\001\002\000\006\005\uff59\013\uff59\001\002\000" +
    "\004\004\u02a4\001\002\000\026\003\u01ac\005\u01af\014\u01a9" +
    "\017\u01a4\021\u01a3\022\u01a5\023\u01ab\024\u019d\030\u019f\052" +
    "\u01a0\001\002\000\010\003\ufffb\005\ufffb\013\ufffb\001\002" +
    "\000\014\003\034\027\027\032\024\033\035\034\033\001" +
    "\002\000\006\005\ufff5\013\ufff5\001\002\000\004\013\u03cb" +
    "\001\002\000\004\006\u03c7\001\002\000\004\013\u03b4\001" +
    "\002\000\004\013\u0393\001\002\000\034\003\u02de\004\u0102" +
    "\005\u02df\006\u0104\007\u0105\013\u02d6\031\u0106\032\u02e0\035" +
    "\u0107\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000\004" +
    "\013\u02b1\001\002\000\004\002\uffe7\001\002\000\004\005" +
    "\u02b0\001\002\000\004\002\uffe9\001\002\000\004\002\uffea" +
    "\001\002\000\004\002\uffe8\001\002\000\012\003\u02b7\007" +
    "\010\031\014\035\020\001\002\000\010\003\u02b9\005\u02ba" +
    "\013\u02d0\001\002\000\004\013\u02c9\001\002\000\010\003" +
    "\u02b9\005\u02ba\013\u02bb\001\002\000\004\005\uffc0\001\002" +
    "\000\004\002\uffce\001\002\000\014\004\u0102\006\u0104\007" +
    "\u0105\031\u0106\035\u0107\001\002\000\004\002\uffe3\001\002" +
    "\000\012\003\u02c2\005\u02c3\013\u02c4\035\020\001\002\000" +
    "\004\002\uffd9\001\002\000\010\003\u02bd\031\014\035\020" +
    "\001\002\000\004\002\uffc3\001\002\000\012\004\u0102\006" +
    "\u02c1\031\u0106\035\u0107\001\002\000\004\005\uffb7\001\002" +
    "\000\004\005\u02c0\001\002\000\004\002\uffda\001\002\000" +
    "\004\040\u02a1\001\002\000\006\006\u02c1\035\u0107\001\002" +
    "\000\004\002\uffd6\001\002\000\006\003\u02c2\035\020\001" +
    "\002\000\004\005\u02c6\001\002\000\004\002\uffd7\001\002" +
    "\000\004\005\u02c8\001\002\000\004\002\uffd8\001\002\000" +
    "\010\003\u02ca\007\010\031\014\001\002\000\012\004\u0102" +
    "\006\u02cf\007\u0105\031\u0106\001\002\000\004\005\u02ce\001" +
    "\002\000\004\005\u02cd\001\002\000\004\002\uffc4\001\002" +
    "\000\004\002\uffd2\001\002\000\004\004\u02a2\001\002\000" +
    "\010\003\u02d2\007\010\035\020\001\002\000\004\002\uffd1" +
    "\001\002\000\010\006\u0104\007\u0105\035\u0107\001\002\000" +
    "\004\005\uffb8\001\002\000\004\006\u038f\001\002\000\004" +
    "\006\u038d\001\002\000\014\003\u0373\007\010\031\014\035" +
    "\020\036\u02a7\001\002\000\004\006\u036a\001\002\000\004" +
    "\013\u035e\001\002\000\004\013\u0355\001\002\000\004\004" +
    "\u0353\001\002\000\004\013\u034a\001\002\000\004\005\u0348" +
    "\001\002\000\010\003\uffef\005\uffef\013\uffef\001\002\000" +
    "\040\003\u02f2\005\u02e5\006\u02f5\010\u02ea\011\u02e9\013\u02e8" +
    "\032\u02e6\037\u02f3\040\u02eb\041\u02f0\042\u02f1\043\u02ee\044" +
    "\u02f4\045\u02ec\047\u02e7\001\002\000\004\002\uffdf\001\002" +
    "\000\004\006\u02e1\001\002\000\004\010\u02e2\001\002\000" +
    "\004\047\u02e3\001\002\000\004\011\u02e4\001\002\000\006" +
    "\005\ufebb\013\ufebb\001\002\000\010\003\u02f2\013\u0346\041" +
    "\u02f0\001\002\000\004\006\u0342\001\002\000\004\011\u0341" +
    "\001\002\000\014\003\u0324\004\u0322\032\u02e0\037\u02d7\042" +
    "\u02d5\001\002\000\006\005\ufeb6\013\ufeb6\001\002\000\004" +
    "\047\u031e\001\002\000\006\003\u02fc\010\u02fd\001\002\000" +
    "\006\005\ufea3\013\ufea3\001\002\000\010\003\ufed3\005\ufed3" +
    "\013\ufed3\001\002\000\006\005\ufea2\013\ufea2\001\002\000" +
    "\006\005\ufea5\013\ufea5\001\002\000\010\003\ufed2\005\ufed2" +
    "\013\ufed2\001\002\000\004\006\u031b\001\002\000\020\003" +
    "\u02de\004\u0316\013\u0314\032\u02e0\037\u02d7\041\u0315\042\u02d5" +
    "\001\002\000\004\006\u0311\001\002\000\006\005\ufea4\013" +
    "\ufea4\001\002\000\014\010\u02f7\040\u02f6\043\u02ee\044\u02f4" +
    "\045\u02ec\001\002\000\006\003\u02fc\010\u02fd\001\002\000" +
    "\004\047\u02f9\001\002\000\006\005\ufea6\013\ufea6\001\002" +
    "\000\004\011\u02fa\001\002\000\006\005\ufeb9\013\ufeb9\001" +
    "\002\000\006\005\ufeb3\013\ufeb3\001\002\000\016\003\u0302" +
    "\010\u0309\011\u0307\013\u0303\041\u0301\047\u030a\001\002\000" +
    "\004\047\u02fe\001\002\000\004\011\u02ff\001\002\000\010" +
    "\003\u0302\013\u0303\041\u0301\001\002\000\006\005\ufeb1\013" +
    "\ufeb1\001\002\000\006\005\ufeac\013\ufeac\001\002\000\010" +
    "\003\u02fc\010\u02fd\041\u0306\001\002\000\006\003\u02fc\010" +
    "\u02fd\001\002\000\006\005\ufeab\013\ufeab\001\002\000\006" +
    "\005\ufeaa\013\ufeaa\001\002\000\006\005\ufea9\013\ufea9\001" +
    "\002\000\010\003\u0302\013\u0303\041\u0301\001\002\000\006" +
    "\005\ufead\013\ufead\001\002\000\004\047\u030d\001\002\000" +
    "\004\011\u030b\001\002\000\010\003\u0302\013\u0303\041\u0301" +
    "\001\002\000\006\005\ufeaf\013\ufeaf\001\002\000\004\011" +
    "\u030e\001\002\000\010\003\u0302\013\u0303\041\u0301\001\002" +
    "\000\006\005\ufeb0\013\ufeb0\001\002\000\006\005\ufeae\013" +
    "\ufeae\001\002\000\004\040\u0312\001\002\000\006\003\u02fc" +
    "\010\u02fd\001\002\000\006\005\ufeb4\013\ufeb4\001\002\000" +
    "\004\004\u0319\001\002\000\010\003\ufecd\005\ufecd\013\ufecd" +
    "\001\002\000\012\003\u02de\032\u02e0\037\u02d7\042\u02d5\001" +
    "\002\000\010\003\ufece\005\ufece\013\ufece\001\002\000\010" +
    "\003\ufecf\005\ufecf\013\ufecf\001\002\000\012\003\u02de\032" +
    "\u02e0\037\u02d7\042\u02d5\001\002\000\010\003\ufed0\005\ufed0" +
    "\013\ufed0\001\002\000\010\043\u02ee\044\u02f4\045\u02ec\001" +
    "\002\000\006\005\ufea7\013\ufea7\001\002\000\006\005\ufeb2" +
    "\013\ufeb2\001\002\000\004\011\u031f\001\002\000\006\005" +
    "\ufeb8\013\ufeb8\001\002\000\004\005\ufec8\001\002\000\004" +
    "\005\ufec9\001\002\000\012\003\u02de\032\u02e0\037\u02d7\042" +
    "\u02d5\001\002\000\004\013\u033d\001\002\000\034\003\u032f" +
    "\006\u02f5\010\u02ea\011\u02e9\013\u032e\032\u032d\037\u0332\040" +
    "\u02eb\042\u02f1\043\u02ee\044\u02f4\045\u02ec\047\u02e7\001\002" +
    "\000\004\013\u032b\001\002\000\004\013\u0327\001\002\000" +
    "\006\003\u0328\042\u02d5\001\002\000\014\006\u032a\042\u02f1" +
    "\043\u02ee\044\u02f4\045\u02ec\001\002\000\004\005\ufec3\001" +
    "\002\000\010\043\u02ee\044\u02f4\045\u02ec\001\002\000\006" +
    "\003\u0328\042\u02d5\001\002\000\004\005\ufec7\001\002\000" +
    "\004\006\u0339\001\002\000\010\003\u032f\032\u02e0\037\u02d7" +
    "\001\002\000\020\006\u0336\010\u02ea\011\u02e9\032\u02e6\037" +
    "\u02f3\040\u02eb\047\u02e7\001\002\000\004\005\ufec4\001\002" +
    "\000\004\005\ufec0\001\002\000\004\006\u0333\001\002\000" +
    "\004\040\u0334\001\002\000\006\003\u02fc\010\u02fd\001\002" +
    "\000\006\005\ufeb5\013\ufeb4\001\002\000\006\010\u02f7\040" +
    "\u02f6\001\002\000\004\005\ufec5\001\002\000\004\005\ufec1" +
    "\001\002\000\004\010\u033a\001\002\000\004\047\u033b\001" +
    "\002\000\004\011\u033c\001\002\000\006\005\ufebb\013\ufeba" +
    "\001\002\000\010\003\u032f\032\u02e0\037\u02d7\001\002\000" +
    "\004\005\ufec6\001\002\000\004\005\ufec2\001\002\000\010" +
    "\003\ufed1\005\ufed1\013\ufed1\001\002\000\006\005\ufeb7\013" +
    "\ufeb7\001\002\000\004\010\u0343\001\002\000\004\047\u0344" +
    "\001\002\000\004\011\u0345\001\002\000\006\005\ufeba\013" +
    "\ufeba\001\002\000\004\004\u0322\001\002\000\010\003\ufed4" +
    "\005\ufed4\013\ufed4\001\002\000\010\003\u02f2\013\u0346\041" +
    "\u02f0\001\002\000\010\003\ufed5\005\ufed5\013\ufed5\001\002" +
    "\000\010\003\u034c\037\u02d7\042\u02d5\001\002\000\004\005" +
    "\ufecc\001\002\000\024\003\u034f\006\u0352\013\u0351\037\u0332" +
    "\040\u02eb\042\u02f1\043\u02ee\044\u02f4\045\u02ec\001\002\000" +
    "\004\013\u034e\001\002\000\006\003\u034f\037\u02d7\001\002" +
    "\000\010\006\u0350\037\u02f3\040\u02eb\001\002\000\004\040" +
    "\u02f6\001\002\000\006\003\u034f\037\u02d7\001\002\000\012" +
    "\040\u02f6\043\u02ee\044\u02f4\045\u02ec\001\002\000\012\003" +
    "\u02de\032\u02e0\037\u02d7\042\u02d5\001\002\000\010\003\ufff0" +
    "\005\ufff0\013\ufff0\001\002\000\010\003\u0357\032\u02e0\042" +
    "\u02d5\001\002\000\004\005\ufecb\001\002\000\030\003\u035a" +
    "\006\u035d\010\u02ea\011\u02e9\013\u035c\032\u032d\042\u02f1\043" +
    "\u02ee\044\u02f4\045\u02ec\047\u02e7\001\002\000\004\013\u0359" +
    "\001\002\000\006\003\u035a\032\u02e0\001\002\000\014\006" +
    "\u035b\010\u02ea\011\u02e9\032\u02e6\047\u02e7\001\002\000\004" +
    "\010\u02f7\001\002\000\006\003\u035a\032\u02e0\001\002\000" +
    "\012\010\u02f7\043\u02ee\044\u02f4\045\u02ec\001\002\000\010" +
    "\003\u0362\032\u02e0\037\u02d7\001\002\000\004\005\ufeca\001" +
    "\002\000\004\013\u0368\001\002\000\004\013\u0366\001\002" +
    "\000\024\003\u034f\006\u0336\010\u02ea\011\u02e9\013\u0363\032" +
    "\u02e6\037\u0332\040\u02eb\047\u02e7\001\002\000\006\003\u034f" +
    "\037\u02d7\001\002\000\004\005\ufebc\001\002\000\004\005" +
    "\ufebd\001\002\000\006\003\u034f\037\u02d7\001\002\000\004" +
    "\005\ufebe\001\002\000\006\003\u035a\032\u02e0\001\002\000" +
    "\004\005\ufebf\001\002\000\004\040\u036b\001\002\000\006" +
    "\003\u02fc\010\u02fd\001\002\000\006\005\ufeb5\013\ufeb5\001" +
    "\002\000\010\003\u02b9\005\u02ba\013\u038a\001\002\000\004" +
    "\013\u0387\001\002\000\004\005\uffbf\001\002\000\010\003" +
    "\u02b9\005\u02ba\013\u0384\001\002\000\004\002\uffcc\001\002" +
    "\000\004\005\u0383\001\002\000\034\003\u02de\004\u0102\005" +
    "\u037d\006\u0104\007\u0105\013\u037c\031\u0106\032\u02e0\035\u0107" +
    "\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000\010\003" +
    "\u02b9\005\u02ba\013\u0379\001\002\000\004\002\uffe0\001\002" +
    "\000\004\005\u0378\001\002\000\004\002\uffe2\001\002\000" +
    "\004\002\uffe1\001\002\000\012\003\u02d2\005\uffd5\007\010" +
    "\035\020\001\002\000\004\002\uffdd\001\002\000\004\005" +
    "\uffc7\001\002\000\012\003\u037e\007\010\031\014\036\u02a7" +
    "\001\002\000\004\002\uffdb\001\002\000\026\003\u02de\004" +
    "\u0102\006\u02cf\007\u0105\031\u0106\032\u02e0\036\u02d4\037\u02d7" +
    "\040\u02da\042\u02d5\001\002\000\004\005\uffd3\001\002\000" +
    "\004\005\u0382\001\002\000\004\005\uffc5\001\002\000\004" +
    "\002\uffdc\001\002\000\004\002\uffcd\001\002\000\012\003" +
    "\u0385\031\014\035\020\036\u02a7\001\002\000\026\003\u02de" +
    "\004\u0102\006\u02c1\031\u0106\032\u02e0\035\u0107\036\u02d4\037" +
    "\u02d7\040\u02da\042\u02d5\001\002\000\004\005\uffc6\001\002" +
    "\000\012\003\u037e\007\010\031\014\036\u02a7\001\002\000" +
    "\004\005\u0389\001\002\000\004\002\uffde\001\002\000\012" +
    "\003\u038b\007\010\035\020\036\u02a7\001\002\000\024\003" +
    "\u02de\006\u0104\007\u0105\032\u02e0\035\u0107\036\u02d4\037\u02d7" +
    "\040\u02da\042\u02d5\001\002\000\004\005\uffd4\001\002\000" +
    "\010\043\u02ee\044\u02f4\045\u02ec\001\002\000\006\005\ufea8" +
    "\013\ufea8\001\002\000\004\040\u0390\001\002\000\004\004" +
    "\u0391\001\002\000\012\003\u02de\032\u02e0\037\u02d7\042\u02d5" +
    "\001\002\000\010\003\ufff1\005\ufff1\013\ufff1\001\002\000" +
    "\012\003\u0398\031\014\035\020\036\u02a7\001\002\000\010" +
    "\003\u02b9\005\u02ba\013\u03b0\001\002\000\004\013\u03aa\001" +
    "\002\000\004\002\uffb5\001\002\000\004\005\uffc1\001\002" +
    "\000\032\003\u03a0\004\u0102\005\u02ba\006\u02c1\013\u039e\031" +
    "\u0106\032\u02e0\035\u0107\036\u02d4\037\u02d7\040\u02da\042\u02d5" +
    "\001\002\000\004\002\uffd0\001\002\000\010\003\u02b9\005" +
    "\u02ba\013\u039b\001\002\000\010\003\u02bd\031\014\035\020" +
    "\001\002\000\004\002\uffca\001\002\000\004\005\uffbb\001" +
    "\002\000\012\003\u0385\031\014\035\020\036\u02a7\001\002" +
    "\000\004\002\uffc8\001\002\000\042\003\u03a2\005\u03a3\006" +
    "\u02f5\010\u02ea\011\u02e9\013\u03a1\032\u02e6\035\020\037\u02f3" +
    "\040\u02eb\041\u02f0\042\u02f1\043\u02ee\044\u02f4\045\u02ec\047" +
    "\u02e7\001\002\000\016\003\u03a4\004\u0322\032\u02e0\035\020" +
    "\037\u02d7\042\u02d5\001\002\000\024\003\u02de\004\u0316\006" +
    "\u02c1\013\u0314\032\u02e0\035\u0107\037\u02d7\041\u0315\042\u02d5" +
    "\001\002\000\012\002\uffd6\003\u02f2\013\u0346\041\u02f0\001" +
    "\002\000\036\003\u032f\006\u03a5\010\u02ea\011\u02e9\013\u032e" +
    "\032\u032d\035\u0107\037\u0332\040\u02eb\042\u02f1\043\u02ee\044" +
    "\u02f4\045\u02ec\047\u02e7\001\002\000\014\010\u02f7\040\u03a6" +
    "\043\u02ee\044\u02f4\045\u02ec\001\002\000\010\003\u02fc\004" +
    "\u02a4\010\u02fd\001\002\000\004\005\uffb9\001\002\000\004" +
    "\005\u03a9\001\002\000\004\002\uffc9\001\002\000\010\003" +
    "\u03ab\031\014\036\u02a7\001\002\000\022\003\u02de\004\u0102" +
    "\031\u0106\032\u02e0\036\u02d4\037\u02d7\040\u02da\042\u02d5\001" +
    "\002\000\004\005\u03af\001\002\000\004\005\u03ae\001\002" +
    "\000\004\002\uffcb\001\002\000\004\002\uffb1\001\002\000" +
    "\010\003\u03b2\035\020\036\u02a7\001\002\000\004\002\uffb0" +
    "\001\002\000\022\003\u02de\006\u02c1\032\u02e0\035\u0107\036" +
    "\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000\004\005\uffba" +
    "\001\002\000\012\003\u03b9\007\010\031\014\036\u02a7\001" +
    "\002\000\004\013\u03c4\001\002\000\004\005\u03c3\001\002" +
    "\000\004\013\u03c1\001\002\000\004\005\u03c0\001\002\000" +
    "\030\003\u02de\004\u0102\006\u02cf\007\u0105\013\u03bf\031\u0106" +
    "\032\u02e0\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000" +
    "\004\013\u03bd\001\002\000\004\005\u03bc\001\002\000\004" +
    "\002\uffe4\001\002\000\010\003\u03be\005\uffd5\007\010\001" +
    "\002\000\006\006\u02cf\007\u0105\001\002\000\010\003\u02ca" +
    "\007\010\031\014\001\002\000\004\002\uffcf\001\002\000" +
    "\010\003\u03ab\031\014\036\u02a7\001\002\000\004\005\uffae" +
    "\001\002\000\004\002\uffb4\001\002\000\010\003\u03c5\007" +
    "\010\036\u02a7\001\002\000\022\003\u02de\006\u02cf\007\u0105" +
    "\032\u02e0\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000" +
    "\004\005\uffaf\001\002\000\004\040\u03c8\001\002\000\004" +
    "\004\u03c9\001\002\000\012\003\u02de\032\u02e0\037\u02d7\042" +
    "\u02d5\001\002\000\010\003\ufff2\005\ufff2\013\ufff2\001\002" +
    "\000\012\003\u03d0\007\010\035\020\036\u02a7\001\002\000" +
    "\004\013\u03da\001\002\000\004\002\uffb6\001\002\000\010" +
    "\003\u02b9\005\u02ba\013\u03d7\001\002\000\004\005\uffc2\001" +
    "\002\000\030\003\u02de\005\u037d\006\u0104\007\u0105\013\u03d5" +
    "\032\u02e0\035\u0107\036\u02d4\037\u02d7\040\u02da\042\u02d5\001" +
    "\002\000\010\003\u02b9\005\u02ba\013\u03d3\001\002\000\004" +
    "\002\uffe5\001\002\000\010\003\u02d2\007\010\035\020\001" +
    "\002\000\004\005\uffbd\001\002\000\010\003\u03c5\007\010" +
    "\036\u02a7\001\002\000\004\005\uffbc\001\002\000\010\003" +
    "\u03b2\035\020\036\u02a7\001\002\000\004\002\uffb3\001\002" +
    "\000\004\005\uffbe\001\002\000\010\003\u03c5\007\010\036" +
    "\u02a7\001\002\000\004\005\u03dc\001\002\000\004\002\uffb2" +
    "\001\002\000\010\003\ufff8\005\ufff8\013\ufff8\001\002\000" +
    "\012\003\u03df\031\014\035\020\036\u02a7\001\002\000\032" +
    "\003\u02de\004\u0102\005\u02df\006\u02c1\013\u03f8\031\u0106\032" +
    "\u02e0\035\u0107\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002" +
    "\000\004\013\u03f2\001\002\000\004\013\u03ed\001\002\000" +
    "\004\013\u03e4\001\002\000\004\002\uffee\001\002\000\010" +
    "\003\u03e5\031\014\036\u02a7\001\002\000\024\003\u02de\004" +
    "\u0102\013\u03eb\031\u0106\032\u02e0\036\u02d4\037\u02d7\040\u02da" +
    "\042\u02d5\001\002\000\004\013\u03e9\001\002\000\004\013" +
    "\u03e8\001\002\000\004\005\uffd5\001\002\000\006\003\u03ea" +
    "\036\u02a7\001\002\000\016\003\u02de\032\u02e0\036\u02d4\037" +
    "\u02d7\040\u02da\042\u02d5\001\002\000\006\003\u03ec\031\014" +
    "\001\002\000\006\004\u0102\031\u0106\001\002\000\010\003" +
    "\u02bd\031\014\035\020\001\002\000\010\003\u02b9\005\u02ba" +
    "\013\u03f1\001\002\000\004\013\u03f0\001\002\000\006\003" +
    "\u03ec\031\014\001\002\000\006\003\u02c2\035\020\001\002" +
    "\000\010\003\u03f3\035\020\036\u02a7\001\002\000\026\003" +
    "\u02de\005\u037d\006\u02c1\013\u03f7\032\u02e0\035\u0107\036\u02d4" +
    "\037\u02d7\040\u02da\042\u02d5\001\002\000\010\003\u02b9\005" +
    "\u02ba\013\u03f1\001\002\000\004\013\u03f6\001\002\000\006" +
    "\003\u03ea\036\u02a7\001\002\000\006\003\u03ea\036\u02a7\001" +
    "\002\000\012\003\u03fb\031\014\035\020\036\u02a7\001\002" +
    "\000\010\003\u02b9\005\u02ba\013\u0400\001\002\000\004\013" +
    "\u03ff\001\002\000\032\003\u02de\004\u0102\005\u037d\006\u02c1" +
    "\013\u03fe\031\u0106\032\u02e0\035\u0107\036\u02d4\037\u02d7\040" +
    "\u02da\042\u02d5\001\002\000\010\003\u02b9\005\u02ba\013\u03fd" +
    "\001\002\000\010\003\u02c2\005\uffd5\035\020\001\002\000" +
    "\010\003\u03ab\031\014\036\u02a7\001\002\000\010\003\u03ab" +
    "\031\014\036\u02a7\001\002\000\010\003\u03b2\035\020\036" +
    "\u02a7\001\002\000\004\040\u0402\001\002\000\004\004\u0403" +
    "\001\002\000\014\003\u0113\027\122\032\u010f\033\u0114\034" +
    "\u0110\001\002\000\010\003\ufffa\005\ufffa\013\ufffa\001\002" +
    "\000\004\013\u0412\001\002\000\004\002\uffeb\001\002\000" +
    "\004\013\u040d\001\002\000\004\013\u0409\001\002\000\010" +
    "\003\u02bd\031\014\035\020\001\002\000\010\003\u02b9\005" +
    "\u02ba\013\u03f1\001\002\000\004\013\u040c\001\002\000\006" +
    "\003\u03ec\031\014\001\002\000\010\003\u02ca\007\010\031" +
    "\014\001\002\000\004\013\u0411\001\002\000\004\013\u0410" +
    "\001\002\000\006\003\u03ec\031\014\001\002\000\006\003" +
    "\u03be\007\010\001\002\000\010\003\u02d2\007\010\035\020" +
    "\001\002\000\004\013\u0415\001\002\000\010\003\u02b9\005" +
    "\u02ba\013\u03f1\001\002\000\006\003\u03be\007\010\001\002" +
    "\000\012\003\u0417\007\010\031\014\036\u02a7\001\002\000" +
    "\030\003\u02de\004\u0102\006\u02cf\007\u0105\013\u0430\031\u0106" +
    "\032\u02e0\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000" +
    "\004\013\u0429\001\002\000\004\013\u0424\001\002\000\004" +
    "\005\u0423\001\002\000\004\013\u041c\001\002\000\010\003" +
    "\u041d\031\014\036\u02a7\001\002\000\024\003\u02de\004\u0102" +
    "\013\u0422\031\u0106\032\u02e0\036\u02d4\037\u02d7\040\u02da\042" +
    "\u02d5\001\002\000\004\013\u0421\001\002\000\004\013\u0420" +
    "\001\002\000\006\003\u03ec\031\014\001\002\000\006\003" +
    "\u03ea\036\u02a7\001\002\000\006\003\u03ec\031\014\001\002" +
    "\000\004\002\uffec\001\002\000\010\003\u02ca\007\010\031" +
    "\014\001\002\000\004\013\u0428\001\002\000\004\013\u0427" +
    "\001\002\000\006\003\u03ec\031\014\001\002\000\006\003" +
    "\u03be\007\010\001\002\000\010\003\u042a\007\010\036\u02a7" +
    "\001\002\000\024\003\u02de\006\u02cf\007\u0105\013\u042f\032" +
    "\u02e0\036\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000\004" +
    "\013\u042e\001\002\000\004\013\u042d\001\002\000\006\003" +
    "\u03ea\036\u02a7\001\002\000\006\003\u03be\007\010\001\002" +
    "\000\006\003\u03be\007\010\001\002\000\010\003\u02ca\007" +
    "\010\031\014\001\002\000\012\003\u0432\007\010\035\020" +
    "\036\u02a7\001\002\000\026\003\u02de\006\u0104\007\u0105\013" +
    "\u0448\032\u02e0\035\u0107\036\u02d4\037\u02d7\040\u02da\042\u02d5" +
    "\001\002\000\004\013\u0444\001\002\000\004\002\uffed\001" +
    "\002\000\004\013\u043d\001\002\000\004\013\u0437\001\002" +
    "\000\010\003\u0438\035\020\036\u02a7\001\002\000\026\003" +
    "\u03a0\005\u02ba\006\u02c1\013\u043c\032\u02e0\035\u0107\036\u02d4" +
    "\037\u02d7\040\u02da\042\u02d5\001\002\000\010\003\u02b9\005" +
    "\u02ba\013\u03f1\001\002\000\004\013\u043b\001\002\000\006" +
    "\003\u03ea\036\u02a7\001\002\000\010\003\u03b2\035\020\036" +
    "\u02a7\001\002\000\010\003\u043e\007\010\036\u02a7\001\002" +
    "\000\024\003\u02de\006\u02cf\007\u0105\013\u0443\032\u02e0\036" +
    "\u02d4\037\u02d7\040\u02da\042\u02d5\001\002\000\004\013\u0442" +
    "\001\002\000\004\013\u0441\001\002\000\006\003\u03ea\036" +
    "\u02a7\001\002\000\006\003\u03be\007\010\001\002\000\006" +
    "\003\u03be\007\010\001\002\000\010\003\u02d2\007\010\035" +
    "\020\001\002\000\004\013\u0447\001\002\000\010\003\u02b9" +
    "\005\u02ba\013\u03f1\001\002\000\006\003\u03be\007\010\001" +
    "\002\000\012\003\u044a\007\010\035\020\036\u02a7\001\002" +
    "\000\010\003\u02b9\005\u02ba\013\u044b\001\002\000\026\003" +
    "\u02de\006\u0104\007\u0105\013\u0443\032\u02e0\035\u0107\036\u02d4" +
    "\037\u02d7\040\u02da\042\u02d5\001\002\000\010\003\u03b2\035" +
    "\020\036\u02a7\001\002\000\004\004\u044d\001\002\000\026" +
    "\003\u01ac\005\u01af\014\u01a9\017\u01a4\021\u01a3\022\u01a5\023" +
    "\u01ab\024\u019d\030\u019f\052\u01a0\001\002\000\010\003\ufffd" +
    "\005\ufffd\013\ufffd\001\002\000\004\002\ufffe\001\002\000" +
    "\014\003\017\007\010\013\013\031\014\035\020\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u044f\000\004\002\005\001\001\000\012\003\014\004" +
    "\010\005\011\007\u044e\001\001\000\012\003\014\004\010" +
    "\005\011\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\u0407\004\u0404\005\u0406\013\u0405\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\074\027\101\030\103\025\104\035\105\031" +
    "\106\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\077\042\103\040\105\043\106\037\110\045\121\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\160\146\001\001" +
    "\000\016\103\070\105\073\106\067\113\074\117\072\120" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\157\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\142" +
    "\001\001\000\004\076\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\103\102\106\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\103\107\106" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\132\001\001\000" +
    "\002\001\001\000\006\053\116\106\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\116\103\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\156\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\103\161\106\156\120\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\117\001\001\000\002\001" +
    "\001\000\004\106\100\001\001\000\004\103\144\001\001" +
    "\000\002\001\001\000\010\105\170\106\171\113\173\001" +
    "\001\000\002\001\001\000\004\076\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\116\001\001\000" +
    "\004\106\106\001\001\000\010\103\202\105\177\117\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\115\001\001\000\004\103\102\001\001" +
    "\000\004\103\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\103\221\104\222\106\217\111\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\103\161" +
    "\106\156\120\225\001\001\000\002\001\001\000\010\104" +
    "\232\106\227\114\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\242\106\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\104\232\106\227\114\253\001\001\000\002\001" +
    "\001\000\010\103\257\104\260\122\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\103\272\104\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\074\027\101" +
    "\302\103\025\104\035\105\031\106\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\075" +
    "\307\104\313\105\310\106\306\107\314\115\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\105\170\106\171\113\316\001\001\000" +
    "\002\001\001\000\016\104\326\105\321\106\320\113\324" +
    "\114\323\116\322\001\001\000\004\076\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\330\001\001\000" +
    "\006\053\116\106\234\001\001\000\002\001\001\000\006" +
    "\104\332\106\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\053\116\104\247\001\001\000\002\001\001" +
    "\000\010\104\232\106\227\114\337\001\001\000\002\001" +
    "\001\000\010\104\344\105\341\116\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\330\001\001\000\004\104\332\001\001\000\016\100\351" +
    "\103\347\104\355\105\352\112\353\123\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\360\001\001\000" +
    "\002\001\001\000\010\103\202\105\177\117\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\103\202\104" +
    "\344\105\363\116\364\117\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\107\104\332\001\001\000\010\103\257\104\260" +
    "\122\370\001\001\000\002\001\001\000\010\104\344\105" +
    "\341\116\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\155\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\050\u0116" +
    "\051\u0115\052\u0114\053\u0111\054\u0110\055\u03dc\001\001\000" +
    "\022\003\u02a8\004\u02a5\005\u02a7\006\u02aa\010\u02ae\011\u02ad" +
    "\012\u02ac\013\u02ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\074\027\101\u010a\103\025\104" +
    "\035\105\031\106\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\050\u0116\051\u0115\052" +
    "\u0114\053\u0111\054\u0110\055\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\050\u0116\051\u0115\052\u0114\053\u0111\054" +
    "\u0110\055\u011d\001\001\000\002\001\001\000\012\052\u0121" +
    "\053\u0120\054\u011f\062\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\u0130\054\u012f\066\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0138\001" +
    "\001\000\002\001\001\000\010\052\u013c\054\u013a\067\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u013f\001\001\000\002" +
    "\001\001\000\004\052\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\052\u0147\053\u0146" +
    "\070\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\u014a\001\001" +
    "\000\002\001\001\000\004\052\u014c\001\001\000\002\001" +
    "\001\000\012\051\u0150\053\u014f\054\u014e\063\u0152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\053\u0130\054\u012f\066\u015f\001\001\000\002\001\001" +
    "\000\010\051\u0162\054\u0161\071\u0164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0166\001\001\000\002\001\001\000\004\051" +
    "\u0168\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\051\u016c\053\u016b\072\u016e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u0170\001\001\000\002\001\001\000\004\051\u0172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\051\u0178\052\u0177\054\u0176\064\u017a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\052\u013c\054\u013a\067" +
    "\u017c\001\001\000\002\001\001\000\010\051\u0162\054\u0161" +
    "\071\u017e\001\001\000\002\001\001\000\010\051\u0181\052" +
    "\u0180\073\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u0185\001" +
    "\001\000\002\001\001\000\004\051\u0187\001\001\000\002" +
    "\001\001\000\012\051\u018c\052\u018a\053\u0189\065\u018b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\u0147\053" +
    "\u0146\070\u018f\001\001\000\002\001\001\000\010\051\u016c" +
    "\053\u016b\072\u0191\001\001\000\002\001\001\000\010\051" +
    "\u0181\052\u0180\073\u0193\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\u019d\040\u01af\041\u01ac\042\u01ad\043\u01a0\044" +
    "\u01a1\045\u01a5\046\u01a9\047\u01a6\150\u01a7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\u01b5\034\u01b3\151" +
    "\u01ba\152\u01c6\153\u01b0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\u01cc\034\u01cb\151\u01ba\152\u01c6\153\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\u01d8\034\u01d7\151\u01ba\152" +
    "\u01c6\153\u01b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\u01dd\151\u01df" +
    "\153\u01de\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\153\u01e2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\u01e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\u01ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\035\u0213\036\u0212\037\u0211\151\u0217\152\u0216\153\u0214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\152\u021c\153\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\151\u0221\153\u0220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\151\u01ee\152\u0223\153\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\151\u01e8\152\u0227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\035\u024a\152\u0247\153\u0249\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u0227\001\001\000\002\001\001\000\004\153\u0224\001" +
    "\001\000\004\153\u0220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\u0262\151\u01ba\152\u01c6\153\u01b0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\035\u0213\036" +
    "\u0212\037\u0211\151\u0217\152\u0216\153\u0214\001\001\000\010" +
    "\037\u0267\151\u0269\152\u0266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\152\u021c\001\001\000\004\152\u0223\001\001\000\004\151" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0271\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\040\u01af\041\u01ac\042\u01ad\043\u01a0" +
    "\044\u01a1\045\u01a5\046\u01a9\047\u01a6\141\u0274\150\u0275\001" +
    "\001\000\002\001\001\000\004\142\u0279\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\040\u01af\041\u01ac\042" +
    "\u01ad\043\u01a0\044\u01a1\045\u01a5\046\u01a9\047\u01a6\150\u027a" +
    "\001\001\000\002\001\001\000\004\143\u027c\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\040\u01af\041\u01ac" +
    "\042\u01ad\043\u01a0\044\u01a1\045\u01a5\046\u01a9\047\u01a6\150" +
    "\u027e\001\001\000\004\144\u027f\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\040\u01af\041\u01ac\042\u01ad\043" +
    "\u01a0\044\u01a1\045\u01a5\046\u01a9\047\u01a6\150\u0282\001\001" +
    "\000\004\145\u0283\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\040\u01af\041\u01ac\042\u01ad\043\u01a0\044\u01a1" +
    "\045\u01a5\046\u01a9\047\u01a6\150\u0286\001\001\000\004\146" +
    "\u0287\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\040\u01af\041\u01ac\042\u01ad\043\u01a0\044\u01a1\045\u01a5\046" +
    "\u01a9\047\u01a6\150\u028a\001\001\000\004\147\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\040\u01af\041" +
    "\u01ac\042\u01ad\043\u01a0\044\u01a1\045\u01a5\046\u01a9\047\u01a6" +
    "\150\u028e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\u029e\151\u01ba\152\u01c6\153\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\031" +
    "\u02a2\040\u01af\041\u01ac\042\u01ad\043\u01a0\044\u01a1\045\u01a5" +
    "\046\u01a9\047\u01a6\150\u01a7\001\001\000\002\001\001\000" +
    "\016\074\027\101\u02a4\103\025\104\035\105\031\106\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\124\u02dc" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u02b3\004" +
    "\u02b1\005\u02b2\016\u02b7\021\u02b5\024\u02b4\001\001\000\004" +
    "\057\u02d0\001\001\000\002\001\001\000\004\057\u02bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u02c4\001\001\000\002\001" +
    "\001\000\006\004\u02bd\005\u02be\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u02c6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\u02cb\004\u02ca\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u02d2\005\u02be\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\u036f\004\u036c\005" +
    "\u036d\006\u0373\014\u0376\015\u0375\016\u0374\020\u0371\021\u0370" +
    "\024\u036e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\133\u02ee\134\u02ec\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\u0346\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\126\u0325\127\u0324\132\u0322\135\u0320\136\u031f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\130\u031c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\124\u0316\125\u02db\126\u02da\127\u02d8\132\u02d7\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\u02f7" +
    "\001\001\000\004\130\u02fa\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u0307\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\131\u02ff\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\130\u0304\001\001\000\004\130" +
    "\u0303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u030f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u030b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\131\u030e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\u0312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\124\u0317\125\u02db\126\u02da" +
    "\127\u02d8\132\u02d7\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\124\u0319\125\u02db\126\u02da\127\u02d8\132\u02d7" +
    "\001\001\000\002\001\001\000\004\133\u031b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\124" +
    "\u033f\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\002" +
    "\001\001\000\010\126\u0330\127\u032f\133\u02ee\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\u0328\001\001" +
    "\000\004\133\u02ee\001\001\000\002\001\001\000\004\133" +
    "\u02f7\001\001\000\004\132\u032b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\126\u0337\127\u0336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\130\u0334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\126\u033e\127\u033d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\134\u0348\001\001\000\002\001\001\000\010" +
    "\127\u0324\132\u034c\135\u034a\001\001\000\002\001\001\000" +
    "\006\127\u032f\133\u02ee\001\001\000\002\001\001\000\004" +
    "\127\u033d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u0336\001\001\000\004\133\u02f7\001\001\000\014" +
    "\124\u0353\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000" +
    "\002\001\001\000\010\126\u0325\132\u0357\136\u0355\001\001" +
    "\000\002\001\001\000\006\126\u0330\133\u02ee\001\001\000" +
    "\002\001\001\000\004\126\u033e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0337\001\001\000\004\133" +
    "\u02f7\001\001\000\010\126\u0360\127\u035f\137\u035e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u0363\001\001\000\004\127\u0364\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\u0366\001\001\000" +
    "\002\001\001\000\004\126\u0368\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\130\u036b\001\001\000\002\001" +
    "\001\000\004\057\u02d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u02bb\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8" +
    "\132\u02d7\001\001\000\004\057\u0379\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\u037a\005\u02be\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\u0380\004\u037e\006\u037f\001\001" +
    "\000\002\001\001\000\014\124\u02dc\125\u02db\126\u02da\127" +
    "\u02d8\132\u02d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\u02bd\005\u02be\006\u0385\001\001\000\014\124\u02dc" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\002\001" +
    "\001\000\010\003\u02cb\004\u02ca\006\u0387\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u02d2\005\u02be\006" +
    "\u038b\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8" +
    "\132\u02d7\001\001\000\002\001\001\000\004\133\u038d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\124\u0391\125\u02db\126\u02da\127\u02d8\132\u02d7\001" +
    "\001\000\002\001\001\000\016\004\u0393\005\u0394\006\u0399" +
    "\017\u0398\023\u0396\026\u0395\001\001\000\004\057\u03b0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\057\u039e\124\u02dc\125\u02db\126\u02da\127\u02d8\132" +
    "\u02d7\001\001\000\002\001\001\000\004\057\u039b\001\001" +
    "\000\006\004\u039c\005\u02be\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u03a6\005\u02be\006\u03a7\001\001" +
    "\000\002\001\001\000\010\005\u02c4\133\u02ee\134\u02ec\001" +
    "\001\000\016\005\u02c6\126\u0325\127\u0324\132\u0322\135\u0320" +
    "\136\u031f\001\001\000\014\124\u0316\125\u02db\126\u02da\127" +
    "\u02d8\132\u02d7\001\001\000\004\134\u0346\001\001\000\010" +
    "\126\u0330\127\u032f\133\u02ee\001\001\000\004\133\u02f7\001" +
    "\001\000\004\130\u02fa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u03ab\006\u03ac\001" +
    "\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132\u02d7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\u02be\006\u03b2\001\001" +
    "\000\002\001\001\000\014\124\u02dc\125\u02db\126\u02da\127" +
    "\u02d8\132\u02d7\001\001\000\002\001\001\000\016\003\u03b6" +
    "\004\u03b4\006\u03b9\015\u03ba\020\u03b7\027\u03b5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132" +
    "\u02d7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u037a\001\001\000\002\001\001\000" +
    "\006\003\u0380\004\u037e\001\001\000\002\001\001\000\006" +
    "\004\u03c1\006\u0385\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u03c5\006\u038b\001\001\000\014\124\u02dc" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\124\u03c9" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\002\001" +
    "\001\000\016\003\u03cd\005\u03cb\006\u03d0\014\u03d1\022\u03ce" +
    "\025\u03cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u03d7\001\001\000\002\001\001\000\014\124\u02dc" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\004\057" +
    "\u0379\001\001\000\002\001\001\000\006\003\u03d3\005\u02be" +
    "\001\001\000\002\001\001\000\006\003\u03d5\006\u037f\001" +
    "\001\000\002\001\001\000\006\005\u02be\006\u03d8\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u03da\006" +
    "\u0387\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\u03df\005\u03e1\006\u03e0\010\u03e2\001" +
    "\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132\u02d7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\u03e5\006\u03e6\015\u03ba" +
    "\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132" +
    "\u02d7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u038b\001\001\000\014\124\u02dc\125" +
    "\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\004\004\u037e" +
    "\001\001\000\002\001\001\000\010\004\u03ed\005\u03ee\016" +
    "\u02b7\001\001\000\004\057\u02d0\001\001\000\002\001\001" +
    "\000\004\004\u02ca\001\001\000\004\005\u02be\001\001\000" +
    "\010\005\u03f4\006\u03f3\014\u03d1\001\001\000\014\124\u02dc" +
    "\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\004\057" +
    "\u0379\001\001\000\002\001\001\000\004\006\u0387\001\001" +
    "\000\004\006\u037f\001\001\000\016\004\u03f8\005\u03f9\006" +
    "\u03fb\014\u0376\015\u0375\016\u0374\001\001\000\004\057\u02d0" +
    "\001\001\000\002\001\001\000\014\124\u02dc\125\u02db\126" +
    "\u02da\127\u02d8\132\u02d7\001\001\000\004\057\u0379\001\001" +
    "\000\004\005\u02be\001\001\000\006\004\u037e\006\u037f\001" +
    "\001\000\006\004\u02ca\006\u0387\001\001\000\006\005\u02be" +
    "\006\u038b\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\050\u0116\051\u0115\052\u0114\053\u0111\054\u0110\055\u0403" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0409" +
    "\005\u040a\026\u0395\001\001\000\004\057\u03b0\001\001\000" +
    "\002\001\001\000\004\004\u03ab\001\001\000\010\003\u040e" +
    "\004\u040d\027\u03b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u03c1\001\001\000\004\003\u03c5\001\001" +
    "\000\010\003\u0413\005\u0412\025\u03cc\001\001\000\002\001" +
    "\001\000\004\057\u03d7\001\001\000\004\003\u03da\001\001" +
    "\000\012\003\u041a\004\u0417\006\u0418\012\u0419\001\001\000" +
    "\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u041d\006\u041e\023\u0396\001\001" +
    "\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132\u02d7\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u039c" +
    "\001\001\000\004\006\u03b2\001\001\000\004\004\u03a6\001" +
    "\001\000\002\001\001\000\010\003\u0425\004\u0424\024\u02b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\u02bd\001\001\000\004\003\u02d2\001\001\000\010\003\u042b" +
    "\006\u042a\022\u03ce\001\001\000\014\124\u02dc\125\u02db\126" +
    "\u02da\127\u02d8\132\u02d7\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u03d8\001\001\000\004\003\u03d3\001" +
    "\001\000\004\003\u03d5\001\001\000\010\003\u0425\004\u0424" +
    "\024\u036e\001\001\000\012\003\u0435\005\u0434\006\u0432\011" +
    "\u0433\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8" +
    "\132\u02d7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\u0439\006\u0438" +
    "\017\u0398\001\001\000\016\057\u039e\124\u02dc\125\u02db\126" +
    "\u02da\127\u02d8\132\u02d7\001\001\000\004\057\u039b\001\001" +
    "\000\002\001\001\000\004\006\u03ac\001\001\000\006\005" +
    "\u02be\006\u03a7\001\001\000\010\003\u043f\006\u043e\020\u03b7" +
    "\001\001\000\014\124\u02dc\125\u02db\126\u02da\127\u02d8\132" +
    "\u02d7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0385\001\001\000\004\003\u037a\001\001\000\004\003" +
    "\u0380\001\001\000\010\003\u0445\005\u0444\021\u02b5\001\001" +
    "\000\002\001\001\000\004\057\u02bb\001\001\000\004\003" +
    "\u02cb\001\001\000\014\003\u0448\005\u0444\006\u043e\020\u0371" +
    "\021\u0370\001\001\000\004\057\u02bb\001\001\000\014\124" +
    "\u02dc\125\u02db\126\u02da\127\u02d8\132\u02d7\001\001\000\006" +
    "\005\u02be\006\u0385\001\001\000\002\001\001\000\026\031" +
    "\u044d\040\u01af\041\u01ac\042\u01ad\043\u01a0\044\u01a1\045\u01a5" +
    "\046\u01a9\047\u01a6\150\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\014\004\010\005\011\007\u0450" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String nombre_mapa;
    public static Dimension dimension;
    public static boolean azar_,mapaciego_,acumular_;
    public static int finalizacion_,planetasNeutrales_;
    public static planeta_neutral neutral_;
    public static Object[] pbj;
    public static ArrayList<planeta_neutral> array_neutrales;
    public static ArrayList<planeta_jugador> array_planetas;
    public static ArrayList<planeta_jugador> array_planetas_;
    public static ArrayList<jugador> array_jugadores;
    public static String tipo_player;
    public static String nombre_player;
    public static String neutralesNombre_;
    public static int neutralesNaves_,neutralesProduc_;
    public static double neutralesMuertes; 
    public static ArrayList<ErrorSintatico> listaErrores;
    public static String mensaje_error;
    public static int arrayCod[];
  //  public static boolean validaciones1_,boolean validaciones2_;
    public void syntax_error(Symbol s){
        System.out.println(mensaje_error);
        listaErrores.add(new ErrorSintatico(s,"Corrija la sintaxis antes del token",false));
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throwsjava.lang.Exception{
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // PLAYERS8 ::= human 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // PLAYERS8 ::= easy 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // PLAYERS8 ::= hard 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.tipo_player=(String )e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS8",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // PLAYERS7 ::= error PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // PLAYERS7 ::= error dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // PLAYERS7 ::= error type dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // PLAYERS7 ::= type dosPuntos PLAYERS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS7",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // PLAYERS6 ::= error cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // PLAYERS6 ::= error PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // PLAYERS6 ::= coma PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // PLAYERS6 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS6",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // PLAYERS5 ::= error PLAYERS6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // PLAYERS5 ::= error cierraComilla PLAYERS6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // PLAYERS5 ::= error id cierraComilla PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // PLAYERS5 ::= error abreComilla id cierraComilla PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // PLAYERS5 ::= abreComilla id cierraComilla PLAYERS6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.array_planetas.add(new planeta_jugador((String)e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS5",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // PLAYERS4 ::= error abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de  \" [ \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // PLAYERS4 ::= error dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de  \": [ \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // PLAYERS4 ::= error earths dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de planetas de jugador \n";
msj+= " antes de \"planetas: [\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // PLAYERS4 ::= earths dosPuntos abreCor PLAYERS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS4",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // PLAYERS3 ::= error cierraComilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // PLAYERS3 ::= error id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e1;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // PLAYERS3 ::= error abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // PLAYERS3 ::= error dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+" \" "+e+" \"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // PLAYERS3 ::= error name dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_player=(String )e;
String msj="Error de sintaxis en declaracion  nombre de jugadores \n";
msj+= " antes de \""+e1+":\""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // PLAYERS3 ::= name dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  parser.nombre_player=(String )e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS3",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // PLAYERSAUX3 ::= error PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // PLAYERSAUX3 ::= error coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // PLAYERSAUX3 ::= PLAYERS3 coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // PLAYERSAUX3 ::= PLAYERS4 coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX3",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // PLAYERSAUX2 ::= error PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // PLAYERSAUX2 ::= error coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // PLAYERSAUX2 ::= PLAYERS7 coma PLAYERS3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // PLAYERSAUX2 ::= PLAYERS3 coma PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX2",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // PLAYERSAUX1 ::= error PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // PLAYERSAUX1 ::= error coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // PLAYERSAUX1 ::= PLAYERS7 coma PLAYERS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // PLAYERSAUX1 ::= PLAYERS4 coma PLAYERS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERSAUX1",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // PLAYERS2 ::= error coma PLAYERSAUX2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // PLAYERS2 ::= error coma PLAYERSAUX1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // PLAYERS2 ::= PLAYERS7 coma PLAYERSAUX3 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // PLAYERS2 ::= PLAYERS4 coma PLAYERSAUX2 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // PLAYERS2 ::= PLAYERS3 coma PLAYERSAUX1 
            {
              Object RESULT =null;
		
switch(tipo_player){
case "HUMANO":
parser.array_jugadores.add(new humano(nombre_player,array_planetas));
break;
case "DIFICIL":
parser.array_jugadores.add(new dificil(nombre_player,array_planetas));
break;
case "FACIL":
parser.array_jugadores.add(new facil(nombre_player,array_planetas));
break;
}
array_planetas=new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS2",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // PLAYERS9 ::= error cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // PLAYERS9 ::= error PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // PLAYERS9 ::= error abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // PLAYERS9 ::= error coma abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // PLAYERS9 ::= coma abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // PLAYERS9 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS9",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // PLAYERS1 ::= error PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // PLAYERS1 ::= error cierraParentesis PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // PLAYERS1 ::= PLAYERS2 cierraParentesis PLAYERS9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLAYERS1",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // OPPN5 ::= error OPPNAUX13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // OPPN5 ::= OPPNAUX13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OPPN5 ::= OPP41 coma OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN5",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // OPPNAUX4 ::= error coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // OPPNAUX4 ::= error coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // OPPNAUX4 ::= OPPN5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // OPPNAUX4 ::= OPP31 coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // OPPNAUX4 ::= OPP21 coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX4",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // OPPNAUX12 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // OPPNAUX12 ::= error coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // OPPNAUX12 ::= error coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // OPPNAUX12 ::= OPP31 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // OPPNAUX12 ::= OPP21 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX12",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // OPPNAUX3 ::= error coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // OPPNAUX3 ::= OPP51 coma OPPNAUX12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // OPPNAUX3 ::= OPP31 coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // OPPNAUX3 ::= OPP21 coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX3",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OPPNAUX10 ::= error coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OPPNAUX10 ::= OPP51 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // OPPNAUX10 ::= OPP21 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX10",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // OPPNAUX9 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // OPPNAUX9 ::= error coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // OPPNAUX9 ::= OPP21 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // OPPNAUX9 ::= OPP41 coma OPP21 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX9",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OPPN4 ::= error coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OPPN4 ::= OPPNAUX11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OPPN4 ::= OPP41 coma OPPNAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // OPPNAUX2 ::= error coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // OPPNAUX2 ::= error coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // OPPNAUX2 ::= OPP51 coma OPPNAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // OPPNAUX2 ::= OPPN4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // OPPNAUX2 ::= OPP21 coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // OPPN3 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // OPPN3 ::= error OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // OPPN3 ::= error coma OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // OPPN3 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // OPPN3 ::= coma OPP4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // OPPNAUX8 ::= OPP31 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // OPPNAUX8 ::= OPP41 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX8",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // OPPNAUX5 ::= OPP51 OPPN3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // OPPNAUX5 ::= OPP41 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX5",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // OPPNAUX6 ::= error coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // OPPNAUX6 ::= error cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // OPPNAUX6 ::= error coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OPPNAUX6 ::= OPP51 coma OPP31 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // OPPNAUX6 ::= OPP31 coma OPP51 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX6",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // OPPN2 ::= error coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // OPPN2 ::= OPPNAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // OPPN2 ::= OPP41 coma OPPNAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // OPPNAUX1 ::= error coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // OPPNAUX1 ::= error coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OPPNAUX1 ::= OPP51 coma OPPNAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // OPPNAUX1 ::= OPPN2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OPPNAUX1 ::= OPP31 coma OPPNAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPNAUX1",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OPPN1 ::= OPP51 coma OPPNAUX4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_));
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // OPPN1 ::= OPP41 coma OPPNAUX3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // OPPN1 ::= OPP31 coma OPPNAUX2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // OPPN1 ::= OPP21 coma OPPNAUX1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
parser.array_neutrales.add(new planeta_neutral(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
parser.neutralesProduc_=0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // OPP51 ::= error decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \"cantidad de "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // OPP51 ::= error dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \" : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // OPP51 ::= error deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de porcentajeMuertes de un planeta neutral \n";
msj+= " antes  de la declaracion de \"procentajeMuertes : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OPP51 ::= deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP51",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OPP41 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta neutral \n";
msj+= " antes  de la declaracion de \" la cantidad de "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OPP41 ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta neutral \n";
msj+= " antes  de la declaracion de \"produccion : "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OPP41 ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP41",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OPP31 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta neutral \n";
msj+= " antes  de la declaracion de \" : "+e+"  \", falta el token naves";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OPP31 ::= error ships dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta neutral \n";
msj+= " antes  de la declaracion de \" naves: "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OPP31 ::= ships dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP31",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPP21 ::= error id NT$3 cierraComilla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion del id,error en las comillas \"  "+e+"  \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OPP21 ::= error abreComilla id NT$2 cierraComilla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion del id \" \" "+e+" \" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$2 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OPP21 ::= error name dosPuntos abreComilla id NT$1 cierraComilla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$1 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

String msj="Error de sintaxis en declaracion  de nombre de un planeta neutral \n";
msj+= " antes  de la declaracion de la \" nombre: \" "+e+" \" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OPP21 ::= name dosPuntos abreComilla id NT$0 cierraComilla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP21",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OPPN01 ::= coma abreParentesis OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OPPN01 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN01",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OPPN0 ::= OPPN1 OPPN01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPN0",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPPAUX4 ::= OPP4 coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPPAUX4 ::= OPP3 coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPPAUX4 ::= OPP2 coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPPAUX10 ::= OPP3 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // OPPAUX10 ::= OPP2 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // OPPAUX3 ::= OPP5 coma OPPAUX10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OPPAUX3 ::= OPP3 coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPPAUX3 ::= OPP2 coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPPAUX9 ::= OPP2 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPPAUX9 ::= OPP4 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPPAUX8 ::= OPP5 coma OPP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPPAUX8 ::= OPP2 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPPAUX2 ::= OPP5 coma OPPAUX9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OPPAUX2 ::= OPP4 coma OPPAUX8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OPPAUX2 ::= OPP2 coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OPPAUX7 ::= OPP3 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OPPAUX7 ::= OPP4 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OPPAUX6 ::= OPP5 coma OPP3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OPPAUX6 ::= OPP3 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OPPAUX5 ::= OPP5 coma OPP4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OPPAUX5 ::= OPP4 coma OPP5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPPAUX1 ::= OPP5 coma OPPAUX7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPPAUX1 ::= OPP4 coma OPPAUX6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPPAUX1 ::= OPP3 coma OPPAUX5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPPAUX1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPP1 ::= OPP5 coma OPPAUX4 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPP1 ::= OPP4 coma OPPAUX3 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPP1 ::= OPP3 coma OPPAUX2 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPP1 ::= OPP2 coma OPPAUX1 
            {
              Object RESULT =null;
		 parser.array_planetas_.add(new planeta_jugador(parser.neutralesNaves_,parser.neutralesMuertes,parser.neutralesNombre_,false,false,parser.neutralesProduc_)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OPP5 ::= error decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPP5 ::= error dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de muertes de un planeta \n";
msj+= " antes  de la declaracion de la \" :"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OPP5 ::= error deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de muertes de un planeta \n";
msj+= " antes  de la declaracion de la  \" procentajeMuertes: "+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OPP5 ::= deaths dosPuntos decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesMuertes=Double.parseDouble((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPP4 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
String msj="Error de sintaxis en declaracion  de produccion de un planeta \n";
msj+= " antes  de la declaracion de la  \" cantidad "+e+" \"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPP4 ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de produccion de un planeta \n";
msj+= " antes  de \" produccion:"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPP4 ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.neutralesProduc_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPP3 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de naves de un planeta \n";
msj+= " antes de \" :"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e,e1left,eright,msj,true));
 parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPP3 ::= error ships dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
String msj="Error de sintaxis en declaracion  de naves de un planeta \n";
msj+= " antes  de \" naves:"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OPP3 ::= ships dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.neutralesNaves_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OPP2 ::= error cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta \n no se agrego correctamente \n";
msj+= " antes  de comilla";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OPP2 ::= error id cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" "+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OPP2 ::= error abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" \""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OPP2 ::= error name dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en declaracion  de nombre de un planeta\n";
msj+= " antes de \" nombre:\""+e+"\"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPP2 ::= name dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.neutralesNombre_=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPP01 ::= coma abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPP01 ::= cierraCor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP01",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPP0 ::= OPP1 cierraParentesis OPP01 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPP0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FINALIZACION ::= error end dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  FINALIZACION\n";
msj+= "antes de  \" finalizacion:"+e1+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));
parser.finalizacion_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALIZACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FINALIZACION ::= end dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.finalizacion_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALIZACION",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NEUTRALES ::= error OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NEUTRALES ::= error abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES\n";
msj+= " antes de \"{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NEUTRALES ::= error dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES \n";
msj+= " antes de \":{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NEUTRALES ::= error Neu dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en declaracion  PROPIEDADES DE NEUTRALES \n";
msj+= " antes de \""+e1+":{ (mas datos) }\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NEUTRALES ::= Neu dosPuntos abreParentesis OPM5 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEUTRALES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ACUMULAR ::= error dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.acumular_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de ACUMULAR \n";
msj+= "\""+e1+" "+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ACUMULAR ::= error acum dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.acumular_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de ACUMULAR \n";
msj+= "\""+e1+": "+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ACUMULAR ::= acum dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.acumular_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACUMULAR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // MAPA_CIEGO ::= error mapaCiego dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.mapaciego_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de MAPA CIEGO \n";
msj+= "\" "+e1+":"+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA_CIEGO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // MAPA_CIEGO ::= mapaCiego dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.mapaciego_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA_CIEGO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PLANETA_NEUTRALES ::= error num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e1);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES\n ";
msj+= "\" cantidad de planetas neutrales tomado "+e1+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PLANETA_NEUTRALES ::= error dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES \n";
msj+= "\" :"+e+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PLANETA_NEUTRALES ::= error planetasNeu dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.planetasNeutrales_=Integer.parseInt((String)e);
String msj="Error de sintaxis en declaracion de CANTIDAD DE PLANETAS NEUTRALES \n";
msj+= "\" "+e1+":"+e+" \" ";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PLANETA_NEUTRALES ::= planetasNeu dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.planetasNeutrales_=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETA_NEUTRALES",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // AZAR_MAPA ::= error bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.azar_=Boolean.parseBoolean((String)e1);
String msj="Error de sintaxis en declaracion de AZAR \" valor de azar tomado"+e1+" \" ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AZAR_MAPA ::= error azar dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.azar_=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en declaracion de AZAR. \" "+e1+":"+e+" \"\n ,corrija la linea o elimine la declaracion";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AZAR_MAPA ::= azar dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.azar_=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AZAR_MAPA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DIMENSIONES_MAPA ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en dimensiones del mapa antes de cerrar parentesis tamaño:{ aqui->}";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DIMENSIONES_MAPA ::= error OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error antes de cierraParentesis en los datos de las dimensiones";
listaErrores.add(new ErrorSintatico((String)e,eleft-1,eright-1,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DIMENSIONES_MAPA ::= error abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis en dimensiones del mapa antes de \n abrir parentesis tamaño:->{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DIMENSIONES_MAPA ::= error dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis en dimensiones del \n mapa antes de dos puntos tamaño->:{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DIMENSIONES_MAPA ::= error tamaño dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis en dimensiones del \n mapa antes de \"tamaño\" ->tamaño:{ }";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DIMENSIONES_MAPA ::= tamaño dosPuntos abreParentesis OPM4 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_MAPA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NOMBRE_MAPA ::= error cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.nombre_mapa="MAPA";
String msj="Error de sintaxis en la declaracion del \n nombre del mapa en la linea de declaracion";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NOMBRE_MAPA ::= error id cierraComilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de cierre de comilla ";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NOMBRE_MAPA ::= error abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \""+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NOMBRE_MAPA ::= error dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \":"+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NOMBRE_MAPA ::= error name_mapa dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
String msj="Error de sintaxis en la declaracion del \n nombre del mapa , antes de \"id:"+e+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NOMBRE_MAPA ::= name_mapa dosPuntos abreComilla id cierraComilla 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.nombre_mapa=(String)e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_MAPA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SHOWPRODUCCION ::= error produc dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[2]=Integer.parseInt((String)e);
String msj="Error de sintaxis en la declaracion cantidad de produccion de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWPRODUCCION",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SHOWPRODUCCION ::= produc dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[2]=Integer.parseInt((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWPRODUCCION",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SHOWESTADISTICAS ::= error mostrarEstadisticas dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[1]=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en la declaracion mostrar estadisticas de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWESTADISTICAS",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SHOWESTADISTICAS ::= mostrarEstadisticas dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[1]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWESTADISTICAS",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SHOWNAVES ::= error bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SHOWNAVES ::= error mostrarNaves dosPuntos bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
parser.pbj[0]=Boolean.parseBoolean((String)e);
String msj="Error de sintaxis en la declaracion mostrar naves de NEUTRALES \n";
msj+= " , antes de \" "+e1+":"+e+" \"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SHOWNAVES ::= mostrarNaves dosPuntos bool 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pbj[0]=Boolean.parseBoolean((String)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SHOWNAVES",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPM8 ::= error coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPM8 ::= SHOWESTADISTICAS coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPM8 ::= SHOWNAVES coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPM7 ::= error coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPM7 ::= SHOWPRODUCCION coma SHOWNAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPM7 ::= SHOWNAVES coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPM6 ::= error coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPM6 ::= SHOWPRODUCCION coma SHOWESTADISTICAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPM6 ::= SHOWESTADISTICAS coma SHOWPRODUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPM5 ::= error coma OPM8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPM5 ::= error coma OPM7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPM5 ::= error coma OPM6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPM5 ::= SHOWPRODUCCION coma OPM8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPM5 ::= SHOWESTADISTICAS coma OPM7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPM5 ::= SHOWNAVES coma OPM6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPM4 ::= error num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas), antes de  \""+e+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPM4 ::= error dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas), antes de  \":"+x+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPM4 ::= error rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de  \"filas:"+x+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPM4 ::= error coma rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=10;
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de  \",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPM4 ::= error num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas), antes de \""+e2+",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e2,e2left,e2right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPM4 ::= error dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de  \":"+e2+",filas:"+e1+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPM4 ::= error columns dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de Columnas: \" columnas:+"+e2+",filas:"+e1+" \"";
listaErrores.add(new ErrorSintatico((String)x,xleft,xright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPM4 ::= error columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=10;
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones (filas,columnas) antes de \"columnas:"+e2+", corrija el error";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPM4 ::= error coma columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=10;
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones(filas,columnas) antes de \",columnas:"+e2+" \" corrija el error";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPM4 ::= error num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \":"+e1+",columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)e1,e1left,e1right,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPM4 ::= error dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \":"+e1+",columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));



              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPM4 ::= error rows dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);
String msj="Error de sintaxis en la declaracion de \n las dimensiones, antes de \"filas: "+x+", columnas:"+e2+"\"";
listaErrores.add(new ErrorSintatico((String)x,xleft,xright,msj,true));


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPM4 ::= columns dosPuntos num coma rows dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPM4 ::= rows dosPuntos num coma columns dosPuntos num 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int filas=Integer.parseInt((String) e1);
int columnas=Integer.parseInt((String) e2);
parser.dimension=new Dimension(filas,columnas);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // JSONDATOS ::= NEUTRALES 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // JSONDATOS ::= PLANETA_NEUTRALES 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // JSONDATOS ::= DIMENSIONES_MAPA 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // JSONDATOS ::= ACUMULAR 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // JSONDATOS ::= FINALIZACION 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // JSONDATOS ::= MAPA_CIEGO 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // JSONDATOS ::= AZAR_MAPA 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // JSONDATOS ::= NOMBRE_MAPA 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSONDATOS",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // JSON7 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON7",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // JSON7 ::= coma JSONDATOS cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON7",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // JSON6 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON6",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // JSON6 ::= coma JSONDATOS JSON7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON6",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // JSON5 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON5",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // JSON5 ::= coma JSONDATOS JSON6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON5",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // JSON4 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON4",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // JSON4 ::= coma JSONDATOS JSON5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON4",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // JSON3 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON3",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // JSON3 ::= coma JSONDATOS JSON4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON3",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // JSON2 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // JSON2 ::= coma JSONDATOS JSON3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON2",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // JSON1 ::= cierraParentesis 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // JSON1 ::= JSONDATOS JSON2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
int xx=Integer.parseInt(String.valueOf(e)); int yy=Integer.parseInt(String.valueOf(e2));
RESULT=(xx+yy);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON1",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPM1 ::= cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPM1 ::= JSONDATOS coma JSON1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPTIONS16 ::= MAPA coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPTIONS16 ::= PLANETAS coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS16",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPTIONS15 ::= PLANETAS OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPTIONS15 ::= PLANETAS_NEUTRALES coma PLANETAS cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS15",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPTIONS14 ::= PLANETAS_NEUTRALES coma MAPA cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPTIONS14 ::= MAPA OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS14",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPTIONS4 ::= PLANETAS_NEUTRALES coma OPTIONS16 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPTIONS4 ::= MAPA coma OPTIONS15 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPTIONS4 ::= PLANETAS coma OPTIONS14 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPTIONS13 ::= MAPA coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPTIONS13 ::= PLANETAS coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS13",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPTIONS12 ::= error coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPTIONS12 ::= PLANETAS coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPTIONS12 ::= JUGADORES coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPTIONS11 ::= error coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPTIONS11 ::= JUGADORES coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPTIONS11 ::= MAPA coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPTIONS3 ::= error coma OPTIONS13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPTIONS3 ::= JUGADORES coma OPTIONS13 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPTIONS3 ::= MAPA coma OPTIONS12 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPTIONS3 ::= PLANETAS coma OPTIONS11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPTIONS10 ::= MAPA OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPTIONS10 ::= PLANETAS_NEUTRALES coma MAPA cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPTIONS9 ::= error coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPTIONS9 ::= MAPA coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPTIONS9 ::= JUGADORES coma MAPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPTIONS8 ::= error OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPTIONS8 ::= error coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPTIONS8 ::= JUGADORES OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPTIONS8 ::= PLANETAS_NEUTRALES coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPTIONS2 ::= error coma OPTIONS10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPTIONS2 ::= error coma OPTIONS9 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPTIONS2 ::= JUGADORES coma OPTIONS10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPTIONS2 ::= PLANETAS_NEUTRALES coma OPTIONS9 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPTIONS2 ::= MAPA coma OPTIONS8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPTIONS7 ::= PLANETAS OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPTIONS7 ::= PLANETAS_NEUTRALES coma PLANETAS cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPTIONS6 ::= error coma PLANETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPTIONS6 ::= PLANETAS coma JUGADORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPTIONS6 ::= JUGADORES coma 
            {
              Object RESULT =null;
		int PLANETASleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int PLANETASright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object PLANETAS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPTIONS0 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis despues de la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPTIONS0 ::= error PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis en la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPTIONS0 ::= error coma PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPTIONS0 ::= cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPTIONS0 ::= coma PLANETAS_NEUTRALES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPTIONS5 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis despues de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPTIONS5 ::= error coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPTIONS5 ::= JUGADORES OPTIONS0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPTIONS5 ::= PLANETAS_NEUTRALES coma JUGADORES cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPTIONS1 ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTIONS1 ::= error coma OPTIONS7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPTIONS1 ::= error coma OPTIONS6 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIONS1 ::= error coma OPTIONS5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIONS1 ::= JUGADORES coma OPTIONS7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPTIONS1 ::= PLANETAS_NEUTRALES coma OPTIONS6 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPTIONS1 ::= PLANETAS coma OPTIONS5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPTIONS ::= error cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPTIONS ::= error coma OPTIONS4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPTIONS ::= error coma OPTIONS3 cierraParentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPTIONS ::= error coma OPTIONS2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPTIONS ::= error coma OPTIONS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis de la declaracion de MAS OPCIONES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPTIONS ::= coma OPTIONS4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPTIONS ::= PLANETAS_NEUTRALES coma OPTIONS3 cierraParentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPTIONS ::= PLANETAS coma OPTIONS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPTIONS ::= MAPA coma OPTIONS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // JUGADORES ::= error PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // JUGADORES ::= error abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // JUGADORES ::= error players dosPuntos abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis de la declaracion de JUGADORES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // JUGADORES ::= players dosPuntos abreCor abreParentesis PLAYERS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JUGADORES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ERRORES ::= OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORES",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ERRORES ::= OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORES",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PLANETAS_NEUTRALES ::= error dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PLANETAS_NEUTRALES ::= error planetas_Neu dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS NEUTRALES";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PLANETAS_NEUTRALES ::= planetas_Neu dosPuntos abreCor abreParentesis OPPN0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS_NEUTRALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PLANETAS ::= error abreParentesis OPP0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PLANETAS ::= error planets dosPuntos abreCor abreParentesis OPP0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de PLANETAS";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PLANETAS ::= planets dosPuntos abreCor abreParentesis OPP0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLANETAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAPA ::= error dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de MAPA";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAPA ::= error map dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de MAPA";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAPA ::= map dosPuntos abreParentesis OPM1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAPA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error abreParentesis OPTIONS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
String msj="Error de sintaxis antes de iniciar la declaracion de configuracion del juego";
listaErrores.add(new ErrorSintatico((String)e,eleft,eright,msj,true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= abreParentesis OPTIONS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

