
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 17 15:35:40 CST 2020
//----------------------------------------------------

package gramatica_guardar;

import static gramatica_guardar.parser_save.Blue;
import static gramatica_guardar.parser_save.Green;
import static gramatica_guardar.parser_save.Muertes_;
import static gramatica_guardar.parser_save.Naves_;
import java_cup.runtime.Symbol;
import java.awt.Dimension;
import java.util.ArrayList;
import planetas.planeta_jugador;
import planetas_neutral.planeta_neutral;
import jugadores.jugador;
import static gramatica_guardar.parser_save.Nombre_;
import static gramatica_guardar.parser_save.Produccion_;
import static gramatica_guardar.parser_save.Red;
import static gramatica_guardar.parser_save.Tipo_;
import static gramatica_guardar.parser_save.coord_x;
import static gramatica_guardar.parser_save.coord_y;
import static gramatica_guardar.parser_save.dimension_;
import static gramatica_guardar.parser_save.jugadores_;
import static gramatica_guardar.parser_save.lista_;
import static gramatica_guardar.parser_save.neutrales_;
import static gramatica_guardar.parser_save.players_;

import static gramatica_guardar.parser_save.azar_;
import static gramatica_guardar.parser_save.mapaciego_;
import static gramatica_guardar.parser_save.acumular_;
import static gramatica_guardar.parser_save.naves_;
import static gramatica_guardar.parser_save.estadisticas_;
import static gramatica_guardar.parser_save.isNeutral_;
import java.awt.Color;
import jugadores.dificil;
import jugadores.facil;
import jugadores.humano; 

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 17 15:35:40 CST 2020
  */
public class parser_save extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser_save() {super();}

  /** Constructor which sets the default scanner. */
  public parser_save(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_save(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\023\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\005\025\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\006\023\000\002\007\013\000\002" +
    "\010\015\000\002\003\010\000\002\013\044\000\002\014" +
    "\026\000\002\015\005\000\002\015\003\000\002\004\011" +
    "\000\002\016\034\000\002\023\034\000\002\017\011\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\002\000\002\012\004\000\002\012\004\000\002\022\002" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\012\003\004\010\uffe5\041\007\042\006\001" +
    "\002\000\014\003\023\004\347\010\351\011\024\012\352" +
    "\001\002\000\004\010\014\001\002\000\062\002\uffe5\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\015\uffe5\021\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\031\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\007\042\006\045\uffe5\001\002\000\062\002\uffe5\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\015\uffe5\021\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\031\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\007\042\006\045\uffe5\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\056\002\uffe6\003\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\031\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\045" +
    "\uffe6\001\002\000\056\002\uffe7\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015" +
    "\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\031\uffe7\033\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\045\uffe7\001\002\000" +
    "\010\012\uffe5\041\007\042\006\001\002\000\004\012\016" +
    "\001\002\000\010\004\uffe5\041\007\042\006\001\002\000" +
    "\004\004\020\001\002\000\012\003\uffe5\011\uffe5\041\007" +
    "\042\006\001\002\000\006\003\023\011\024\001\002\000" +
    "\010\015\uffe5\041\007\042\006\001\002\000\010\004\054" +
    "\011\055\012\056\001\002\000\010\012\uffe5\041\007\042" +
    "\006\001\002\000\004\012\026\001\002\000\010\004\uffe5" +
    "\041\007\042\006\001\002\000\004\004\030\001\002\000" +
    "\010\013\uffe5\041\007\042\006\001\002\000\004\013\032" +
    "\001\002\000\010\012\uffe5\041\007\042\006\001\002\000" +
    "\004\012\034\001\002\000\010\036\uffe5\041\007\042\006" +
    "\001\002\000\004\036\036\001\002\000\006\041\041\042" +
    "\040\001\002\000\004\014\045\001\002\000\044\014\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\032\uffe2\034\uffe2\041\041\042\040" +
    "\044\uffe2\046\uffe2\047\uffe2\001\002\000\044\014\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\032\uffe2\034\uffe2\041\041\042\040\044" +
    "\uffe2\046\uffe2\047\uffe2\001\002\000\040\014\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\032\uffe4\034\uffe4\044\uffe4\046\uffe4\047\uffe4" +
    "\001\002\000\040\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1" +
    "\034\uffe1\044\uffe1\046\uffe1\047\uffe1\001\002\000\040\014" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\032\uffe3\034\uffe3\044\uffe3\046" +
    "\uffe3\047\uffe3\001\002\000\010\012\uffe5\041\007\042\006" +
    "\001\002\000\004\012\047\001\002\000\010\036\uffe5\041" +
    "\007\042\006\001\002\000\004\036\051\001\002\000\010" +
    "\005\uffe5\041\007\042\006\001\002\000\004\005\053\001" +
    "\002\000\012\002\ufffb\015\ufffb\041\ufffb\042\ufffb\001\002" +
    "\000\004\013\061\001\002\000\004\012\060\001\002\000" +
    "\004\004\057\001\002\000\012\002\ufff9\015\ufff9\041\ufff9" +
    "\042\ufff9\001\002\000\012\002\ufffa\015\ufffa\041\ufffa\042" +
    "\ufffa\001\002\000\012\002\ufff8\015\ufff8\041\ufff8\042\ufff8" +
    "\001\002\000\004\015\064\001\002\000\006\041\041\042" +
    "\040\001\002\000\010\012\uffe5\041\007\042\006\001\002" +
    "\000\004\012\066\001\002\000\010\035\uffe5\041\007\042" +
    "\006\001\002\000\004\035\070\001\002\000\006\041\041" +
    "\042\040\001\002\000\004\016\072\001\002\000\010\012" +
    "\uffe5\041\007\042\006\001\002\000\004\012\074\001\002" +
    "\000\010\035\uffe5\041\007\042\006\001\002\000\004\035" +
    "\076\001\002\000\006\041\041\042\040\001\002\000\004" +
    "\017\100\001\002\000\010\012\uffe5\041\007\042\006\001" +
    "\002\000\004\012\102\001\002\000\010\035\uffe5\041\007" +
    "\042\006\001\002\000\004\035\104\001\002\000\010\002" +
    "\ufff7\041\ufff7\042\ufff7\001\002\000\004\020\107\001\002" +
    "\000\010\005\uffe5\041\007\042\006\001\002\000\010\012" +
    "\uffe5\041\007\042\006\001\002\000\004\012\111\001\002" +
    "\000\010\004\uffe5\041\007\042\006\001\002\000\004\004" +
    "\113\001\002\000\010\021\uffe5\041\007\042\006\001\002" +
    "\000\004\021\115\001\002\000\010\012\uffe5\041\007\042" +
    "\006\001\002\000\010\005\uffe5\041\007\042\006\001\002" +
    "\000\004\005\120\001\002\000\010\005\ufff6\041\ufff6\042" +
    "\ufff6\001\002\000\004\012\122\001\002\000\010\035\uffe5" +
    "\041\007\042\006\001\002\000\004\035\124\001\002\000" +
    "\006\041\041\042\040\001\002\000\004\022\126\001\002" +
    "\000\010\012\uffe5\041\007\042\006\001\002\000\004\012" +
    "\130\001\002\000\010\035\uffe5\041\007\042\006\001\002" +
    "\000\004\035\132\001\002\000\010\005\ufff5\041\ufff5\042" +
    "\ufff5\001\002\000\004\005\134\001\002\000\010\023\uffe5" +
    "\041\007\042\006\001\002\000\004\023\137\001\002\000" +
    "\004\033\240\001\002\000\010\012\uffe5\041\007\042\006" +
    "\001\002\000\004\012\141\001\002\000\010\004\uffe5\041" +
    "\007\042\006\001\002\000\004\004\143\001\002\000\010" +
    "\006\uffe5\041\007\042\006\001\002\000\004\006\146\001" +
    "\002\000\004\033\ufff4\001\002\000\010\024\uffe5\041\007" +
    "\042\006\001\002\000\004\024\150\001\002\000\010\012" +
    "\uffe5\041\007\042\006\001\002\000\004\012\152\001\002" +
    "\000\010\035\uffe5\041\007\042\006\001\002\000\004\035" +
    "\154\001\002\000\006\041\041\042\040\001\002\000\004" +
    "\025\156\001\002\000\010\012\uffe5\041\007\042\006\001" +
    "\002\000\004\012\160\001\002\000\010\040\uffe5\041\007" +
    "\042\006\001\002\000\004\040\162\001\002\000\006\041" +
    "\041\042\040\001\002\000\004\021\164\001\002\000\010" +
    "\012\uffe5\041\007\042\006\001\002\000\004\012\166\001" +
    "\002\000\010\036\uffe5\041\007\042\006\001\002\000\004" +
    "\036\170\001\002\000\006\041\041\042\040\001\002\000" +
    "\004\026\172\001\002\000\010\012\uffe5\041\007\042\006" +
    "\001\002\000\004\012\174\001\002\000\010\036\uffe5\041" +
    "\007\042\006\001\002\000\004\036\176\001\002\000\006" +
    "\041\041\042\040\001\002\000\004\027\200\001\002\000" +
    "\010\012\uffe5\041\007\042\006\001\002\000\004\012\202" +
    "\001\002\000\010\037\uffe5\041\007\042\006\001\002\000" +
    "\004\037\204\001\002\000\006\041\041\042\040\001\002" +
    "\000\004\030\207\001\002\000\004\033\ufff3\001\002\000" +
    "\010\006\uffe5\041\007\042\006\001\002\000\004\006\211" +
    "\001\002\000\010\031\uffe5\041\007\042\006\001\002\000" +
    "\004\031\213\001\002\000\010\012\uffe5\041\007\042\006" +
    "\001\002\000\004\012\215\001\002\000\010\036\uffe5\041" +
    "\007\042\006\001\002\000\004\036\217\001\002\000\006" +
    "\041\041\042\040\001\002\000\004\032\221\001\002\000" +
    "\010\012\uffe5\041\007\042\006\001\002\000\004\012\223" +
    "\001\002\000\010\036\uffe5\041\007\042\006\001\002\000" +
    "\004\036\225\001\002\000\010\007\uffe5\041\007\042\006" +
    "\001\002\000\004\007\227\001\002\000\010\007\uffe5\041" +
    "\007\042\006\001\002\000\004\007\231\001\002\000\012" +
    "\005\uffe5\006\uffe5\041\007\042\006\001\002\000\004\033" +
    "\ufff2\001\002\000\006\005\235\006\146\001\002\000\004" +
    "\033\ufff0\001\002\000\010\033\uffe5\041\007\042\006\001" +
    "\002\000\004\033\ufff1\001\002\000\004\002\000\001\002" +
    "\000\010\012\uffe5\041\007\042\006\001\002\000\004\012" +
    "\242\001\002\000\010\004\uffe5\041\007\042\006\001\002" +
    "\000\004\004\244\001\002\000\010\006\uffe5\041\007\042" +
    "\006\001\002\000\004\006\247\001\002\000\004\002\uffef" +
    "\001\002\000\010\025\uffe5\041\007\042\006\001\002\000" +
    "\004\025\251\001\002\000\010\012\uffe5\041\007\042\006" +
    "\001\002\000\004\012\253\001\002\000\010\040\uffe5\041" +
    "\007\042\006\001\002\000\004\040\255\001\002\000\006" +
    "\041\041\042\040\001\002\000\004\034\257\001\002\000" +
    "\010\012\uffe5\041\007\042\006\001\002\000\004\012\261" +
    "\001\002\000\010\040\uffe5\041\007\042\006\001\002\000" +
    "\004\040\263\001\002\000\006\041\041\042\040\001\002" +
    "\000\004\044\266\001\002\000\004\023\320\001\002\000" +
    "\010\012\uffe5\041\007\042\006\001\002\000\004\012\270" +
    "\001\002\000\010\004\uffe5\041\007\042\006\001\002\000" +
    "\004\004\272\001\002\000\010\041\007\042\006\045\uffe5" +
    "\001\002\000\004\045\274\001\002\000\010\012\uffe5\041" +
    "\007\042\006\001\002\000\004\012\276\001\002\000\010" +
    "\036\uffe5\041\007\042\006\001\002\000\004\036\300\001" +
    "\002\000\006\041\041\042\040\001\002\000\004\047\302" +
    "\001\002\000\010\012\uffe5\041\007\042\006\001\002\000" +
    "\004\012\304\001\002\000\010\036\uffe5\041\007\042\006" +
    "\001\002\000\004\036\306\001\002\000\006\041\041\042" +
    "\040\001\002\000\004\046\310\001\002\000\010\012\uffe5" +
    "\041\007\042\006\001\002\000\004\012\312\001\002\000" +
    "\010\036\uffe5\041\007\042\006\001\002\000\004\036\314" +
    "\001\002\000\010\005\uffe5\041\007\042\006\001\002\000" +
    "\004\005\316\001\002\000\010\023\uffe5\041\007\042\006" +
    "\001\002\000\004\023\uffed\001\002\000\010\012\uffe5\041" +
    "\007\042\006\001\002\000\004\012\322\001\002\000\010" +
    "\004\uffe5\041\007\042\006\001\002\000\004\004\324\001" +
    "\002\000\010\025\uffe5\041\007\042\006\001\002\000\004" +
    "\025\327\001\002\000\010\007\uffe5\041\007\042\006\001" +
    "\002\000\010\012\uffe5\041\007\042\006\001\002\000\004" +
    "\012\331\001\002\000\010\040\uffe5\041\007\042\006\001" +
    "\002\000\004\040\333\001\002\000\012\005\uffe5\025\uffe5" +
    "\041\007\042\006\001\002\000\006\005\335\025\327\001" +
    "\002\000\010\007\uffeb\041\uffeb\042\uffeb\001\002\000\010" +
    "\007\uffec\041\uffec\042\uffec\001\002\000\010\007\uffea\041" +
    "\uffea\042\uffea\001\002\000\004\007\341\001\002\000\012" +
    "\005\uffe5\006\uffe5\041\007\042\006\001\002\000\006\005" +
    "\344\006\247\001\002\000\004\002\uffee\001\002\000\010" +
    "\002\uffe5\041\007\042\006\001\002\000\004\002\uffe9\001" +
    "\002\000\004\002\uffe8\001\002\000\006\003\023\011\024" +
    "\001\002\000\004\015\064\001\002\000\006\003\023\011" +
    "\024\001\002\000\006\003\023\011\024\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\006\002\007\011\004\001\001\000\004\005" +
    "\347\001\001\000\002\001\001\000\004\011\012\001\001" +
    "\000\004\011\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\014" +
    "\001\001\000\002\001\001\000\004\011\016\001\001\000" +
    "\002\001\001\000\004\011\020\001\001\000\004\005\021" +
    "\001\001\000\004\011\061\001\001\000\002\001\001\000" +
    "\004\011\024\001\001\000\002\001\001\000\004\011\026" +
    "\001\001\000\002\001\001\000\004\011\030\001\001\000" +
    "\002\001\001\000\004\011\032\001\001\000\002\001\001" +
    "\000\004\011\034\001\001\000\002\001\001\000\004\012" +
    "\036\001\001\000\002\001\001\000\006\012\042\022\043" +
    "\001\001\000\006\012\042\022\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\045" +
    "\001\001\000\002\001\001\000\004\011\047\001\001\000" +
    "\002\001\001\000\004\011\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\062\001\001\000\004\012\104\001" +
    "\001\000\004\011\064\001\001\000\002\001\001\000\004" +
    "\011\066\001\001\000\002\001\001\000\004\012\070\001" +
    "\001\000\002\001\001\000\004\011\072\001\001\000\002" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\004\012\076\001\001\000\002\001\001\000\004\011\100" +
    "\001\001\000\002\001\001\000\004\011\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\105\001\001" +
    "\000\004\011\132\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\004\011\111\001\001\000\002\001\001" +
    "\000\004\011\113\001\001\000\004\010\115\001\001\000" +
    "\004\011\120\001\001\000\004\011\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\122\001\001\000\002\001\001\000\004\012\124\001\001" +
    "\000\002\001\001\000\004\011\126\001\001\000\002\001" +
    "\001\000\004\011\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\134\001\001\000" +
    "\004\003\135\001\001\000\004\004\236\001\001\000\004" +
    "\011\137\001\001\000\002\001\001\000\004\011\141\001" +
    "\001\000\002\001\001\000\006\011\143\013\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\146\001" +
    "\001\000\002\001\001\000\004\011\150\001\001\000\002" +
    "\001\001\000\004\011\152\001\001\000\002\001\001\000" +
    "\004\012\154\001\001\000\002\001\001\000\004\011\156" +
    "\001\001\000\002\001\001\000\004\011\160\001\001\000" +
    "\002\001\001\000\004\012\162\001\001\000\002\001\001" +
    "\000\004\011\164\001\001\000\002\001\001\000\004\011" +
    "\166\001\001\000\002\001\001\000\004\012\170\001\001" +
    "\000\002\001\001\000\004\011\172\001\001\000\002\001" +
    "\001\000\004\011\174\001\001\000\002\001\001\000\004" +
    "\012\176\001\001\000\002\001\001\000\004\011\200\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\004\012\204\001\001\000\004\014\205\001" +
    "\001\000\002\001\001\000\004\011\207\001\001\000\002" +
    "\001\001\000\004\011\211\001\001\000\002\001\001\000" +
    "\004\011\213\001\001\000\002\001\001\000\004\011\215" +
    "\001\001\000\002\001\001\000\004\012\217\001\001\000" +
    "\002\001\001\000\004\011\221\001\001\000\002\001\001" +
    "\000\004\011\223\001\001\000\002\001\001\000\004\011" +
    "\225\001\001\000\002\001\001\000\004\011\227\001\001" +
    "\000\002\001\001\000\010\011\232\013\233\015\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\240\001\001\000\002\001\001\000\004" +
    "\011\242\001\001\000\002\001\001\000\004\011\244\001" +
    "\001\000\004\016\245\001\001\000\002\001\001\000\004" +
    "\011\247\001\001\000\002\001\001\000\004\011\251\001" +
    "\001\000\002\001\001\000\004\011\253\001\001\000\002" +
    "\001\001\000\004\012\255\001\001\000\002\001\001\000" +
    "\004\011\257\001\001\000\002\001\001\000\004\011\261" +
    "\001\001\000\002\001\001\000\004\012\263\001\001\000" +
    "\004\023\264\001\001\000\002\001\001\000\004\011\266" +
    "\001\001\000\002\001\001\000\004\011\270\001\001\000" +
    "\002\001\001\000\004\011\272\001\001\000\002\001\001" +
    "\000\004\011\274\001\001\000\002\001\001\000\004\011" +
    "\276\001\001\000\002\001\001\000\004\012\300\001\001" +
    "\000\002\001\001\000\004\011\302\001\001\000\002\001" +
    "\001\000\004\011\304\001\001\000\002\001\001\000\004" +
    "\012\306\001\001\000\002\001\001\000\004\011\310\001" +
    "\001\000\002\001\001\000\004\011\312\001\001\000\002" +
    "\001\001\000\004\011\314\001\001\000\002\001\001\000" +
    "\004\011\316\001\001\000\002\001\001\000\004\011\320" +
    "\001\001\000\002\001\001\000\004\011\322\001\001\000" +
    "\002\001\001\000\004\011\324\001\001\000\004\017\325" +
    "\001\001\000\004\011\337\001\001\000\004\011\327\001" +
    "\001\000\002\001\001\000\004\011\331\001\001\000\002" +
    "\001\001\000\004\011\333\001\001\000\006\017\336\020" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\341\001\001\000" +
    "\006\016\344\021\342\001\001\000\002\001\001\000\004" +
    "\011\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\355\001\001\000\004\006\354\001\001\000\004" +
    "\005\353\001\001\000\004\005\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_save$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_save$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_save$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static boolean azar_,mapaciego_,acumular_,naves_,estadisticas_,neutral_,isNeutral_; 
   public static Dimension dimension_;
   public static int Naves_,Produccion_,coord_x,coord_y,Red,Blue,Green,count;
   public static String Nombre_,Tipo_,Nombre2_;
   public static double Muertes_;
   public static ArrayList<planeta_jugador> lista_;
   public static ArrayList<planeta_neutral> neutrales_;
   public static ArrayList<planeta_jugador> jugadores_;
   public static ArrayList<jugador> players_;
   
   public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
    System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser_save$actions {
  private final parser_save parser;

  /** Constructor */
  CUP$parser_save$actions(parser_save parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser_save$do_action(
    int                        CUP$parser_save$act_num,
    java_cup.runtime.lr_parser CUP$parser_save$parser,
    java.util.Stack            CUP$parser_save$stack,
    int                        CUP$parser_save$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_save$result;

      /* select the action based on the action number */
      switch (CUP$parser_save$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ENTS1 ::= ENTS0 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS1",16, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENTS1 ::= 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS1",16, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENTS0 ::= space ENTS1 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS0",8, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ENTS0 ::= enter ENTS1 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS0",8, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENTS ::= 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS",7, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENTS ::= enter ENTS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS",7, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENTS ::= space ENTS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("ENTS",7, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PLAYER3 ::= cierraCor ENTS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER3",15, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PLAYER3 ::= PLAYER 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER3",15, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PLAYER2 ::= PLAYER1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.peek()).value;
		


              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER2",14, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PLAYER2 ::= cierraCor 
            {
              Object RESULT =null;
		
lista_.add(new planeta_jugador("nuevo"));
//System.out.println("nuevo----------->");

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER2",14, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PLAYER1 ::= nombre ENTS dosPuntos ENTS id ENTS PLAYER2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).value;
		
System.out.println((String)e1);
lista_.add(new planeta_jugador((String)e1));
RESULT=e1;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER1",13, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COLORES ::= color ENTS dosPuntos ENTS abreCor ENTS rojo ENTS dosPuntos ENTS num ENTS0 azul ENTS dosPuntos ENTS num ENTS0 verde ENTS dosPuntos ENTS num ENTS cierraCor ENTS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-15)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-3)).value;
		
Red=Integer.parseInt((String)e1);
Blue=Integer.parseInt((String)e2);
Green=Integer.parseInt((String)e3);

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("COLORES",17, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-25)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PLAYER ::= abreParen ENTS nombre ENTS dosPuntos ENTS id ENTS0 tipo ENTS dosPuntos ENTS id ENTS0 COLORES planetas ENTS dosPuntos ENTS abreCor ENTS PLAYER1 ENTS cierraParen ENTS PLAYER3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-19)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-19)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-19)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-13)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-13)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-4)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-4)).value;
		
Nombre_=(String)e1;
Tipo_=(String)e2;

switch(Tipo_){
case "dificil":

dificil dif=new dificil(Nombre_,lista_);
dif.setColor(Color.getHSBColor(Red,Green,Blue));
players_.add(dif);
break;

case "facil":



facil fac=new facil(Nombre_,lista_);
fac.setColor(Color.getHSBColor(Red,Green,Blue));
players_.add(fac);
break;

case "humano":

humano hum=new humano(Nombre_,lista_);
hum.setColor(Color.getHSBColor(Red,Green,Blue));
players_.add(hum);
break;


}




              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLAYER",12, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-25)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // JUGADORES ::= jugadores ENTS dosPuntos ENTS abreCor ENTS PLAYER 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("JUGADORES",2, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOS1 ::= DATOS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DATOS1",11, ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOS1 ::= ENTS cierraCor ENTS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DATOS1",11, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // POS ::= pos ENTS abreParen ENTS x ENTS dosPuntos ENTS num ENTS0 y ENTS dosPuntos ENTS num ENTS cierraParen ENTS cierraParen DATOS1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-11)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-5)).value;
		
coord_x=Integer.parseInt((String)e1);
coord_y=Integer.parseInt((String)e2);

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("POS",10, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-19)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATOS ::= ENTS abreParen ENTS neutral ENTS dosPuntos ENTS bool ENTS0 nombre ENTS dosPuntos ENTS id ENTS0 naves ENTS dosPuntos ENTS num ENTS0 produccion ENTS dosPuntos ENTS num ENTS0 muertes ENTS dosPuntos ENTS decimal ENTS0 POS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-26)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-26)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-26)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-20)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-20)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-20)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-14)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-14)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-14)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).value;
		
isNeutral_=Boolean.parseBoolean((String)e1);
Nombre_=(String)e2;
Naves_=Integer.parseInt((String)e3);
Produccion_=Integer.parseInt((String)e4);
Muertes_=Double.parseDouble((String)e5);

if(isNeutral_){
planeta_neutral n1=new planeta_neutral(Naves_,Muertes_,Nombre_,false,false,Produccion_);
n1.setX_(coord_x);
n1.setY_(coord_y);
try{
Nombre_.isEmpty();
neutrales_.add(n1);
}catch(NullPointerException e){
}


}else{
planeta_jugador p1=new planeta_jugador(Naves_,Muertes_,Nombre_,false,false,Produccion_);
p1.setX_(coord_x);
p1.setY_(coord_y);
try{
Nombre_.isEmpty();
jugadores_.add(p1);
}catch(NullPointerException e){
}

}



              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DATOS",9, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-33)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PLANETAS ::= planetas ENTS dosPuntos ENTS abreCor DATOS 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("PLANETAS",1, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-5)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEU1 ::= naves ENTS dosPuntos ENTS bool ENTS0 estadisticas ENTS dosPuntos ENTS bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.peek()).value;
		
naves_=Boolean.parseBoolean((String)e1);
estadisticas_=Boolean.parseBoolean((String)e2);

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("NEU1",6, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-10)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NEU ::= neutrales ENTS dosPuntos ENTS abreCor ENTS NEU1 ENTS cierraCor 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("NEU",5, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OP1 ::= azar ENTS dosPuntos ENTS bool ENTS0 mapaCiego ENTS dosPuntos ENTS bool ENTS0 acumular ENTS dosPuntos ENTS bool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-12)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.peek()).value;
		
azar_=Boolean.parseBoolean((String)e1);
mapaciego_=Boolean.parseBoolean((String)e2);
acumular_=Boolean.parseBoolean((String)e3);

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("OP1",4, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-16)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DIMENSIONES ::= error abreCor filas 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",3, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DIMENSIONES ::= error dosPuntos abreCor 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",3, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DIMENSIONES ::= error dimensiones dosPuntos 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",3, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DIMENSIONES ::= dimensiones ENTS dosPuntos ENTS abreCor ENTS filas ENTS dosPuntos ENTS num ENTS0 columnas ENTS dosPuntos ENTS num ENTS cierraCor 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)).value;
		
dimension_=new Dimension();
int x=Integer.parseInt((String)e1);
int y=Integer.parseInt((String)e2);
dimension_.setSize(x,y);

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",3, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-18)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAPA ::= error DIMENSIONES OP1 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("MAPA",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAPA ::= error abreCor DIMENSIONES 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("MAPA",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAPA ::= error dosPuntos DIMENSIONES 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("MAPA",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAPA ::= error mapa DIMENSIONES 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("MAPA",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-2)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAPA ::= ENTS mapa ENTS dosPuntos ENTS abreCor ENTS DIMENSIONES ENTS OP1 ENTS0 NEU ENTS cierraCor ENTS PLANETAS JUGADORES 
            {
              Object RESULT =null;

              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("MAPA",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-16)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          return CUP$parser_save$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAPA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)).value;
		RESULT = start_val;
              CUP$parser_save$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_save$stack.elementAt(CUP$parser_save$top-1)), ((java_cup.runtime.Symbol)CUP$parser_save$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_save$parser.done_parsing();
          return CUP$parser_save$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

